<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>327. 区间和的个数</title>
    <link href="/2021/01/23/327.%20%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2021/01/23/327.%20%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>依然考虑前缀和数组 \textit{preSum}preSum。</p><p>对于每个下标 jj，以 jj 为右端点的下标对的数量，就等于数组 \textit{preSum}[0..j-1]preSum[0..j−1] 中的所有整数，出现在区间 [\textit{preSum}[j]-\textit{upper}, \textit{preSum}[j]-\textit{lower}][preSum[j]−upper,preSum[j]−lower] 的次数。</p><p>区间和的问题比较适合用线段树和树状数组</p><p>很多人都把constexpr和const相比较。</p><p>其实，const并不能代表“常量”，它仅仅是对变量的一个修饰，告诉编译器这个变量只能被初始化，且不能被直接修改（实际上可以通过堆栈溢出等方式修改）。而这个变量的值，可以在运行时也可以在编译时指定。</p><p>constexpr可以用来修饰变量、函数、构造函数。一旦以上任何元素被constexpr修饰，那么等于说是告诉编译器 “请大胆地将我看成编译时就能得出常量值的表达式去优化我”。</p><p><a href="https://www.cnblogs.com/xenny/p/9739600.html">树状数组可以参考</a><br><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BIT</span></span><span class="hljs-class">    &#123;</span>        <span class="hljs-keyword">private</span>:            <span class="hljs-keyword">int</span> n;            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; arr;        <span class="hljs-keyword">public</span>:            <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowerbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span><span class="hljs-function">            </span>&#123;                <span class="hljs-keyword">return</span> i&amp;(-i);            &#125;            <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//求A[1 - i]的和</span></span><span class="hljs-function">            </span>&#123;                <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;                <span class="hljs-keyword">while</span>(i)                &#123;                    res+=arr[i];                    i-=lowerbit(i);                &#125;                <span class="hljs-keyword">return</span> res;            &#125;            <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> x)</span><span class="hljs-comment">//在i位置加上k</span></span><span class="hljs-function">            </span>&#123;                <span class="hljs-keyword">while</span>(i&lt;=n)<span class="hljs-comment">//树状数组是从1开始的，所以需要有等号</span>                &#123;                    arr[i]+=x;                    i+=lowerbit(i);                &#125;            &#125;            BIT(<span class="hljs-keyword">int</span> _n): n(_n),arr(_n+<span class="hljs-number">1</span>)&#123;&#125;    &#125;;    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countRangeSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> lower, <span class="hljs-keyword">int</span> upper)</span> </span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> len=nums.<span class="hljs-built_in">size</span>();        <span class="hljs-built_in">vector</span>&lt;ll&gt; presum=&#123;<span class="hljs-number">0</span>&#125;;        ll sum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            sum+=nums[i];            presum.push_back(sum);        &#125;        <span class="hljs-built_in">set</span>&lt;ll&gt; se;        <span class="hljs-keyword">for</span>(ll p: presum)        &#123;            se.insert(p);            se.insert(p-upper);            se.insert(p-lower);        &#125;        <span class="hljs-built_in">unordered_map</span>&lt;ll,<span class="hljs-keyword">int</span>&gt; m;        <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(ll p: se)        &#123;            m[p]=index;            index++;        &#125;        <span class="hljs-keyword">int</span> result=<span class="hljs-number">0</span>;        <span class="hljs-function">BIT <span class="hljs-title">tree</span><span class="hljs-params">(m.<span class="hljs-built_in">size</span>())</span></span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;presum.<span class="hljs-built_in">size</span>();i++)        &#123;            <span class="hljs-keyword">int</span> left=m[presum[i]-upper];            <span class="hljs-keyword">int</span> right=m[presum[i]-lower];            result+=tree.query(right+<span class="hljs-number">1</span>)-tree.query(left);<span class="hljs-comment">//这里有点迷惑，不懂为什么这样弄</span>            tree.add(m[presum[i]]+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>c++</tag>
      
      <tag>树状数组</tag>
      
      <tag>离散化</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1584. 连接所有点的最小费用</title>
    <link href="/2021/01/22/1584.%20%E8%BF%9E%E6%8E%A5%E6%89%80%E6%9C%89%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8/"/>
    <url>/2021/01/22/1584.%20%E8%BF%9E%E6%8E%A5%E6%89%80%E6%9C%89%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>朴素版Prim O(n^2)</p><p>适用于稠密图</p><p>稀疏图的 最小生成树</p><p>这个是prim的情况</p><p>学习STL，发现STL默认都是使用()比较的，默认比较使用less（即’&lt;’运算符），如sort(a,a+n)，默认将数组按照递增的顺序来排序（前面的元素&lt;后面的嘛），但是优先队列的源码比较奇特，虽然按道理使用less比较应该默认是小根堆（即堆顶元素最小），但是priority_queue&lt;&gt;默认是大根堆的，这是因为优先队列队首指向最后，队尾指向最前面的缘故！每次入队元素进去经排序调整后，优先级最大的元素排在最前面，也就是队尾指向的位置，这时候队首指向优先级最小的元素！所以虽然使用less但其实相当于greater，我们重载运算符的时候比较函数里面写&gt;就相当于&lt;排序方式，这点需要花点时间想想，再来说一说优先队列的这个类型，其实有三个参数：priority_queue<class type,class container,class compare>，即类型，容器和比较器，后两个参数可以缺省，这样默认的容器就是vector，比较方法是less，也就是默认大根堆，可以自定义写比较方法，但此时若有比较方法参数，则容器参数不可省略！priority_queue&lt;&gt;的可支持的容器必须是用数组实现的容器，如vector，deque，但不能是list（推荐vector），比较方法可以写结构体重载()运算符，也可以用less，greater这些语言实现了的，但是灵活性不够，建议手写重载结构体，或者——如果不想写比较结构体的话，就将后面的两个参数缺省，直接重载类型的&lt;运算符，所以这里写的时候要注意优先队列和其他容器比较器的区别。</class></p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:<span class="hljs-built_in">int</span> a[<span class="hljs-number">1002</span>][<span class="hljs-number">1002</span>];<span class="hljs-built_in">int</span> sta[<span class="hljs-number">1002</span>];    struct node    &#123;        <span class="hljs-built_in">int</span> weight,p1,p2;    &#125;;    struct cmp    &#123;        <span class="hljs-built_in">bool</span> operator()(node a,node b) &#123; <span class="hljs-keyword">return</span>  a.weight &gt; b.weight; &#125;    &#125;;    <span class="hljs-built_in">int</span> minCostConnectPoints(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; points)     &#123;        <span class="hljs-built_in">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;        <span class="hljs-built_in">int</span> len=points.size();        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; dist(len+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;(len+<span class="hljs-number">1</span>,INF));        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;points.size();i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;points.size();j++)            &#123;                dist[j][i]=dist[i][j]=abs(points[i][<span class="hljs-number">0</span>]-points[j][<span class="hljs-number">0</span>])+abs(points[i][<span class="hljs-number">1</span>]-points[j][<span class="hljs-number">1</span>]);            &#125;        &#125;        vector&lt;<span class="hljs-built_in">int</span>&gt; po;        po.push_back(<span class="hljs-number">0</span>);        sta[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;        <span class="hljs-built_in">int</span> result=<span class="hljs-number">0</span>;        priority_queue &lt;node,vector&lt;node&gt;,cmp&gt; qu;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)        &#123;            node tt = &#123;weight:dist[<span class="hljs-number">0</span>][i], p1:<span class="hljs-number">0</span>,p2:i&#125;;            qu.push(tt);        &#125;        <span class="hljs-keyword">while</span>(po.size()&lt;len)        &#123;            <span class="hljs-keyword">while</span>(!qu.empty())            &#123;                node tmp1=qu.top();                <span class="hljs-keyword">if</span>(sta[tmp1.p2]==<span class="hljs-number">1</span>&amp;&amp;sta[tmp1.p1]==<span class="hljs-number">1</span>)                &#123;                    qu.pop();                    <span class="hljs-keyword">continue</span>;                &#125;                <span class="hljs-keyword">else</span>                    <span class="hljs-keyword">break</span>;            &#125;            node tmp=qu.top();            <span class="hljs-comment">// cout&lt;&lt;tmp.p1&lt;&lt;&quot; &quot;&lt;&lt;tmp.p2&lt;&lt;endl;</span>            qu.pop();            sta[tmp.p2]=<span class="hljs-number">1</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)            &#123;                <span class="hljs-keyword">if</span>(sta[i]==<span class="hljs-number">1</span>||i==tmp.p2)                    <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">// cout&lt;&lt;dist[tmp.p2][i]&lt;&lt;&quot; &quot;&lt;&lt;tmp.p2&lt;&lt;&quot; &quot;&lt;&lt;i&lt;&lt;endl;</span>                node tt = &#123;weight:dist[tmp.p2][i], p1:tmp.p2,p2:i&#125;;                qu.push(tt);            &#125;              result+=tmp.weight;            po.push_back(<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>算法</tag>
      
      <tag>c++</tag>
      
      <tag>最小生成树</tag>
      
      <tag>prim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>能谱CT物理原理</title>
    <link href="/2021/01/18/%E8%83%BD%E8%B0%B1CT%E7%89%A9%E7%90%86%E5%8E%9F%E7%90%86/"/>
    <url>/2021/01/18/%E8%83%BD%E8%B0%B1CT%E7%89%A9%E7%90%86%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>CNR = contrast-to-noise ratio, EID = energy-integrating detector, PCD<br>= photon-counting detector</p><p>相对于传统的能量集成探测器CT，光子计数CT将允许减少辐射剂量，提高空间分辨率，纠正光束硬化伪影，并使用替代对比剂，同时为定量成像创造机会。</p><p>EID CT， x光打到一个吸收层上，吸收层吸收x射线光子，然后转化为可见光光子，可见光光子被一个由半导体材料制成的光电二极管吸收，光电二极管测量入射光的数量，并产生一个电信号，该电信号与在测量期间沉积的总能量成比例，而不是单个x射线光子的能量。</p><p>光子计数探测器(PCDs)，另一方面，不需要一个单独的层来转换x射线到光，但由一个单一的厚层半导体二极管(1.6-30毫米取决于材料)，在上面施加一个大的电压。如果入射的x射线被半导体吸收，它就会产生一团正负电荷(6)，迅速地彼此分离。移动的电荷在连接在电极上的电线上产生一个电脉冲，并被电子读出电路记录下来。因此，pcd直接将单个x射线光子转换成电信号，不像当前CT中使用的EIDs，需要额外的步骤将光子转换成可见光。</p><p>每一个光子撞击探测器元件，都会产生一个电脉冲，其高度与光子储存的能量成正比。探测器的电子系统计算高度超过预设阈值水平的脉冲的数目。阈值设置在高于电子噪声水平但低于入射光子产生的脉冲水平。此外，通过将每个脉冲与几个阈值水平进行比较，探测器可以根据光子的能量将入射光子分类成若干个能量箱(通常为2到8个)(图3)。因此，电子噪声有效地排除在光子和/或脉冲计数之外，所以一次射线可以产生很多个能谱段。</p><p>PCD计数器暂时没有商业应用。<br>使用特定能量测量和能量阈值来拒绝电子噪声。促进新的成像方法，如k-边缘减法<br>原因：<br>造成性能下降的影响取决于探测器中使用的传感器材料的类型。PCDs的研究主要集中在碲化镉、碲化镉锌和硅(6)</p><p>康普顿效应</p><p>在理想PCD中，光子只在它所撞击的探测器元件中产生信号。在现实中，有几个物理效应可能导致单个光子在多个探测器元素中被登记为计数事件。在硅探测器中，很大一部分光子在探测器材料中通过康普顿散射相互作用，将一小部分能量沉积在探测器元素中。然后，散射光子就会向一个新的、随机的方向移动，可能会把剩余的能量储存在另一个探测器元素中，对于碲化镉和碲化镉锌，康普顿散射概率较低。然而，在原始相互作用中沉积的部分能量可能会以荧光x射线的形式释放，它可以被邻近的探测器元素吸收，如图4,a(8,9)所示。尽管康普顿散射和x射线荧光是不同的物理效应，但它们都导致光子的能量范围不正确，并且可能被多次计算。</p><p>电荷共享效应</p><p>在硅和镉碲化或镉锌碲化探测器中，探测器元件之间的串扰也可以归因于一种称为电荷共享的效应。如图4,B所示，每个被吸收的x射线光子都会在传感器材料中产生大量的正负电荷。如果光子在两个探测器元件之间的边界附近被吸收，电荷云的一部分可能会延伸到相邻的探测器元件，这可以记录光子能量的一部分。结果是光子被计数两次。</p><p>各种各样的串扰在不同的方面降低了图像质量。首先，它们会降低空间分辨率(即模糊图像)，因为它们会导致光子被记录在错误的探测器元件中。其次，它们可能会导致光子被多次计数。这降低了图像的对比度-噪声比(CNR)，因为所有在计数光子数量中引入额外随机性的影响都会产生额外的图像噪声。第三，不同形式的串扰降低了探测器的能量分辨率，降低了能量信息的可靠性，并导致材料选择性图像中的图像噪声增加。</p><p>堆积效应</p><p>需要一个快速探测器来计数单个光子。每平方毫米每秒有几亿光子撞击探测器，因此传感器材料必须能够快速传输释放的电荷，读出电子必须能够足够快地计算产生的脉冲。对足够快速和稳定的探测器的需求是光子计数CT扫描仪最近才开始用于临床CT剂量水平的原因之一(13)。然而，PCDs广泛应用于PET、SPECT和双能量x线吸收仪，并已被引入一种商业乳房x线成像系统(微剂量;Philips Healthcare, Best，荷兰)，那里的计数率要低得多。如果光子到达得太快，一些由此产生的电脉冲会相互叠加，这种现象被称为脉冲堆积</p><p>如果两个连续脉冲几乎同时发生，它们将被记录为一个能量等于两个入射光子能量之和的单个脉冲。如果脉冲到达时间的差异稍微大一些，探测器可能会将它们记录为两个单独的计数，但部分重叠仍然会导致测量光子能量的误差(图5,B)。堆积对图像质量有两种影响。首先，计数损失增加了图像噪声，因为较少的光子有助于测量(14)。第二，能量分辨率下降，类似于相声(14-16)的效果。因为在高计数率下会发生堆积，所以它不会降低图像的所有部分<br>这些影响可以通过设计更小的探测器元件和更快的计数器来最小化。然而，当探测器元件变得更小时，在堆积和电荷共享之间有一个折衷。</p><p>由于具有不同能量的光子的加权方式，理想PCD可以产生比理想EID更低的图像噪声。由于EID测量的是吸收的总x射线能量，高能光子对总信号的贡献相对于低能量光子。然而，这种加权并不能产生最佳的CNR，因为在高能量时组织对比度较低。为了优化图像的CNR，可以将最大的权重分配给能量较低、组织间对比度最高的光子，如图7所示。能量分解PCD能够为低能量箱分配更高的权重因子，从而提高CNR(4,18,19)。给予低能量光子更高重量的一个缺点是，由于x射线光谱中低能量部分的组织衰减更加非均匀，因此会导致光束硬化现象的增加(20)</p><p>在x射线计算机断层扫描(CT)中，具有不同元素组成的材料可以用CT图像上的相同像素值(即CT数)表示，这取决于材料的质量密度</p><p>在双能量CT中，以第二能量获得额外的衰减测量，允许两种材料的区分，这个双能CT，就是加两个能量kev，和能谱CT划分能量箱有所不同。</p><p>双能量CT的技术途径</p><p>Two Temporally Sequential Scans 两个时间顺序扫描,进行了两次时间顺序扫描，以获取两个管电位处的数据,由于数据不是同时获得的，患者在两次扫描之间发生的运动导致结果图像和材料组成信息的严重退化,后面有一种单轴旋转改进的方法，但是效果应该也不是很好，然后我也没太看懂，尴尬。这个方法可以在任何CT扫描仪上执行(不需要特殊硬件</p><p>Rapid Switching of X-Ray Tube Potential x射线管电位的快速切换，允许在低和高管电位下获得交替投影测量，应用主要是骨骼密度测量。然而，在低管电位测量中，管电流不能迅速增加到足够快的程度，从而在低管电位和高管电位数据集中都能达到相当的噪声水平。这种噪音上的差异限制了该技术在骨密度测量之外的应用<br>在连续视图之间切换管电位要求从低到高管电位的转换时间小于一毫秒。此外，过渡必须尽可能突然，以最大限度地分离测量数据的能量，尽管快速调制x射线管电流的困难可能在低能量数据中造成高噪音水平或来自高能量投影的过量剂量。然而，这个问题可以通过对低和高能量投影使用不对称采样来解决。通过这种方式，在不迅速改变管电流的情况下，获得了低能量投影所需的增加管电流-时间积<br>低能量和高能量数据集的近同时数据采集。允许通过使用投影数据或重建图像来实现双能量物质分解算法。减少计算出的“虚拟单能量”图像中的光束硬化现象，需要专门的硬件。能量谱的高重叠</p><p>Multilayer Detector 多层探测器<br>就是探测头有两层，里层的获得低能量的信息，外层的获得高能量的信息。<br>低能耗数据收集从前面或内层的探测器层和高能数据收集从后面或外层探测器层(图5)。这类似于多层探测器的使用双能x线摄影(6 - 8)。为了在低和高能量图像中获得相同的噪声，使用了不同的探测器厚度。<br>低能量数据集和高能量数据集的同时数据采集。所有图像数据都以支持特定材料成像的方式获取，但是需要专门的硬件。能量谱的高重叠。低和高能量图像的噪声水平可能不同</p><p>Dual x-ray sources<br>双x射线源<br>双源CT是将两个x射线源和两个数据采集系统安装在同一架龙门上，相互垂直放置的CT系统<br>因为两个管同时被激发，原始主光子来自一个管的散射辐射可能被另一个管的探测器探测到，反之亦然。这将降低光谱分离，并要求实现适当的散射校正算法(12)。双源方法的一个优点是能够独立优化每个管-探测器对的光谱过滤，从而增加在特定物质图像中光谱分离和增加信噪比<br>管电流和管过滤可以分别优化每个管电位。相对较低的光谱重叠程度，这提高了材料特定图像的对比噪声比。光束硬化校正应用于图像重建之前，允许在图像域中创建特定材料的图像。<br>需要专门的硬件。在低能和高能数据之间有90度的相移。同时使用这两种x射线源允许散射辐射，其原始的主光子来自一个管被另一个管的探测器检测到，需要专门的散射校正。</p>]]></content>
    
    
    
    <tags>
      
      <tag>医学图像</tag>
      
      <tag>物理原理</tag>
      
      <tag>能谱CT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>匈牙利算法</title>
    <link href="/2021/01/16/%E4%BA%8C%E5%88%86%E5%9B%BE_%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    <url>/2021/01/16/%E4%BA%8C%E5%88%86%E5%9B%BE_%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>匹配：在图论中，一个匹配（matching）是指一个边的集合，其中任意两条边都没有公共顶点。</p><p>最大匹配：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配</p><p>完美匹配：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。完美匹配一定是最大匹配（完美匹配的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突），但并非每个图都存在完美匹配。</p><p>交替路径：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径称为交替路径。</p><p>增广路径：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。</p><p>增广路径性质：<br>    （1）P的路径长度必定为奇数，第一条边和最后一条边都不属于M，因为两个端点分属两个集合，且未匹配。<br>    （2）P经过取反操作可以得到一个更大的匹配M’。<br>    （3）M为G的最大匹配当且仅当不存在相对于M的增广路径。</p><p>匈牙利算法：利用增广路径求二分图的最大匹配算法称作匈牙利算法。（匈牙利数学家Edmonds于1965年提出）。<br>基本思想：通过寻找增广路径，把增广路径中的匹配边和非匹配边的相互交换，这样就会多出一条匹配边，直到找不到增广路径为止。</p><p>就是每次从一个未匹配点出发，然后依次经过非匹配边、匹配边、非匹配边，并且途径另一个未匹配点，然后匹配边和非匹配边的相互交换，这样就会多出一个匹配边，直到找不到增广路径。</p><p>这是leetcode<br>LCP 04. 覆盖<br>你有一块棋盘，棋盘上有一些格子已经坏掉了。你还有无穷块大小为1 * 2的多米诺骨牌，你想把这些骨牌不重叠地覆盖在完好的格子上，请找出你最多能在棋盘上放多少块骨牌？这些骨牌可以横着或者竖着放。</p><p>输入：n, m代表棋盘的大小；broken是一个b * 2的二维数组，其中每个元素代表棋盘上每一个坏掉的格子的位置。</p><p>输出：一个整数，代表最多能在棋盘上放的骨牌数。</p><p>该题看上去与二分图匹配无关，但其实可以转化成二分图匹配。一个骨牌恰好覆盖两格，而这两格必须是相邻的。因此如果把相邻的两格看成分别属于X、Y两个集合的节点，相邻的节点之间认为有一条（黑色）边相连，放骨牌看做将被覆盖的两格之间的边染成红色；由于一格（一个节点）只能被一个骨牌覆盖（被一条红边连接），那么连接的方式整个就是二分图的一个匹配。如何构建这张图呢？由于相邻的点属于不同的集合，因此仿照国际象棋的棋盘“间隔地”染色就好了。于是，相邻格子之间对应的边连接的都是属于不同集合的节点，相同集合的节点因为对应的不是相邻格子都不直接相连，形成了二分图。最后，能放置骨牌的最大数量就是二分图最大匹配中的边数。</p><p>二分图最大匹配可以用匈牙利算法解决，也可以转化成最大流解决，本次使用前者。匈牙利算法的核心操作其实与后者还挺像，后者是寻找增流路径，而前者是寻找一个“交互道路”（节点颜色交替的道路），其实都可以理解为增广道路（augmentation path）。只不过，由于在二分图匹配中一条边要么就是选要么就是不选，相当于是特殊的“流”，0或者1，因此最大流的“退流”操作，被简化为了异或操作。无论是从算</p><p>示例 1：</p><p>输入：n = 2, m = 3, broken = [[1, 0], [1, 1]]<br>输出：2<br>解释：我们最多可以放两块骨牌：[[0, 0], [0, 1]]以及[[0, 2], [1, 2]]。（见下图）<br>&lt;!—hexoPostRenderEscape:<pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">int</span> row=<span class="hljs-number">0</span>,col=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> grid[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">int</span> erge[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">int</span> matchvi[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">int</span> belong[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">int</span> domino(<span class="hljs-built_in">int</span> n, <span class="hljs-built_in">int</span> m, vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; broken)<br>    &#123;<br>        row=n,col=m;<br>        <span class="hljs-built_in">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">auto</span> g: broken)<br>        &#123;<br>            grid[g[<span class="hljs-number">0</span>]][g[<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;col;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(grid[i][j])<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<span class="hljs-comment">//构造边</span><br>                &#123;<br>                    <span class="hljs-built_in">int</span> arow=a[k][<span class="hljs-number">0</span>]+i,acol=a[k][<span class="hljs-number">1</span>]+j;<br>                    <span class="hljs-keyword">if</span>(arow&lt;<span class="hljs-number">0</span>||arow&gt;=row||acol&lt;<span class="hljs-number">0</span>||acol&gt;=col||grid[arow][acol])<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-comment">// cout&lt;&lt;1;</span><br>                    erge[i<em>col+j][arow</em>col+acol]=erge[arow<em>col+acol][i</em>col+j]=<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hug();<br>    &#125;<br>    <span class="hljs-built_in">int</span> hug()<br>    &#123;</code></pre></p><pre><code>    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; res=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;row*col;i++)    &amp;#123;        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; tmp1=i/col;        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; tmp2=i%col;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(grid[tmp1][tmp2])            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!((tmp1+tmp2)&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;//为偶数格子跳过，对奇数找匹配&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;        memset(matchvi, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sizeof(matchvi));        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(match(i))            res++;    &amp;#125;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;&amp;#125;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; match(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x)&amp;#123;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;row*col;i++)    &amp;#123;        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; tmp1=i/col;        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; tmp2=i%col;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(((tmp1+tmp2)&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;//如果是偶数跳过&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((erge[x][i]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&amp;amp;&amp;amp;(matchvi[i]==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))        &amp;#123;            matchvi[i]=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(belong[i]==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;||match(belong[i]))            &amp;#123;&lt;span class=&quot;hljs-comment&quot;&gt;//如果i没有确定，或者确定的人可以换&lt;/span&gt;                belong[i]=x;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;            &amp;#125;        &amp;#125;    &amp;#125;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&amp;#125;</code></pre><p>&#125;;&lt;/code&gt;&lt;/pre&gt;:hexoPostRenderEscape—&gt;</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>c++</tag>
      
      <tag>匈牙利算法</tag>
      
      <tag>二分图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>785. 判断二分图</title>
    <link href="/2021/01/14/785.%20%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    <url>/2021/01/14/785.%20%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>一个图是二分图，当且仅当图中不含有奇数环<br>二分图的方法，染色法，就是通过对节点进行着色，算法就是深搜的方法</p><pre><code class="hljs arduino"><span class="hljs-keyword">bool</span> res=<span class="hljs-literal">true</span>;<span class="hljs-keyword">int</span> sta[<span class="hljs-number">105</span>];<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; graph)</span> </span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;graph.<span class="hljs-built_in">size</span>();i++)    &#123;        <span class="hljs-keyword">if</span>(sta[i]==<span class="hljs-number">0</span>)            paint(i,<span class="hljs-number">1</span>,graph);    &#125;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t,<span class="hljs-keyword">int</span> color,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; g)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(res==<span class="hljs-literal">false</span>)        <span class="hljs-keyword">return</span> ;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;g[t].<span class="hljs-built_in">size</span>();i++)    &#123;        <span class="hljs-keyword">if</span>(sta[g[t][i]]==<span class="hljs-number">0</span>)        &#123;            sta[g[t][i]]=-color;            paint(g[t][i],-color,g);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sta[g[t][i]]==-color)            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">else</span>        &#123;            res=<span class="hljs-literal">false</span>;            <span class="hljs-keyword">return</span> ;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>c++</tag>
      
      <tag>二分图</tag>
      
      <tag>染色法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>787. K 站中转内最便宜的航班</title>
    <link href="/2021/01/13/787.%20K%20%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/"/>
    <url>/2021/01/13/787.%20K%20%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/</url>
    
    <content type="html"><![CDATA[<p>循环n次<br>遍历所有边u-&gt;v,权w (松弛操作)<br>dist[v]=min(dist[v], dist[u]+w)</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>处理有负权边的图<br>循环次数的含义：循环K次后，表示不超过K条边的最短距离<br>有边数限制的最短路，只能用Bellman-Ford算法，不能用spfa算法<br>如果有负权回路，最短路不一定存在 -</p><p>Bellman-Ford算法可以求出是否有负环<br>第n循环后，还有更新，说明路径上有n+1个点，也就是存在环，还有更新，说明环是负环<br>循环n次后, 所有的边u-&gt;v,权w满足三角不等式:dist[v]&lt;=dist[u]+w<br><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> findCheapestPrice(<span class="hljs-built_in">int</span> n, vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; flights, <span class="hljs-built_in">int</span> src, <span class="hljs-built_in">int</span> dst, <span class="hljs-built_in">int</span> K) &#123;    <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;    vector&lt;<span class="hljs-built_in">int</span>&gt; res(n+<span class="hljs-number">1</span>,INF);    res[src]=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=K;i++)    &#123;        vector&lt;<span class="hljs-built_in">int</span>&gt; tmp(res);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;flights.size();j++)        &#123;            <span class="hljs-keyword">if</span>(flights[j][<span class="hljs-number">2</span>]+tmp[flights[j][<span class="hljs-number">0</span>]]&lt;res[flights[j][<span class="hljs-number">1</span>]])                res[flights[j][<span class="hljs-number">1</span>]]=flights[j][<span class="hljs-number">2</span>]+tmp[flights[j][<span class="hljs-number">0</span>]];        &#125;    &#125;    <span class="hljs-keyword">if</span>(res[dst]==INF)        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> res[dst];&#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>c++</tag>
      
      <tag>最短路径</tag>
      
      <tag>ford算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>743. 网络延迟时间</title>
    <link href="/2021/01/13/743.%20%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4/"/>
    <url>/2021/01/13/743.%20%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>有 N 个网络节点，标记为 1 到 N。</p><p>给定一个列表 times，表示信号经过有向边的传递时间。 times[i] = (u, v, w)，其中 u 是源节点，v 是目标节点， w 是一个信号从源节点传递到目标节点的时间。</p><p>现在，我们从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1。</p><p>输入：times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2<br>输出：2</p><p>主要就是迪杰斯特拉的代码<br>这个是没有优化的结果，每次选的是距离初始点最小距离的点。<br>集合S：当前已经确定最短距离的点</p><p>dist[1] = 0, dist[i] = 正无穷<br>for v: 1 ~ n<br>t &lt;- 不在s中的距离最近的点<br>s &lt;- t<br>用t更新其他点的距离<br>朴素的Dijkstra算法往往是稠密图，用邻接矩阵来存储<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> networkDelayTime(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; times, <span class="hljs-built_in">int</span> N, <span class="hljs-built_in">int</span> K)     &#123;        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; mat(N+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;(N+<span class="hljs-number">1</span>,<span class="hljs-number">0x3f3f3f3f</span>));        vector&lt;<span class="hljs-built_in">int</span>&gt; res(N+<span class="hljs-number">1</span>,<span class="hljs-number">0x3f3f3f3f</span>);        vector&lt;<span class="hljs-built_in">int</span>&gt; sta(N+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//值为1点被被选，为0没被选</span>        <span class="hljs-built_in">int</span> result=<span class="hljs-number">-1</span>;        sta[K]=<span class="hljs-number">1</span>;        res[K]=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;times.size();i++)        &#123;            mat[times[i][<span class="hljs-number">0</span>]][times[i][<span class="hljs-number">1</span>]]=times[i][<span class="hljs-number">2</span>];            <span class="hljs-keyword">if</span>(times[i][<span class="hljs-number">0</span>]==K)            &#123;                res[times[i][<span class="hljs-number">1</span>]]=times[i][<span class="hljs-number">2</span>];            &#125;        &#125;        <span class="hljs-comment">// cout&lt;&lt;&quot;1&quot;&lt;&lt;endl;</span>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;N<span class="hljs-number">-1</span>;i++)        &#123;            <span class="hljs-built_in">int</span> t=<span class="hljs-number">-1</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=N;j++)            &#123;                <span class="hljs-keyword">if</span>(sta[j]==<span class="hljs-number">0</span>&amp;&amp;(t==<span class="hljs-number">-1</span>||res[j]&lt;res[t]))                &#123;                    t=j;                &#125;            &#125;            sta[t]=<span class="hljs-number">1</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=N;j++)            &#123;                <span class="hljs-keyword">if</span>(res[t]+mat[t][j]&lt;res[j])                &#123;                    res[j]=res[t]+mat[t][j];                &#125;            &#125;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)        &#123;            <span class="hljs-keyword">if</span>(res[i]==<span class="hljs-number">0x3f3f3f3f</span>)                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;            <span class="hljs-keyword">if</span>(i==K)                <span class="hljs-keyword">continue</span>;            result=max(result,res[i]);        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;;</code></pre></p><p>集合S：当前已经确定最短距离的点</p><p>dist[1] = 0, dist[i] = 正无穷<br>for v: 1 ~ n<br>t &lt;- 不在s中的 与起始点距离最近的点 ；小顶堆维护 O(logN)<br>s &lt;- t; O(1)<br>用t更新其他点的距离 ; O(mlogN)<br>稀疏图用堆优化版的Dijkstra算法<br>这个是优化之后的，主要是用稀疏图替换邻接矩阵，同时用优先队列替换遍历搜寻最小的边。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> networkDelayTime(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; times, <span class="hljs-built_in">int</span> N, <span class="hljs-built_in">int</span> K) &#123;    <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;    vector&lt;<span class="hljs-built_in">int</span>&gt; stat(N+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);    vector&lt;<span class="hljs-built_in">int</span>&gt; res(N+<span class="hljs-number">1</span>,INF);    vector&lt;vector&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt;&gt; m(N+<span class="hljs-number">1</span>);    priority_queue&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;,vector&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt;&gt; queue;    queue.push(&#123;<span class="hljs-number">0</span>,K&#125;);    res[K]=<span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> result=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;times.size();i++)    &#123;        m[times[i][<span class="hljs-number">0</span>]].push_back(&#123;times[i][<span class="hljs-number">2</span>],times[i][<span class="hljs-number">1</span>]&#125;);    &#125;    <span class="hljs-keyword">while</span>(!queue.empty())    &#123;        <span class="hljs-built_in">auto</span> tmp=queue.top();        queue.pop();        <span class="hljs-keyword">if</span>(stat[tmp.second]==<span class="hljs-number">1</span>)            <span class="hljs-keyword">continue</span>;        stat[tmp.second]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">auto</span> &amp;p: m[tmp.second])        &#123;            <span class="hljs-keyword">if</span>(p.first+tmp.first&lt;res[p.second])<span class="hljs-comment">//tmp代表我们找到的下一个加入的点，然后找这个点的所有的边来更新</span>            &#123;                res[p.second]=p.first+tmp.first;                queue.push(&#123;p.first+tmp.first,p.second&#125;);            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)    &#123;        <span class="hljs-keyword">if</span>(res[i]==INF)            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;        <span class="hljs-keyword">if</span>(i==K)            <span class="hljs-keyword">continue</span>;        result=max(result,res[i]);    &#125;    <span class="hljs-keyword">return</span> result;&#125;</code></pre><p>SPFA算法</p><p>首先相比Dijkstra算法，SPFA可以处理带有负权变的图。<br>（个人认为原因是SPFA在进行松弛操作时就是那个更新距离的地方可以对某一条边重复进行松弛，因为可能某一个点会被多次加入队列，这个可以这么理解，如果在没有负边的情况下松弛一次就是说一条最短路径最多只能经过松弛的这个点一次，这个在没有负边的情况下是显而易见的，当有负边的情况下，经过这个点多次就可能获得更小的最短路径。当我们松弛了某个点超过N次，就可以认为出现了负环，为什么是超过N次呢，极端情况下如果没有负环那么每次加入一次点我们都可以认为这个点与其他点连成的一条边加入最短路径中，如果加了N-1条边还不是最短路径，到第n次那肯定就是有负环了。（大家都写的大于N次），我个人交代码试了以下，好像到n就可以了，但是保险还是大于N更好）</p><p>实现方法：</p><p>　　建立一个队列，初始时队列里只有起始点，再建立一个表格记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到他本身的路径赋为0）。然后执行松弛操作，用队列里有的点作为起始点去刷新到所有点的最短路，如果刷新成功且被刷新点不在队列中则把该点加入到队列最后。重复执行直到队列为空。</p><p>判断有无负环：<br>　　如果某个点进入队列的次数超过N次则存在负环（SPFA无法处理带负环的图，但是可以判断是否出现负权环）,这一点和ford算法是一样的，超过N次松弛就代表出现的最短路径长度是大于等于N的，这样的简单路径是不存在的。</p><p>我们可以看出代码上其实是和迪杰斯特拉算法很像的。<br>&lt;!—hexoPostRenderEscape:<pre><code class="hljs angelscript">    <span class="hljs-built_in">int</span> networkDelayTime(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; times, <span class="hljs-built_in">int</span> N, <span class="hljs-built_in">int</span> K)<br>    &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; stat(N+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; res(N+<span class="hljs-number">1</span>,INF);<br>        vector&lt;vector&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt;&gt; m(N+<span class="hljs-number">1</span>);<span class="hljs-comment">//距离队列</span><br>        priority_queue&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;,vector&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt;&gt; queue;<span class="hljs-comment">//刷新队列</span><br>        queue.push(&#123;<span class="hljs-number">0</span>,K&#125;);<br>        res[K]=<span class="hljs-number">0</span>;<br>        stat[K]=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;times.size();i++)<br>        &#123;<br>            m[times[i][<span class="hljs-number">0</span>]].push_back(&#123;times[i][<span class="hljs-number">2</span>],times[i][<span class="hljs-number">1</span>]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!queue.empty())<br>        &#123;<br>            <span class="hljs-built_in">auto</span> tmp=queue.top();<br>            queue.pop();<br>            stat[K]=<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// if(stat[tmp.second]==1)</span><br>            <span class="hljs-comment">//     continue;</span><br>            <span class="hljs-comment">// stat[tmp.second]=1;</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">auto</span> &amp;p: m[tmp.second])<br>            &#123;<br>                <span class="hljs-keyword">if</span>(p.first+tmp.first&lt;res[p.second])<span class="hljs-comment">//first 距离，second 目的点</span><br>                &#123;<br>                    res[p.second]=p.first+tmp.first;<br>                    <span class="hljs-keyword">if</span>(stat[K]==<span class="hljs-number">0</span>)<br>                    &#123;<br>                        queue.push(&#123;p.first+tmp.first,p.second&#125;);<br>                        stat[p.second]=<span class="hljs-number">1</span>;<br>                    &#125;</code></pre></p><pre><code>            &amp;#125;        &amp;#125;    &amp;#125;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=N;i++)    &amp;#123;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(res[i]==INF)            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==K)            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;        result=max(result,res[i]);    &amp;#125;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&amp;#125;</code></pre><p>&#125;;&lt;/code&gt;&lt;/pre&gt;:hexoPostRenderEscape—&gt;</p><p>floyd算法</p><p>这个也是求最短路径的算法，是求任意两点之间的最短路径，可以有负边，时间复杂度为O(N^3),空间复杂度为O(N^2),<br>算法主要是考虑的是从i到j经过的点的号不超过k的路径<br>dist[k][i][j]=min(dist[k-1][i][j],dist[k-1][i][k]+dist[k-1][k][j]);</p><p>这个可以通过动态规划进行空间优化。<br><pre><code class="hljs processing"><span class="hljs-comment">//主要的代码如下</span>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)     &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)         &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)             &#123;                <span class="hljs-built_in">dist</span>[i][j] = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">dist</span>[i][j], <span class="hljs-built_in">dist</span>[i][k] + <span class="hljs-built_in">dist</span>[k][j]);            &#125;        &#125;    &#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>c++</tag>
      
      <tag>最短路径</tag>
      
      <tag>迪杰斯特拉</tag>
      
      <tag>SPFA</tag>
      
      <tag>floyd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>177. 第N高的薪水</title>
    <link href="/2021/01/04/mysql177.%20%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <url>/2021/01/04/mysql177.%20%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<p>编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）。</p><p>+——+————+<br>| Id | Salary |<br>+——+————+<br>| 1  | 100    |<br>| 2  | 200    |<br>| 3  | 300    |<br>+——+————+<br>例如上述 Employee 表，n = 2 时，应返回第二高的薪水 200。如果不存在第 n 高的薪水，那么查询应返回 null。</p><p>+————————————+<br>| getNthHighestSalary(2) |<br>+————————————+<br>| 200                    |<br>+————————————+</p><pre><code class="hljs routeros">SELECT     e1.salary<span class="hljs-keyword">FROM</span>     employee e1 JOIN employee e2 ON e1.salary &lt;= e2.salaryGROUP BY     e1.salaryHAVING     count(DISTINCT e2.salary) = N</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>601. 体育馆的人流量</title>
    <link href="/2021/01/04/mysql601.%20%E4%BD%93%E8%82%B2%E9%A6%86%E7%9A%84%E4%BA%BA%E6%B5%81%E9%87%8F/"/>
    <url>/2021/01/04/mysql601.%20%E4%BD%93%E8%82%B2%E9%A6%86%E7%9A%84%E4%BA%BA%E6%B5%81%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>表：Stadium<br>+———————-+————-+<br>| Column Name   | Type    |<br>+———————-+————-+<br>| id            | int     |<br>| visit_date    | date    |<br>| people        | int     |<br>+———————-+————-+<br>visit_date 是表的主键<br>每日人流量信息被记录在这三列信息中：序号 (id)、日期 (visit_date)、 人流量 (people)<br>每天只有一行记录，日期随着 id 的增加而增加</p><p>编写一个 SQL 查询以找出每行的人数大于或等于 100 且 id 连续的三行或更多行记录。</p><p>返回按 visit_date 升序排列的结果表。</p><p>查询结果格式如下所示。</p><p>Stadium table:<br>+———+——————+—————-+<br>| id   | visit_date | people    |<br>+———+——————+—————-+<br>| 1    | 2017-01-01 | 10        |<br>| 2    | 2017-01-02 | 109       |<br>| 3    | 2017-01-03 | 150       |<br>| 4    | 2017-01-04 | 99        |<br>| 5    | 2017-01-05 | 145       |<br>| 6    | 2017-01-06 | 1455      |<br>| 7    | 2017-01-07 | 199       |<br>| 8    | 2017-01-09 | 188       |<br>+———+——————+—————-+</p><p>Result table:<br>+———+——————+—————-+<br>| id   | visit_date | people    |<br>+———+——————+—————-+<br>| 5    | 2017-01-05 | 145       |<br>| 6    | 2017-01-06 | 1455      |<br>| 7    | 2017-01-07 | 199       |<br>| 8    | 2017-01-09 | 188       |<br>+———+——————+—————-+<br>id 为 5、6、7、8 的四行 id 连续，并且每行都有 &gt;= 100 的人数记录。<br>请注意，即使第 7 行和第 8 行的 visit_date 不是连续的，输出也应当包含第 8 行，因为我们只需要考虑 id 连续的记录。<br>不输出 id 为 2 和 3 的行，因为至少需要三条 id 连续的记录。</p><pre><code class="hljs mipsasm">select <span class="hljs-keyword">distinct </span><span class="hljs-built_in">t1</span>.* from Stadium <span class="hljs-built_in">t1</span>,Stadium <span class="hljs-built_in">t2</span>, Stadium <span class="hljs-built_in">t3</span> where <span class="hljs-built_in">t1</span>.people&gt;=<span class="hljs-number">100</span> <span class="hljs-keyword">and </span><span class="hljs-built_in">t2</span>.people&gt;=<span class="hljs-number">100</span> <span class="hljs-keyword">and </span><span class="hljs-built_in">t3</span>.people&gt;=<span class="hljs-number">100</span> <span class="hljs-keyword">and </span>( (<span class="hljs-built_in">t1</span>.id=<span class="hljs-built_in">t2</span>.id<span class="hljs-number">-1</span> <span class="hljs-keyword">and </span><span class="hljs-built_in">t2</span>.id=<span class="hljs-built_in">t3</span>.id<span class="hljs-number">-1</span>)<span class="hljs-keyword">or </span>(<span class="hljs-built_in">t1</span>.id=<span class="hljs-built_in">t2</span>.id+<span class="hljs-number">1</span> <span class="hljs-keyword">and </span><span class="hljs-built_in">t2</span>.id=<span class="hljs-built_in">t3</span>.id<span class="hljs-number">-2</span>)<span class="hljs-keyword">or </span>(<span class="hljs-built_in">t1</span>.id=<span class="hljs-built_in">t2</span>.id+<span class="hljs-number">1</span> <span class="hljs-keyword">and </span><span class="hljs-built_in">t2</span>.id=<span class="hljs-built_in">t3</span>.id+<span class="hljs-number">1</span>))<span class="hljs-keyword">order </span><span class="hljs-keyword">by </span>id;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>626. 换座位</title>
    <link href="/2021/01/04/mysql626.%20%E6%8D%A2%E5%BA%A7%E4%BD%8D/"/>
    <url>/2021/01/04/mysql626.%20%E6%8D%A2%E5%BA%A7%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</p><p>其中纵列的 id 是连续递增的</p><p>小美想改变相邻俩学生的座位。</p><p>你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</p><p>示例：</p><p>+————-+————-+<br>|    id   | student |<br>+————-+————-+<br>|    1    | Abbot   |<br>|    2    | Doris   |<br>|    3    | Emerson |<br>|    4    | Green   |<br>|    5    | Jeames  |<br>+————-+————-+<br>假如数据输入的是上表，则输出结果如下：</p><p>+————-+————-+<br>|    id   | student |<br>+————-+————-+<br>|    1    | Doris   |<br>|    2    | Abbot   |<br>|    3    | Green   |<br>|    4    | Emerson |<br>|    5    | Jeames  |<br>+————-+————-+<br>注意：</p><p>如果学生人数是奇数，则不需要改变最后一个同学的座位。</p><p>我第一次发现mysql还能这样写判断，学习一个。<br><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">id</span>%<span class="hljs-number">2</span>=<span class="hljs-number">0</span>,            <span class="hljs-keyword">id</span><span class="hljs-number">-1</span>,            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">id</span>=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> seat),            <span class="hljs-keyword">id</span>,            <span class="hljs-keyword">id</span>+<span class="hljs-number">1</span>            ))<span class="hljs-keyword">as</span> <span class="hljs-keyword">id</span>,student         <span class="hljs-keyword">from</span> seat         <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">id</span>;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>886. 可能的二分法</title>
    <link href="/2020/12/24/886.%20%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <url>/2020/12/24/886.%20%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>染色，一个染色成-1，一个染色成1.，出现冲突就false,否则为true。</p><p>我之前只记录单向边，然后dfs中间也没判断，然后就有样例一直过不了，很奇怪。<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;    <span class="hljs-built_in">bool</span> ans = <span class="hljs-literal">true</span>;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">bool</span> possibleBipartition(<span class="hljs-built_in">int</span> N, vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; dislikes) &#123;        <span class="hljs-keyword">if</span>(dislikes.size() &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        vector&lt;<span class="hljs-built_in">int</span>&gt; color(N+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; link(N+<span class="hljs-number">1</span>);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">auto</span>&amp; d : dislikes)<span class="hljs-comment">//建图</span>        &#123;            link[d[<span class="hljs-number">0</span>]].push_back(d[<span class="hljs-number">1</span>]);            link[d[<span class="hljs-number">1</span>]].push_back(d[<span class="hljs-number">0</span>]);<span class="hljs-comment">//这里反向的也要选择不然容易出错</span>        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)        &#123;            <span class="hljs-keyword">if</span>(color[i] == <span class="hljs-number">0</span>&amp;&amp;link[i].size()!=<span class="hljs-number">0</span>)<span class="hljs-comment">//未着色的</span>            &#123;                color[i] = <span class="hljs-number">1</span>;<span class="hljs-comment">//着色为1</span>                dfs(link,i, <span class="hljs-number">1</span>, color);                <span class="hljs-keyword">if</span>(!ans)                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-built_in">void</span> dfs(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; link,<span class="hljs-built_in">int</span> id, <span class="hljs-built_in">int</span> col, vector&lt;<span class="hljs-built_in">int</span>&gt; &amp;color)    &#123;        <span class="hljs-keyword">if</span>(!ans) <span class="hljs-keyword">return</span>;        <span class="hljs-built_in">int</span> nextcol = -col;<span class="hljs-comment">//跟我相连的(不喜欢的人)颜色相反</span>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;link[id].size();i++)        &#123;            <span class="hljs-keyword">if</span>(color[link[id][i]] == col)<span class="hljs-comment">//颜色相同，出错</span>                ans = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">if</span>(color[link[id][i]] == <span class="hljs-number">0</span>)<span class="hljs-comment">//没有访问过的，继续着色</span>            &#123;                color[link[id][i]] = nextcol;                dfs(link,link[id][i], nextcol, color);            &#125;        &#125;    &#125;&#125;;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>图</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>127. 单词接龙</title>
    <link href="/2020/12/24/127.%20%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"/>
    <url>/2020/12/24/127.%20%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/</url>
    
    <content type="html"><![CDATA[<p>我一开始用的dfs，然后超时了，剪支了还是超时，写普通的广度优先搜索还是超时，<br>这个是双向的bfs.</p><p>具体地，可以创建虚拟节点。对于单词 hit，我们创建三个虚拟节点 <em>it、h</em>t、hi*，并让 hit 向这三个虚拟节点分别连一条边即可。如果一个单词能够转化为 hit，那么该单词必然会连接到这三个虚拟节点之一。对于每一个单词，我们枚举它连接到的虚拟节点，把该单词对应的 id 与这些虚拟节点对应的 id 相连即可。</p><p>最后我们将起点加入队列开始广度优先搜索，当搜索到终点时，我们就找到了最短路径的长度。注意因为添加了虚拟节点，所以我们得到的距离为实际最短路径长度的两倍。同时我们并未计算起点对答案的贡献，所以我们应当返回距离的一半再加一的结果。</p><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; wordId;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; link;    <span class="hljs-keyword">int</span> nodeNum = <span class="hljs-number">0</span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addword</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp; s)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(!wordId.count(s))        &#123;            wordId[s]=nodeNum++;            link.emplace_back();        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">geneword</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp; s)</span></span><span class="hljs-function">    </span>&#123;        addword(s);        <span class="hljs-keyword">int</span> n1=wordId[s];        <span class="hljs-keyword">int</span> len=s.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span>&amp; it : s)        &#123;            <span class="hljs-keyword">char</span> a=it;            it=<span class="hljs-string">&#x27;*&#x27;</span>;            addword(s);            <span class="hljs-keyword">int</span> n2=wordId[s];            it=a;            <span class="hljs-comment">// cout&lt;&lt;1;</span>            link[n1].push_back(n2);            link[n2].push_back(n1);            <span class="hljs-comment">// cout&lt;&lt;2;</span>        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ladderLength</span><span class="hljs-params">(<span class="hljs-built_in">string</span> beginWord, <span class="hljs-built_in">string</span> endWord, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; wordList)</span> </span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp; <span class="hljs-keyword">word</span> : wordList)        &#123;            geneword(<span class="hljs-keyword">word</span>);        &#125;        geneword(beginWord);        <span class="hljs-keyword">if</span>(!wordId.count(endWord))            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> endnum=wordId[endWord];        <span class="hljs-keyword">int</span> beginnum=wordId[beginWord];        <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; qbegin;        <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; qend;        qbegin.push(beginnum);        qend.push(endnum);        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">disbegin</span><span class="hljs-params">(nodeNum+<span class="hljs-number">2</span>,INT_MAX)</span></span>;        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">disend</span><span class="hljs-params">(nodeNum+<span class="hljs-number">2</span>,INT_MAX)</span></span>;        disbegin[beginnum]=<span class="hljs-number">0</span>;        disend[endnum]=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(!qbegin.empty()&amp;&amp;!qend.empty())        &#123;            <span class="hljs-keyword">int</span> beginlen=qbegin.<span class="hljs-built_in">size</span>();            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;beginlen;i++)            &#123;                <span class="hljs-keyword">int</span> w=qbegin.front();                qbegin.pop();                <span class="hljs-keyword">if</span>(disend[w]!=INT_MAX)                    <span class="hljs-keyword">return</span> (disend[w]+disend[w])/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;link[w].<span class="hljs-built_in">size</span>();j++)                &#123;                    <span class="hljs-keyword">if</span>(disbegin[link[w][j]]==INT_MAX)                    &#123;                        qbegin.push(link[w][j]);                        disbegin[link[w][j]]=disbegin[w]+<span class="hljs-number">1</span>;                    &#125;                &#125;            &#125;            <span class="hljs-keyword">int</span> endlen=qend.<span class="hljs-built_in">size</span>();            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;endlen;i++)            &#123;                <span class="hljs-keyword">int</span> w=qend.front();                qend.pop();                <span class="hljs-keyword">if</span>(disbegin[w]!=INT_MAX)                &#123;                    <span class="hljs-keyword">return</span> (disend[w]+disend[w])/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;                &#125;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;link[w].<span class="hljs-built_in">size</span>();j++)                &#123;                    <span class="hljs-keyword">if</span>(disend[link[w][j]]==INT_MAX)                    &#123;                        qend.push(link[w][j]);                        disend[link[w][j]]=disend[w]+<span class="hljs-number">1</span>;                    &#125;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>图</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1293. 网格中的最短路径</title>
    <link href="/2020/11/02/1293.%20%E7%BD%91%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <url>/2020/11/02/1293.%20%E7%BD%91%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p>状态空间搜索解题模板<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    struct State    &#123;        <span class="hljs-built_in">int</span> x,y;        <span class="hljs-built_in">int</span> r;        State(<span class="hljs-built_in">int</span> x1,<span class="hljs-built_in">int</span> y1,<span class="hljs-built_in">int</span> r1)        &#123;            x=x1;            y=y1;            r=r1;        &#125;    &#125;;    <span class="hljs-built_in">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;    <span class="hljs-built_in">int</span> dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;    <span class="hljs-built_in">int</span> shortestPath(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; g, <span class="hljs-built_in">int</span> k)     &#123;        <span class="hljs-built_in">int</span> m=g.size();        <span class="hljs-built_in">int</span> n=g[<span class="hljs-number">0</span>].size();        <span class="hljs-keyword">if</span>(k&gt;=m+n<span class="hljs-number">-3</span>)            <span class="hljs-keyword">return</span> m+n<span class="hljs-number">-2</span>;        vector&lt;vector&lt;vector&lt;<span class="hljs-built_in">bool</span>&gt;&gt;&gt; visited(m, vector&lt;vector&lt;<span class="hljs-built_in">bool</span>&gt;&gt;(n, vector&lt;<span class="hljs-built_in">bool</span>&gt;(k + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)));        queue&lt;State&gt; Q;        Q.emplace(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, k);        <span class="hljs-built_in">int</span> step = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(!Q.empty()) &#123;            <span class="hljs-built_in">int</span> s = Q.size();            <span class="hljs-keyword">while</span>(s--) &#123;                <span class="hljs-built_in">auto</span> p = Q.front();                Q.pop();                <span class="hljs-built_in">int</span> x = p.x, y = p.y;                <span class="hljs-built_in">int</span> r = p.r;                <span class="hljs-keyword">if</span>(x == m - <span class="hljs-number">1</span> &amp;&amp; y == n - <span class="hljs-number">1</span> &amp;&amp; r &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> step;                <span class="hljs-keyword">if</span>(visited[x][y][r] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;                visited[x][y][r] = <span class="hljs-number">1</span>;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)                 &#123;                    <span class="hljs-keyword">if</span>(x + dx[k] &gt;= <span class="hljs-number">0</span> &amp;&amp; x + dx[k] &lt; m &amp;&amp; y + dy[k] &gt;= <span class="hljs-number">0</span> &amp;&amp; y + dy[k] &lt; n)                     &#123;                        <span class="hljs-keyword">if</span>(g[x + dx[k]][y + dy[k]] == <span class="hljs-number">1</span> &amp;&amp; r &gt;= <span class="hljs-number">1</span>)                             Q.emplace(x + dx[k], y + dy[k], r - <span class="hljs-number">1</span>);                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[x + dx[k]][y + dy[k]] == <span class="hljs-number">0</span>)                            Q.emplace(x + dx[k], y + dy[k], r);                    &#125;                &#125;            &#125;            step++;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;&#125;;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>记忆化搜索</tag>
      
      <tag>解题模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>901. 股票价格跨度</title>
    <link href="/2020/11/02/901.%20%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/"/>
    <url>/2020/11/02/901.%20%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>答案的题解用的是单调栈<br>我用的不是，但是总体来说也是dp的方法，速度好像还快一点的，击败了99.8%。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">StockSpanner</span> &#123;<span class="hljs-keyword">public</span>:        vector&lt;<span class="hljs-built_in">int</span>&gt; num;        vector&lt;<span class="hljs-built_in">int</span>&gt; res;    StockSpanner()     &#123;        num.clear();        res.clear();        num.push_back(<span class="hljs-number">-1</span>);        res.push_back(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-built_in">int</span> next(<span class="hljs-built_in">int</span> price)     &#123;         <span class="hljs-built_in">int</span> len=num.size();        <span class="hljs-built_in">int</span> top=num[len<span class="hljs-number">-1</span>];        <span class="hljs-keyword">if</span>(top&lt;=price)        &#123;            <span class="hljs-built_in">int</span> tmp=<span class="hljs-number">0</span>;<span class="hljs-comment">//最后的结果</span>            <span class="hljs-built_in">int</span> p=len<span class="hljs-number">-1</span>;<span class="hljs-comment">//最后的位置</span>            <span class="hljs-keyword">while</span>(top&lt;=price&amp;&amp;p!=<span class="hljs-number">0</span>)            &#123;                tmp+=res[p];                p=p-res[p];                top=num[p];            &#125;            num.push_back(price);            res.push_back(tmp+<span class="hljs-number">1</span>);            <span class="hljs-keyword">return</span> tmp+<span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">else</span>        &#123;            num.push_back(price);            res.push_back(<span class="hljs-number">1</span>);            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>记忆化搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>576. 出界的路径数</title>
    <link href="/2020/11/02/576.%20%E5%87%BA%E7%95%8C%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0/"/>
    <url>/2020/11/02/576.%20%E5%87%BA%E7%95%8C%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs maxima">class Solution &#123;public:    long res[<span class="hljs-number">55</span>][<span class="hljs-number">55</span>][<span class="hljs-number">55</span>];    int findPaths(int m, int n, int N, int i, int j)     &#123;        res[<span class="hljs-number">0</span>][i][j]=<span class="hljs-number">1</span>;        int <span class="hljs-built_in">mod</span> = <span class="hljs-number">1000000007</span>;        <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">num</span>=<span class="hljs-number">1</span>;<span class="hljs-built_in">num</span>&lt;N;<span class="hljs-built_in">num</span>++)        &#123;            <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">row</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">row</span>&lt;m;<span class="hljs-built_in">row</span>++)            &#123;                <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">col</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">col</span>&lt;n;<span class="hljs-built_in">col</span>++)                &#123;                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">row</span>-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>)                        res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>]=(res[<span class="hljs-built_in">num</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">row</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>]+res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>])<span class="hljs-symbol">%</span>(<span class="hljs-built_in">mod</span>);                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">row</span>+<span class="hljs-number">1</span>&lt;m)                        res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>]=(res[<span class="hljs-built_in">num</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">row</span>+<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>]+res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>])<span class="hljs-symbol">%</span>(<span class="hljs-built_in">mod</span>);                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">col</span>-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>)                        res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>]=(res[<span class="hljs-built_in">num</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>-<span class="hljs-number">1</span>]+res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>])<span class="hljs-symbol">%</span>(<span class="hljs-built_in">mod</span>);                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">col</span>+<span class="hljs-number">1</span>&lt;n)                        res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>]=(res[<span class="hljs-built_in">num</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>+<span class="hljs-number">1</span>]+res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>])<span class="hljs-symbol">%</span>(<span class="hljs-built_in">mod</span>);                &#125;            &#125;        &#125;        long result=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">num</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">num</span>&lt;N;<span class="hljs-built_in">num</span>++)        &#123;            <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">row</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">row</span>&lt;m;<span class="hljs-built_in">row</span>++)            &#123;                result+=res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][<span class="hljs-number">0</span>];                result%=<span class="hljs-built_in">mod</span>;                result+=res[<span class="hljs-built_in">num</span>][<span class="hljs-built_in">row</span>][n-<span class="hljs-number">1</span>];                result%=<span class="hljs-built_in">mod</span>;            &#125;            <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">col</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">col</span>&lt;n;<span class="hljs-built_in">col</span>++)            &#123;                result+=res[<span class="hljs-built_in">num</span>][<span class="hljs-number">0</span>][<span class="hljs-built_in">col</span>];                result%=<span class="hljs-built_in">mod</span>;                result+=res[<span class="hljs-built_in">num</span>][m-<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>];                result%=<span class="hljs-built_in">mod</span>;            &#125;            // cout&lt;&lt;result&lt;&lt;endl;        &#125;        <span class="hljs-built_in">return</span> int(result);    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>记忆化搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 794. Valid Tic-Tac-Toe State (medium)</title>
    <link href="/2020/11/02/LeetCode%20794.%20%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
    <url>/2020/11/02/LeetCode%20794.%20%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>因为X先下，所以如果X和O的数目关系要么相等，要么X比O多1，只有这两种关系，其次再判断如果X已经赢了，O没法下，此时O的数目只能比X小1，或者O赢了，X的数目只能和O一样。<br><pre><code class="hljs angelscript"><span class="hljs-built_in">bool</span> check(vector&lt;<span class="hljs-built_in">string</span>&gt;&amp; board,char key)&#123;    <span class="hljs-keyword">if</span>(board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==board[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&amp;&amp;board[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]==board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]&amp;&amp;board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]==key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span>(board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]==board[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]&amp;&amp;board[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]==board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]&amp;&amp;board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]==key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span>(board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==board[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&amp;&amp;board[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]==board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]&amp;&amp;board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]==key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span>(board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]==board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]&amp;&amp;board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]==board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]&amp;&amp;board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]==key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span>(board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&amp;&amp;board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]==board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]&amp;&amp;board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]==key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span>(board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]==board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&amp;&amp;board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]==board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]&amp;&amp;board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]==key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-built_in">bool</span> validTicTacToe(vector&lt;<span class="hljs-built_in">string</span>&gt;&amp; board) &#123;    <span class="hljs-built_in">int</span> ansX=<span class="hljs-number">0</span>,ansO=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)        &#123;            <span class="hljs-keyword">if</span>(board[i][j]==<span class="hljs-string">&#x27;X&#x27;</span>)            ansX++;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(board[i][j]==<span class="hljs-string">&#x27;O&#x27;</span>)            ansO++;        &#125;    &#125;    <span class="hljs-keyword">if</span>(ansX&lt;ansO)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span>(ansX-ansO&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span>(check(board,<span class="hljs-string">&#x27;X&#x27;</span>)&amp;&amp;ansX==ansO)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span>(check(board,<span class="hljs-string">&#x27;O&#x27;</span>)&amp;&amp;ansX!=ansO)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>博弈dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1349. 参加考试的最大学生数</title>
    <link href="/2020/11/02/1349.%20%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0/"/>
    <url>/2020/11/02/1349.%20%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>方法就是每次求前n排的人数和前n-1排的人数的关系，重点在于相邻两排斜着的人是否都有，一排是否有相邻的，是否坐在坏的座位上。<br>一一排除。遍历，所有的状态，一排最多2^8个状态。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> maxStudents(vector&lt;vector&lt;char&gt;&gt;&amp; seats)     &#123;        <span class="hljs-built_in">int</span> m=seats.size();        <span class="hljs-built_in">int</span> n=seats[<span class="hljs-number">0</span>].size();        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; dp(m+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-number">1</span>&lt;&lt;n));         <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;n);j++)            &#123;                bitset&lt;<span class="hljs-number">8</span>&gt; bs(j);                <span class="hljs-built_in">bool</span> state=<span class="hljs-literal">true</span>;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)                &#123;                    <span class="hljs-keyword">if</span>((seats[i<span class="hljs-number">-1</span>][k]==<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;bs[k])||(k&lt;n<span class="hljs-number">-1</span>&amp;&amp;bs[k]&amp;&amp;bs[k+<span class="hljs-number">1</span>]))                    &#123;                        state=<span class="hljs-literal">false</span>;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;                <span class="hljs-keyword">if</span>(state==<span class="hljs-literal">false</span>)                &#123;                    dp[i][j]=<span class="hljs-number">-1</span>;                    <span class="hljs-keyword">continue</span>;                &#125;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>;k&lt;(<span class="hljs-number">1</span>&lt;&lt;n);k++)                &#123;                    <span class="hljs-keyword">if</span>(dp[i<span class="hljs-number">-1</span>][k]==<span class="hljs-number">-1</span>)                    &#123;                        <span class="hljs-keyword">continue</span>;                    &#125;                    bitset&lt;<span class="hljs-number">8</span>&gt; lastbs(k);                    <span class="hljs-built_in">bool</span> state1=<span class="hljs-literal">true</span>;                    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> r=<span class="hljs-number">0</span>;r&lt;n;r++)                    &#123;                        <span class="hljs-keyword">if</span>(lastbs[r]&amp;&amp;(r&gt;<span class="hljs-number">0</span>&amp;&amp;bs[r<span class="hljs-number">-1</span>]||r&lt;n<span class="hljs-number">-1</span>&amp;&amp;bs[r+<span class="hljs-number">1</span>]))                        &#123;                            state1=<span class="hljs-literal">false</span>;                            <span class="hljs-keyword">break</span>;                        &#125;                    &#125;                    <span class="hljs-keyword">if</span>(state1==<span class="hljs-literal">true</span>)                    &#123;                        dp[i][j]=max(dp[i][j],dp[i<span class="hljs-number">-1</span>][k]+<span class="hljs-built_in">int</span>(bs.count()));                    &#125;                &#125;            &#125;        &#125;        <span class="hljs-built_in">int</span> result=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)        &#123;            result=max(result,dp[m][i]);        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>状态压缩dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1125. 最小的必要团队</title>
    <link href="/2020/11/02/1125.%20%E6%9C%80%E5%B0%8F%E7%9A%84%E5%BF%85%E8%A6%81%E5%9B%A2%E9%98%9F/"/>
    <url>/2020/11/02/1125.%20%E6%9C%80%E5%B0%8F%E7%9A%84%E5%BF%85%E8%A6%81%E5%9B%A2%E9%98%9F/</url>
    
    <content type="html"><![CDATA[<p>这个题一开始不会做，做出来一直超时，看的别人的思路<br>先把某些技能树是别人子集的人去掉，<br>然后做dp。<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    vector&lt;<span class="hljs-built_in">int</span>&gt; smallestSufficientTeam(vector&lt;<span class="hljs-built_in">string</span>&gt;&amp; req_skills, vector&lt;vector&lt;<span class="hljs-built_in">string</span>&gt;&gt;&amp; people) &#123;        <span class="hljs-built_in">int</span> bitmap=<span class="hljs-number">0</span>;<span class="hljs-comment">//代表技能，比如111这种</span>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;req_skills.size();i++)        &#123;            bitmap=bitmap|(<span class="hljs-number">1</span>&lt;&lt;i);        &#125;        vector&lt;pair&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt;&gt; peo2map;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;people.size();i++)        &#123;            <span class="hljs-built_in">int</span> tmp=<span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;people[i].size();j++)            &#123;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>;k&lt;req_skills.size();k++)                &#123;                    <span class="hljs-keyword">if</span>(people[i][j]==req_skills[k])                    &#123;                        tmp=tmp|(<span class="hljs-number">1</span>&lt;&lt;k);                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;            &#125;            peo2map.push_back(&#123;i,tmp&#125;);        &#125;        vector&lt;<span class="hljs-built_in">bool</span>&gt; issame(peo2map.size(),<span class="hljs-number">0</span>);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;issame.size();i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i+<span class="hljs-number">1</span>;j&lt;issame.size();j++)            &#123;                <span class="hljs-keyword">if</span>((peo2map[i].second|peo2map[j].second)==peo2map[i].second)                &#123;                    issame[j]=<span class="hljs-number">1</span>;                &#125;                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((peo2map[i].second|peo2map[j].second)==peo2map[j].second)                &#123;                    issame[i]=<span class="hljs-number">1</span>;                &#125;            &#125;        &#125;        decltype(peo2map) peo2map1;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;peo2map.size();i++)        &#123;            <span class="hljs-keyword">if</span>(issame[i]==<span class="hljs-number">0</span>)            &#123;                peo2map1.push_back(peo2map[i]);            &#125;        &#125;        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;res(bitmap+<span class="hljs-number">1</span>);<span class="hljs-comment">//每一个数组代表一组技能</span>        vector&lt;<span class="hljs-built_in">int</span>&gt;skill(bitmap+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<span class="hljs-comment">//记录每种技能组合对应的人数，最低位表示没有技能</span>        skill[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//位图为00000..的技能被获得，某个技能树需要的人数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;peo2map1.size();i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;=bitmap;j++)            &#123;                <span class="hljs-keyword">if</span>(skill[j]==<span class="hljs-number">-1</span>)                    <span class="hljs-keyword">continue</span>;                <span class="hljs-built_in">int</span> newskill=(peo2map1[i].second)|j;                <span class="hljs-keyword">if</span>(skill[newskill]==<span class="hljs-number">-1</span>||skill[newskill]&gt;skill[j]+<span class="hljs-number">1</span>)                &#123;                    skill[newskill]=skill[j]+<span class="hljs-number">1</span>;<span class="hljs-comment">//从j那边技能树走人数会更少</span>                    res[newskill]=res[j];                    res[newskill].push_back(peo2map1[i].first);                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> res[bitmap];    &#125;&#125;;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>状态压缩dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库的三级模式：外模式、模式和内模式</title>
    <link href="/2020/10/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%A4%96%E6%A8%A1%E5%BC%8F%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%86%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/10/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%A4%96%E6%A8%A1%E5%BC%8F%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%86%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>一、模式（Schema）</p><p>定义：也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p><p>理解： ① 一个数据库只有一个模式； ② 是数据库数据在逻辑级上的视图； ③ 数据库模式以某一种数据模型为基础； ④ 定义模式时不仅要定义数据的逻辑结构（如数据记录由哪些数据项构成，数据项的名字、类型、取值范围等），而且要定义与数据有关的安全性、完整性要求，定义这些数据之间的联系。</p><p>二、外模式（External Schema）</p><p>定义：也称子模式（Subschema）或用户模式，是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p><p>理解： ① 一个数据库可以有多个外模式； ② 外模式就是用户视图； ③ 外模式是保证数据安全性的一个有力措施。</p><p>三、内模式（Internal Schema）</p><p>定义：也称存储模式（Storage Schema），它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式（例如，记录的存储方式是顺序存储、按照B树结构存储还是按hash方法存储；索引按照什么方式组织；数据是否压缩存储，是否加密；数据的存储记录结构有何规定）。</p><p>理解： ① 一个数据库只有一个内模式； ② 一个表可能由多个文件组成，如：数据文件、索引文件。 它是数据库管理系统(DBMS)对数据库中数据进行有效组织和管理的方法 其目的有： ① 为了减少数据冗余，实现数据共享； ② 为了提高存取效率，改善性能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - ON &amp; WHERE 条件区别和执行顺序</title>
    <link href="/2020/10/13/MySQL%20-%20ON%20&amp;%20WHERE%20%E6%9D%A1%E4%BB%B6%E5%8C%BA%E5%88%AB%E5%92%8C%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/2020/10/13/MySQL%20-%20ON%20&amp;%20WHERE%20%E6%9D%A1%E4%BB%B6%E5%8C%BA%E5%88%AB%E5%92%8C%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL-ON-amp-WHERE-条件区别和执行顺序"><a href="#MySQL-ON-amp-WHERE-条件区别和执行顺序" class="headerlink" title="MySQL - ON &amp; WHERE 条件区别和执行顺序"></a><a href="https://blog.csdn.net/Dream_Weave/article/details/83542138?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">MySQL - ON &amp; WHERE 条件区别和执行顺序</a></h2><p>on是在生成临时表的时候使用的条件，不管on的条件是否起到作用，都会返回左表 (table_name1) 的行。<br>where则是在生成临时表之后使用的条件，此时已经不管是否使用了left join了，只要条件不为真的行，全部过滤掉。</p><h2 id="内连接，外连接，笛卡尔积连接"><a href="#内连接，外连接，笛卡尔积连接" class="headerlink" title="内连接，外连接，笛卡尔积连接"></a><a href="https://blog.csdn.net/qq_32763643/article/details/79187931">内连接，外连接，笛卡尔积连接</a></h2><h2 id="自然连接和等值连接"><a href="#自然连接和等值连接" class="headerlink" title="自然连接和等值连接"></a>自然连接和等值连接</h2><p>1、自然连接(Naturaljoin)是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的属性列去掉。而等值连接并不去掉重复的属性列。</p><p>2、自然连接：在连接条件中使用等于(=)运算符比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的重复列。</p><p>3、自然连接与等值连接</p><p>在连接运算当中，一种最常用的连接是自然连接。</p><p>所谓自然连接就是在等值连接的情况下，当连接属性X与Y具有相同属性组时，把在连接结果中重复的属性列去掉。</p><p>自然连接是在广义笛卡尔积R×S中选出同名属性上符合相等条件元组，再进行投影，去掉重复的同名属性，组成新的关系。</p><p>4、等值连接与自然连接的区别：</p><p>1）等值连接中不要求相等属性值的属性名相同，而自然连接要求相等属性值的属性名必须相同，即两关系只有在同名属性才能进行自然连接。</p><p>2）等值连接不将重复属性去掉，而自然连接去掉重复属性，也可以说，自然连接是去掉重复列的等值连接。</p><p>5、事实上，我们一般使用的都是自然连接。</p><p>select FirstName, LastName, City, State from Person left join Address on Person.PersonId  =Address.PersonId;</p><p>很纠结的一点是为啥这个on不能是where，然后才发现其实因为是因为在address没有的情况下Address.PersonId;这个本身就是不对的，on因为是就算为空也会生成，所以是对的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>486. 预测赢家</title>
    <link href="/2020/10/07/486.%20%E9%A2%84%E6%B5%8B%E8%B5%A2%E5%AE%B6/"/>
    <url>/2020/10/07/486.%20%E9%A2%84%E6%B5%8B%E8%B5%A2%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[<p>我考虑的是在i，j区间中获胜的人的分数，题解考虑的是分数差值，更好一点。<br><pre><code class="hljs angelscript"><span class="hljs-built_in">bool</span> PredictTheWinner(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums) &#123;    <span class="hljs-built_in">int</span> len=nums.size();    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; sum(len,vector&lt;<span class="hljs-built_in">int</span>&gt;(len,<span class="hljs-number">0</span>));    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; res(len,vector&lt;<span class="hljs-built_in">int</span>&gt;(len,<span class="hljs-number">0</span>));    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)    &#123;        sum[i][i]=nums[i];        res[i][i]=nums[i];    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">2</span>;i&lt;=len;i++)<span class="hljs-comment">//长度</span>    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;i+j<span class="hljs-number">-1</span>&lt;len;j++)<span class="hljs-comment">//左边起始位置</span>        &#123;            sum[j][i+j<span class="hljs-number">-1</span>]=sum[j+<span class="hljs-number">1</span>][i+j<span class="hljs-number">-1</span>]+nums[j];        &#125;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">2</span>;i&lt;=len;i++)<span class="hljs-comment">//长度</span>    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;i+j<span class="hljs-number">-1</span>&lt;len;j++)<span class="hljs-comment">//左边起始位置</span>        &#123;            res[j][i+j<span class="hljs-number">-1</span>]=max(sum[j+<span class="hljs-number">1</span>][i+j<span class="hljs-number">-1</span>]-res[j+<span class="hljs-number">1</span>][i+j<span class="hljs-number">-1</span>]+nums[j],sum[j][i+j<span class="hljs-number">-2</span>]-res[j][i+j<span class="hljs-number">-2</span>]+nums[i+j<span class="hljs-number">-1</span>]);        &#125;    &#125;    <span class="hljs-keyword">if</span>(res[<span class="hljs-number">0</span>][len<span class="hljs-number">-1</span>]&gt;=(sum[<span class="hljs-number">0</span>][len<span class="hljs-number">-1</span>]/<span class="hljs-number">2.0</span>))        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>博弈dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>837. 新21点</title>
    <link href="/2020/10/06/837.%20%E6%96%B021%E7%82%B9/"/>
    <url>/2020/10/06/837.%20%E6%96%B021%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>我们以 N = 21，K = 17，W = 10 来思考。<br>因为我们的结果是求手上点数为 0 时，赢得游戏的概率。</p><p>所以我们需要从后往前逆向求，比如在这里，我们就需要知道在手上点数为 16 时赢得游戏的概率，从而在往前求手上点数为 15 时的概率，最后求出手上点数为 0 时的赢得游戏的概率。</p><p>那我们怎么求点数为 16 时赢得游戏的概率呢？</p><p>这里我们知道手上点数为 17 时赢得游戏的概率为 100%，所以 K ~ N 区间的赢得游戏的概率为 100%，超过 N 时赢得游戏概率为 0，那么手上点数为 16 时，赢得游戏的概率就是 手上点数为 17 ~ 17 + 10 - 1 的赢得游戏的概率和除以 W，即用一个表达式为 win[16] = sum(win[17] ~ win[26]) / W。</p><p>这里我们可以以 O(1) 的时间复杂度计算 sum(win[i + 1] ~ win[i + W - 1])。<br>我们用一个sumProb = sum(win[17] ~ win[26])<br>然后每次计算<br>win[i] = sumProb / W<br>sumProb = sumProb + win[i] - win[i + W]</p><p>这个题目如果用简单的dp会超时，需要从后向前dp，进行优化，考虑差分。<br><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> new21Game(<span class="hljs-built_in">int</span> N, <span class="hljs-built_in">int</span> K, <span class="hljs-built_in">int</span> W) &#123;    vector&lt;<span class="hljs-built_in">double</span>&gt; res(K+W+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);    res[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=K;i&lt;=N;i++)    &#123;        res[i]=<span class="hljs-number">1</span>;    &#125;    <span class="hljs-built_in">double</span> tmp=N-K+<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=K<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)    &#123;        res[i]=tmp/W;        tmp=tmp-res[i + W] + res[i];    &#125;    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>];&#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>概率dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>808. 分汤</title>
    <link href="/2020/10/06/808.%20%E5%88%86%E6%B1%A4/"/>
    <url>/2020/10/06/808.%20%E5%88%86%E6%B1%A4/</url>
    
    <content type="html"><![CDATA[<p>即使将 N 除以 25 之后，仍然没法在短时间内得到答案，因此我们需要尝试一些别的思路。可以发现，分配操作有 (4, 0)，(3, 1)，(2, 2) 和 (1, 3) 四种，那么在一次分配中，汤 A 平均会少 (4 + 3 + 2 + 1) / 4 = 2.5 份，汤 B 平均会少 (0 + 1 + 2 + 3) / 4 = 1.5 份。因此在 N 非常大的时候，A 会有很大的概率比 B 先分配完，所有概率应该非常接近 1。事实上，当 N &gt;= 500 <em> 25 时，所求概率已经大于 0.999999 了（可以通过上面的动态规划方法求出），它和 1 的误差（无论是绝对误差还是相对误差）都小于 10^-6。因此在 N &gt;= 500 </em> 25 时，我们只需要输出 1 作为答案即可。在其它的情况下，我们使用动态规划计算出答案。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> soupServings(<span class="hljs-built_in">int</span> N) &#123;    N=N/<span class="hljs-number">25</span>+(N%<span class="hljs-number">25</span>&gt;<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(N&gt;=<span class="hljs-number">500</span>*<span class="hljs-number">25</span>)        <span class="hljs-keyword">return</span> <span class="hljs-built_in">double</span>(<span class="hljs-number">1</span>);    vector&lt;vector&lt;<span class="hljs-built_in">double</span>&gt; &gt; res(N+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-built_in">double</span>&gt;(N+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)    &#123;        res[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1.0</span>;    &#125;    res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0.5</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=N;j++)        &#123;            <span class="hljs-built_in">double</span> tmp=res[(i<span class="hljs-number">-4</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(i<span class="hljs-number">-4</span>)][j]+res[(i<span class="hljs-number">-3</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(i<span class="hljs-number">-3</span>)][(j<span class="hljs-number">-1</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(j<span class="hljs-number">-1</span>)];            <span class="hljs-built_in">double</span> tmp1=res[(i<span class="hljs-number">-2</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(i<span class="hljs-number">-2</span>)][(j<span class="hljs-number">-2</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(j<span class="hljs-number">-2</span>)]+res[(i<span class="hljs-number">-1</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(i<span class="hljs-number">-1</span>)][(j<span class="hljs-number">-3</span>)&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:(j<span class="hljs-number">-3</span>)];            res[i][j]=<span class="hljs-number">0.25</span>*(tmp+tmp1);        &#125;    &#125;    <span class="hljs-keyword">return</span> res[N][N];&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>概率dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>auto和decltype之间的区别</title>
    <link href="/2020/08/13/auto%E5%92%8Cdecltype%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/08/13/auto%E5%92%8Cdecltype%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="auto与decltype区别："><a href="#auto与decltype区别：" class="headerlink" title="auto与decltype区别："></a>auto与decltype区别：</h1><h3 id="1-auto类型说明符用编译器计算变量的初始值来推算其类型，decltype虽然也让编译器分析表达式得到它的类型，但是并不计算表达式的值。"><a href="#1-auto类型说明符用编译器计算变量的初始值来推算其类型，decltype虽然也让编译器分析表达式得到它的类型，但是并不计算表达式的值。" class="headerlink" title="1 auto类型说明符用编译器计算变量的初始值来推算其类型，decltype虽然也让编译器分析表达式得到它的类型，但是并不计算表达式的值。"></a>1 auto类型说明符用编译器计算变量的初始值来推算其类型，decltype虽然也让编译器分析表达式得到它的类型，但是并不计算表达式的值。</h3><h3 id="2-编译器推算出来的auto类型有时候和初始值的类型并不完全一样，编译器会适当改变结果类型使其更符合初始化规则。比如，auto一般会忽略顶层const，而把底层const保留下来。decltype会把顶层const保留下来。"><a href="#2-编译器推算出来的auto类型有时候和初始值的类型并不完全一样，编译器会适当改变结果类型使其更符合初始化规则。比如，auto一般会忽略顶层const，而把底层const保留下来。decltype会把顶层const保留下来。" class="headerlink" title="2 编译器推算出来的auto类型有时候和初始值的类型并不完全一样，编译器会适当改变结果类型使其更符合初始化规则。比如，auto一般会忽略顶层const，而把底层const保留下来。decltype会把顶层const保留下来。"></a>2 编译器推算出来的auto类型有时候和初始值的类型并不完全一样，编译器会适当改变结果类型使其更符合初始化规则。比如，auto一般会忽略顶层const，而把底层const保留下来。decltype会把顶层const保留下来。</h3><h3 id="3-decltype使用一个不加括号的变量，得到的结果就是该变量的类型，如果加上一层或多层括号，则编译器将腿短得到引用类型。"><a href="#3-decltype使用一个不加括号的变量，得到的结果就是该变量的类型，如果加上一层或多层括号，则编译器将腿短得到引用类型。" class="headerlink" title="3 decltype使用一个不加括号的变量，得到的结果就是该变量的类型，如果加上一层或多层括号，则编译器将腿短得到引用类型。"></a>3 decltype使用一个不加括号的变量，得到的结果就是该变量的类型，如果加上一层或多层括号，则编译器将腿短得到引用类型。</h3><p><a href="https://blog.csdn.net/qq_14982047/article/details/50615422">关于详细的顶层const和底层const可以参考</a></p><p><a href="https://blog.csdn.net/qq_14982047/article/details/50628075">详细的例子参考</a></p><p><a href="https://my.oschina.net/u/3863980/blog/1843956">关于decltype和函数指针迷惑,函数指针参考</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉东变换</title>
    <link href="/2020/08/04/test/"/>
    <url>/2020/08/04/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>图像处理</tag>
      
      <tag>医学图像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉东变换</title>
    <link href="/2020/08/03/%E6%8B%89%E4%B8%9C%E5%8F%98%E6%8D%A2/"/>
    <url>/2020/08/03/%E6%8B%89%E4%B8%9C%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>x射线在穿过人体传播的时候，它的衰减是这样的</p><p>$I=I_0 e^{-ux}$</p><p><img src="/images/拉东变换1.png" alt="衰减系数原理"></p><p><img src="/images/拉东变换2.png" alt="直线方程"></p><p><img src="/images/拉东变换5.png" alt="拉东公式"></p><p><img src="/images/拉东变换3.png" alt="傅里叶卷积定理"></p><p><img src="/images/拉东变换4.png" alt="拉东逆变换"></p>]]></content>
    
    
    
    <tags>
      
      <tag>图像处理</tag>
      
      <tag>医学图像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>医学图像相关内容</title>
    <link href="/2020/07/29/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"/>
    <url>/2020/07/29/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="ASTRA-Toolbox"><a href="#ASTRA-Toolbox" class="headerlink" title="ASTRA Toolbox"></a>ASTRA Toolbox</h1><p>一个python的库，包含很多的医学图像的算法，比如fbp，sart，生成投影数据等问题。</p><p>还可以进行gpu加速，可以学习学习。</p>]]></content>
    
    
    
    <tags>
      
      <tag>医学图像</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memset赋值问题</title>
    <link href="/2020/07/29/memset%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <url>/2020/07/29/memset%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在memset的赋值问题中，是按字节赋值的，如果是menset(array,1,n*sizeof(int));<br>结果不是每个int变成1，而是变成很大的数，它是将int的每一个字节赋值为1，因此最好只在赋值为0的时候使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状压dp</title>
    <link href="/2020/07/29/%E7%8A%B6%E5%8E%8Bdp/"/>
    <url>/2020/07/29/%E7%8A%B6%E5%8E%8Bdp/</url>
    
    <content type="html"><![CDATA[<h1 id="状压dp"><a href="#状压dp" class="headerlink" title="状压dp"></a>状压dp</h1><p>状态压缩动态规划，就是我们俗称的状压DP，是利用计算机二进制的性质来描述状态的一种DP方式。</p><p>很多棋盘问题都运用到了状压，同时，状压也很经常和BFS及DP连用。</p><p>状压dp其实就是将状态压缩成2进制来保存 其特征就是看起来有点像搜索，每个格子的状态只有1或0 ，是另一类非常典型的动态规划</p><p>举个例子：有一个大小为n*n的农田，我们可以在任意处种田，现在来描述一下某一行的某种状态：</p><p>设n = 9；</p><p>有二进制数 100011011（九位），每一位表示该农田是否被占用，1表示用了，0表示没用，这样一种状态就被我们表示出来了。这表示的是一中状态，表示的是在这个状态下每个东西的情况。如果要用数组来表示，必须用很多空间表示这一个状态的集合。而在现实因为每个东西状态只有01 所以我们用一个数来表示这种集合状态。</p><h1 id="leetcode-464-我能赢吗"><a href="#leetcode-464-我能赢吗" class="headerlink" title="leetcode 464. 我能赢吗"></a>leetcode 464. 我能赢吗</h1><p>采用状压dp来压缩状态。<br>对于每次回溯来说，如果本次(第一个人)选择数字i达到了desiredTotal，说明当前状态下能赢，即返回true，又或者下一次(另一个人)输了，那么说明本次选择必赢。</p><p>用dp数组索引表示所选整数的累加和减1，而这个累加和又能体现整数元素选取的情况。dp数组的索引对应整数累加和状态，该整数累加和状态对应组合状态；dp数组元素的值表示整数组合状态对应的结果，为true表示该组合状态已存在并且能赢，直接返回；为false表示该组合状态已存在并且输了，直接返回；为空表示还没出现这种整数组合状态，是一个新状态，需要进行递归计算。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">bool</span> canIWin(<span class="hljs-built_in">int</span> maxChoosableInteger, <span class="hljs-built_in">int</span> desiredTotal) &#123;        <span class="hljs-keyword">if</span>(maxChoosableInteger&gt;=desiredTotal)            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">if</span>((maxChoosableInteger+<span class="hljs-number">1</span>)*maxChoosableInteger/<span class="hljs-number">2</span>&lt;desiredTotal)            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-built_in">int</span> *dp=new <span class="hljs-built_in">int</span>[<span class="hljs-number">1</span>&lt;&lt;(maxChoosableInteger)];<span class="hljs-comment">//减法优先级更高</span>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;(maxChoosableInteger);i++)            dp[i]=<span class="hljs-number">-1</span>;        <span class="hljs-built_in">bool</span> res= dfs(maxChoosableInteger,desiredTotal,dp,<span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> res;    &#125;    <span class="hljs-built_in">bool</span> dfs(<span class="hljs-built_in">int</span> maxChoosableInteger,<span class="hljs-built_in">int</span> desiredTotal,<span class="hljs-built_in">int</span> *p,<span class="hljs-built_in">int</span> state)    &#123;        <span class="hljs-keyword">if</span>(p[state]!=<span class="hljs-number">-1</span>)            <span class="hljs-keyword">return</span> p[state];        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=maxChoosableInteger;i++)        &#123;            <span class="hljs-built_in">int</span> s=<span class="hljs-number">1</span>&lt;&lt;i<span class="hljs-number">-1</span>;            <span class="hljs-keyword">if</span>((s&amp;state)==<span class="hljs-number">0</span>)<span class="hljs-comment">//位运算的优先级很低</span>            &#123;                <span class="hljs-keyword">if</span>(desiredTotal-i&lt;=<span class="hljs-number">0</span>||!dfs(maxChoosableInteger,desiredTotal-i,p,s|state))                &#123;                    p[state]=<span class="hljs-number">1</span>;                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                &#125;                            &#125;        &#125;        p[state]=<span class="hljs-number">0</span>;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;;</code></pre><h1 id="526-优美的排列"><a href="#526-优美的排列" class="headerlink" title="526. 优美的排列"></a>526. 优美的排列</h1><p>这个题目使用两个数字来记录。第一个是代表哪些数字已经被使用，状态压缩记录，另一个代表的是这是第几个数字。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> countArrangement(<span class="hljs-built_in">int</span> N) &#123;    <span class="hljs-built_in">int</span> *dp=new <span class="hljs-built_in">int</span>[<span class="hljs-number">1</span>&lt;&lt;N];    <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;N);i++)        dp[i]=<span class="hljs-number">-1</span>;    res=dfs(N,dp,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);    delete []dp;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-built_in">int</span> dfs(<span class="hljs-built_in">int</span> N,<span class="hljs-built_in">int</span> *dp,<span class="hljs-built_in">int</span> state,<span class="hljs-built_in">int</span> p)&#123;    <span class="hljs-keyword">if</span>(dp[state]!=<span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> dp[state];    <span class="hljs-built_in">int</span> tmp=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)    &#123;        <span class="hljs-built_in">int</span> s=<span class="hljs-number">1</span>&lt;&lt;i<span class="hljs-number">-1</span>;        <span class="hljs-keyword">if</span>((s&amp;state)==<span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">if</span>((i%p==<span class="hljs-number">0</span>||p%i==<span class="hljs-number">0</span>))            &#123;                <span class="hljs-keyword">if</span>(p==N)                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                tmp+=dfs(N,dp,state|s,p+<span class="hljs-number">1</span>);            &#125;        &#125;    &#125;    <span class="hljs-comment">// cout&lt;&lt;tmp&lt;&lt;endl;</span>    <span class="hljs-keyword">return</span> tmp;&#125;</code></pre><h1 id="935-骑士拨号器"><a href="#935-骑士拨号器" class="headerlink" title="935. 骑士拨号器"></a>935. 骑士拨号器</h1><p>这道题目看起来不像是状压dp，就是让上一个情况递推到下一个，然后同时记录中间的结果。<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:<span class="hljs-built_in">int</span> a[<span class="hljs-number">10</span>][<span class="hljs-number">5005</span>];<span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> C=pow(<span class="hljs-number">10</span>,<span class="hljs-number">9</span>)+<span class="hljs-number">7</span>;    <span class="hljs-built_in">int</span> knightDialer(<span class="hljs-built_in">int</span> N)     &#123;        vector&lt;<span class="hljs-built_in">int</span>&gt; t(<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>);        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; b(<span class="hljs-number">10</span>,t);        b[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">4</span>;b[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">6</span>;        b[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">6</span>;b[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">8</span>;        b[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">7</span>;b[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">9</span>;        b[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">4</span>;b[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">8</span>;        b[<span class="hljs-number">4</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;b[<span class="hljs-number">4</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">9</span>;b[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;        b[<span class="hljs-number">6</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;b[<span class="hljs-number">6</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">7</span>;b[<span class="hljs-number">6</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;        b[<span class="hljs-number">7</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">2</span>;b[<span class="hljs-number">7</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">6</span>;        b[<span class="hljs-number">8</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;b[<span class="hljs-number">8</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;        b[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">2</span>;b[<span class="hljs-number">9</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">4</span>;        <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)        &#123;            res=(fun(i,N<span class="hljs-number">-1</span>,b)+res)%C;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;    <span class="hljs-built_in">int</span> fun(<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> N,vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; &amp;b)    &#123;        <span class="hljs-keyword">if</span>(a[i][N]!=<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> a[i][N];        <span class="hljs-keyword">if</span>(N==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        <span class="hljs-built_in">int</span> tmp1=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> t=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">3</span>;t++)        &#123;            <span class="hljs-built_in">int</span> tmp=b[i][t];            <span class="hljs-keyword">if</span>(tmp!=<span class="hljs-number">-1</span>)                tmp1=(fun(tmp,N<span class="hljs-number">-1</span>,b)%C+tmp1%C)%C;        &#125;        a[i][N]=tmp1;        <span class="hljs-keyword">return</span> tmp1%C;    &#125;&#125;;</code></pre></p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> a[<span class="hljs-number">8</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>];    <span class="hljs-built_in">int</span> maxStudents(vector&lt;vector&lt;char&gt;&gt;&amp; seats)     &#123;        <span class="hljs-built_in">int</span> len=seats.size();        <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">0</span>||seats[<span class="hljs-number">0</span>].size()&lt;=<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> len1=seats[<span class="hljs-number">0</span>].size();        vector&lt;<span class="hljs-built_in">int</span>&gt; t(len1,<span class="hljs-number">-1</span>);        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; tt(len,t);<span class="hljs-comment">//这一行，以及上一行的状态</span>                dfs(<span class="hljs-number">0</span>,dp,<span class="hljs-number">0</span>，<span class="hljs-number">0</span>)<span class="hljs-comment">//第几行，这一行的状态，由于只会往上和左右扩散，所以可以从一个方向走。</span>        <span class="hljs-keyword">return</span> res;     &#125;    <span class="hljs-built_in">int</span> dfs(<span class="hljs-built_in">int</span> len,vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; dp,<span class="hljs-built_in">int</span> state，<span class="hljs-built_in">int</span> state1)    &#123;        <span class="hljs-keyword">if</span>(dp[len][state][state1]!=<span class="hljs-number">-1</span>)            <span class="hljs-keyword">return</span> dp[len][state][state1];        <span class="hljs-built_in">int</span> tmp=<span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> rr=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)        &#123;            <span class="hljs-built_in">int</span> s1=state;            <span class="hljs-built_in">int</span> s2=state1;            tmp=<span class="hljs-number">1</span>&lt;&lt;i;            <span class="hljs-keyword">if</span>((i&amp;state)==<span class="hljs-number">0</span>)            &#123;                s1=s1|tmp;                <span class="hljs-keyword">if</span>(i<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>)                &#123;                    s1=s1|(<span class="hljs-number">1</span>&lt;&lt;i<span class="hljs-number">-1</span>);                    s2=s2|(<span class="hljs-number">1</span>&lt;&lt;i<span class="hljs-number">-1</span>);                &#125;                <span class="hljs-keyword">if</span>(i&lt;=len1)                &#123;                    s1=s1|(<span class="hljs-number">1</span>&lt;&lt;i+<span class="hljs-number">1</span>);                    s2=s2|(<span class="hljs-number">1</span>&lt;&lt;i+<span class="hljs-number">1</span>);                &#125;                rr=max(rr,dfs(len,dp,s1,s2));            &#125;        &#125;        dp[len][s1][s2]=rr;        <span class="hljs-keyword">return</span> rr;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>状压dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树形dp</title>
    <link href="/2020/07/28/%E6%A0%91%E5%BD%A2dp/"/>
    <url>/2020/07/28/%E6%A0%91%E5%BD%A2dp/</url>
    
    <content type="html"><![CDATA[<h1 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h1><h1 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543. 二叉树的直径"></a>543. 二叉树的直径</h1><p>这里就是对于每棵树判断两种情况，是选择自己作为深度，祖宗节点作为根节点穿过最长，还是就是自己作为根节点穿过最长呢。<br>于是只需要求子节点的最长的节点长度，然后最后把节点长度减一就可以了。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> dfs(TreeNode* root)    &#123;        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>ptr)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> l=dfs(root-&gt;left);        <span class="hljs-built_in">int</span> r=dfs(root-&gt;right);        res=max(res,l+r+<span class="hljs-number">1</span>);        <span class="hljs-keyword">return</span> max(l,r)+<span class="hljs-number">1</span>;    &#125;    <span class="hljs-built_in">int</span> diameterOfBinaryTree(TreeNode* root)     &#123;        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>ptr)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> a=dfs(root);        <span class="hljs-keyword">return</span> res<span class="hljs-number">-1</span>;    &#125;&#125;;</code></pre><h1 id="LeetCode-337-House-Robber-III-medium"><a href="#LeetCode-337-House-Robber-III-medium" class="headerlink" title="LeetCode 337. House Robber III (medium)"></a>LeetCode 337. House Robber III (medium)</h1><p>这个在打家劫舍系列里面，动态规划里面，这里就不重复写了。</p><h1 id="124-二叉树中的最大路径和"><a href="#124-二叉树中的最大路径和" class="headerlink" title="124. 二叉树中的最大路径和"></a>124. 二叉树中的最大路径和</h1><p>这个题目的思路主要是就是我们在每个经过的路径肯定有一个最高的节点。如果自己这个节点就是最高的节点。那么就是比较结果和左子树加右子树加节点的值。这个地方要注意 一个节点的情况实际上是已经包含的了。</p><p>接下来就是两个节点的情况。<br>左子树或者右子树，取大于0 的最大值。然后加上节点值返回。</p><p>一开始我不理解三个节点的情况，两个节点的情况，一个节点的情况的区别，有可能还有负数，我比较混乱，所以就写得很繁琐，都列举出来了。</p><p>较繁琐代码，可以参考。击败97%<br><pre><code class="hljs ocaml"><span class="hljs-keyword">class</span> <span class="hljs-type">Solution</span> &#123;public:    <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> maxval=-<span class="hljs-number">0x7fffffff</span>-<span class="hljs-number">1</span>;    <span class="hljs-built_in">int</span> dfs(<span class="hljs-type">TreeNode</span>* root)    &#123;        <span class="hljs-keyword">if</span>(root==nullptr)        &#123;            return <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-keyword">val</span>&gt;maxval)            maxval=root-&gt;<span class="hljs-keyword">val</span>;        <span class="hljs-built_in">int</span> <span class="hljs-type">L</span>=dfs(root-&gt;left);        <span class="hljs-built_in">int</span> <span class="hljs-type">R</span>=dfs(root-&gt;right);        <span class="hljs-keyword">if</span>(<span class="hljs-type">L</span>&lt;<span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-type">R</span>&lt;<span class="hljs-number">0</span>)            &#123;                res=max(res,root-&gt;<span class="hljs-keyword">val</span>);                return root-&gt;<span class="hljs-keyword">val</span>&gt;<span class="hljs-number">0</span>?root-&gt;<span class="hljs-keyword">val</span>:<span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span>            &#123;                res= max(res,<span class="hljs-type">R</span>+max(<span class="hljs-number">0</span>,root-&gt;<span class="hljs-keyword">val</span>));                return <span class="hljs-type">R</span>+root-&gt;<span class="hljs-keyword">val</span>&gt;<span class="hljs-number">0</span>?<span class="hljs-type">R</span>+root-&gt;<span class="hljs-keyword">val</span>:<span class="hljs-number">0</span>;            &#125;        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-type">R</span>&lt;<span class="hljs-number">0</span>)            &#123;                res= max(res,<span class="hljs-type">L</span>+max(<span class="hljs-number">0</span>,root-&gt;<span class="hljs-keyword">val</span>));                return <span class="hljs-type">L</span>+root-&gt;<span class="hljs-keyword">val</span>&gt;<span class="hljs-number">0</span>?<span class="hljs-type">L</span>+root-&gt;<span class="hljs-keyword">val</span>:<span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span>            &#123;                <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-keyword">val</span>&gt;=<span class="hljs-number">0</span>||root-&gt;<span class="hljs-keyword">val</span>+<span class="hljs-type">L</span>&gt;<span class="hljs-number">0</span>||root-&gt;<span class="hljs-keyword">val</span>+<span class="hljs-type">R</span>&gt;<span class="hljs-number">0</span>)                    res=max(res,<span class="hljs-type">L</span>+<span class="hljs-type">R</span>+root-&gt;<span class="hljs-keyword">val</span>);                <span class="hljs-keyword">else</span>                     res=max(res,max(<span class="hljs-type">L</span>,<span class="hljs-type">R</span>));                <span class="hljs-built_in">int</span> tmp=max(<span class="hljs-type">R</span>,<span class="hljs-type">L</span>)+root-&gt;<span class="hljs-keyword">val</span>;                return tmp&gt;<span class="hljs-number">0</span>?tmp:<span class="hljs-number">0</span>;            &#125;        &#125;    &#125;    <span class="hljs-built_in">int</span> maxPathSum(<span class="hljs-type">TreeNode</span>* root) &#123;        <span class="hljs-built_in">int</span> a=dfs(root);        <span class="hljs-keyword">if</span>(maxval&lt;=<span class="hljs-number">0</span>)            return maxval;        return res;    &#125;&#125;;</code></pre></p><p>简化代码。<br><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> res=<span class="hljs-number">-0x7fffffff</span><span class="hljs-number">-1</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)    &#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">int</span> L=dfs(root-&gt;left);    <span class="hljs-keyword">int</span> R=dfs(root-&gt;right);    <span class="hljs-keyword">int</span> l=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,L);    <span class="hljs-keyword">int</span> r=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,R);    res=<span class="hljs-built_in">max</span>(res,r+l+root-&gt;val);    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(l,r)+root-&gt;val;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxPathSum</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;    dfs(root);    <span class="hljs-keyword">return</span> res;&#125;</code></pre></p><p>代码差不多只是稍微简化了一点点。也是97%</p><h1 id="LeetCode-1245-Tree-Diameter"><a href="#LeetCode-1245-Tree-Diameter" class="headerlink" title="LeetCode 1245. Tree Diameter"></a>LeetCode 1245. Tree Diameter</h1><p>这道题是被锁住的。</p><p>题目描述<br>给定一棵无向树，返回它的直径：树中最长路径的 边 的数量。</p><p>树用一个数组给出，数组为 edges[i] = [u, v]，每个元素代表一条双向边连接结点 u 和 v。每个结点的编号为 {0, 1, …, edges.length}。</p><p>样例</p><p>输入：edges = [[0,1],[0,2]]<br>输出：2<br>解释：<br>这棵树上最长的路径是 1 - 0 - 2，边数为 2。</p><p>输入：edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]<br>输出：4<br>解释：<br>这棵树上最长的路径是 3 - 2 - 1 - 4 - 5，边数为 4。<br>限制<br>0 &lt;= edges.length &lt; 10^4<br>edges[i][0] != edges[i][1]<br>0 &lt;= edges[i][j] &lt;= edges.length<br>edges 会形成一棵无向树。</p><p>遇到树的题目，多数要考虑到使用dfs或者bfs来解题。本题也不例外，从任意一点开始dfs整棵树，对于任意当前节点，它能组成的最大边长应该是从自身出发的所有路径中最长两条路径长度的和。因此，在每一步dfs中，我们需要记录下当前节点最长两条路径的长度，并求出和sum。同时返回最长的一条边的长度给上层dfs。全部dfs结束后，找到最大的sum即是结果。</p><p>之前我比较纠结的一点是为什么为什么走过来不会走回去，后来才发现，因为保证了不会走回头路，又是无环图所以一定不会走回去，最后写起来就和二叉树有点像。<br>每次判断以当前节点为中间节点的路径和最长路径的大小。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>; <span class="hljs-comment">// 返回结果</span><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> treeDiameter(<span class="hljs-built_in">int</span>[][] edges) &#123;    <span class="hljs-comment">// 利用边的信息构建出树的结构，即每个节点能和哪些节点相连接</span>    List&lt;Integer&gt;[] tree = new List[edges.length+<span class="hljs-number">1</span>];    <span class="hljs-comment">// 初始化</span>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;tree.length;i++)&#123;        tree[i] = new ArrayList&lt;&gt;();    &#125;    <span class="hljs-comment">// 构建树</span>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span>[] edge : edges)&#123;        tree[edge[<span class="hljs-number">0</span>]].add(edge[<span class="hljs-number">1</span>]);        tree[edge[<span class="hljs-number">1</span>]].add(edge[<span class="hljs-number">0</span>]);    &#125;    dfs(tree, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>); <span class="hljs-comment">// 开始dfs</span>    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-comment">// tree为树的结构图</span><span class="hljs-comment">// current为当前节点</span><span class="hljs-comment">// previous为前一个节点</span><span class="hljs-comment">// 返回值为：以当前节点为起点的一条最大路径长度</span><span class="hljs-built_in">int</span> dfs(List[] tree, <span class="hljs-built_in">int</span> current, <span class="hljs-built_in">int</span> previous)&#123;    <span class="hljs-comment">// 查看当前节点能与哪些节点连接</span>    List&lt;Integer&gt; list = tree[current];    <span class="hljs-built_in">int</span> max1=<span class="hljs-number">0</span>; <span class="hljs-comment">// 以当前节点为起点的一条最大路径长度</span>    <span class="hljs-built_in">int</span> max2=<span class="hljs-number">0</span>; <span class="hljs-comment">// 以当前节点为起点的一条次大路径长度</span>    <span class="hljs-comment">// 循环所有与当前节点相连的点</span>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> next : list)&#123;        <span class="hljs-comment">// 防止走回头路</span>        <span class="hljs-keyword">if</span>(next != previous)&#123;            <span class="hljs-comment">// dfs得到下一个节点一条路径的最大长度</span>            <span class="hljs-comment">// 加一之后为当前节点一条路径的长度</span>            <span class="hljs-built_in">int</span> max = dfs(tree, next, current)+<span class="hljs-number">1</span>;            <span class="hljs-comment">// 比较当路径长度与之前得到的max1，max2，并更新最大值</span>            <span class="hljs-keyword">if</span>(max&gt;=max1)&#123;                max2=max1;                max1=max;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(max&gt;=max2)&#123;                max2=max;            &#125;            <span class="hljs-comment">// max1+max2得到当前节点最大边长,与返回结果比较，更新最大值</span>            res=Math.max(res, max1+max2);        &#125;    &#125;    <span class="hljs-comment">// 返回当前节点一条路径的最大长度</span>    <span class="hljs-keyword">return</span> max1;&#125;</code></pre><h1 id="LeetCode-333-Largest-BST-Subtree-最大的二分搜索子树"><a href="#LeetCode-333-Largest-BST-Subtree-最大的二分搜索子树" class="headerlink" title="[LeetCode] 333. Largest BST Subtree 最大的二分搜索子树"></a>[LeetCode] 333. Largest BST Subtree 最大的二分搜索子树</h1><p>Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.</p><p>Note:<br>A subtree must include all of its descendants.</p><p>Example:</p><p>Input: [10,5,15,1,8,null,7]</p><p>   10<br>   / \<br>  5  15<br> / \   \<br>1   8   7</p><p>Output: 3<br>Explanation: The Largest BST Subtree in this case is the highlighted one.<br>             The return value is the subtree’s size, which is 3.<br>Follow up:<br>Can you figure out ways to solve it with O(n) time complexity?</p><p>Hint:</p><p>You can recursively use algorithm similar to 98. Validate Binary Search Tree at each node of the tree, which will result in O(nlogn) time complexity.</p><p>找最大的二叉搜索子树<br>首先肯定是需要子树的范围, 因为我们要判断当前结点为根的树是否为二叉搜索树就要满足当前结点大于左子树的最大值, 小于右子树的最小值. 再次我们还需要知道子树是否为二叉搜索树以及其二叉搜索树的大小. 有了这些信息我们就可以判断以当前结点为根的二叉树是否为二叉搜索树了. 但是这题很容易写的比较复杂.<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    vector&lt;<span class="hljs-built_in">int</span>&gt; DFS(TreeNode* root, <span class="hljs-built_in">int</span>&amp; ans)    &#123;        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-built_in">int</span>&gt;&#123;<span class="hljs-number">0</span>, INT_MAX, INT_MIN&#125;;        <span class="hljs-built_in">auto</span> left=DFS(root-&gt;left, ans), right=DFS(root-&gt;right, ans);        <span class="hljs-keyword">if</span>(root-&gt;val &gt; left[<span class="hljs-number">2</span>] &amp;&amp; root-&gt;val &lt; right[<span class="hljs-number">1</span>])        &#123;            <span class="hljs-built_in">int</span> Min =min(root-&gt;val, left[<span class="hljs-number">1</span>]), Max =max(root-&gt;val, right[<span class="hljs-number">2</span>]);            ans = max(ans, left[<span class="hljs-number">0</span>] + right[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>);            <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-built_in">int</span>&gt;&#123;left[<span class="hljs-number">0</span>] +right[<span class="hljs-number">0</span>] +<span class="hljs-number">1</span>, Min , Max&#125;;        &#125;        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-built_in">int</span>&gt;&#123;<span class="hljs-number">0</span>, INT_MIN, INT_MAX&#125;;    &#125;        <span class="hljs-built_in">int</span> largestBSTSubtree(TreeNode* root) &#123;        <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;        DFS(root, ans);        <span class="hljs-keyword">return</span> ans;    &#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>树形dp</tag>
      
      <tag>邻接矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间dp</title>
    <link href="/2020/07/27/Dicom%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"/>
    <url>/2020/07/27/Dicom%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="图像转CT值"><a href="#图像转CT值" class="headerlink" title="图像转CT值"></a>图像转CT值</h1><p>CT值的单位是Hounsfield，简称为Hu，范围是-1024-3071。用于衡量人体组织对X射线的吸收率，设定水的吸收率为0Hu。</p><p>　在DICOM图像读取的过程中，我们会发现图像的像素值有可能不是这个范围，通常是0-4096，这是我们常见到的像素值或者灰度值，这就需要我们在图像像素值（灰度值）转换为CT值。</p><p>首先，需要读取两个DICOM Tag信息，（0028|1052）：rescale intercept和（0028|1053）：rescale slope.</p><p>　　然后通过公式：</p><p>　　　　Hu = pixel * slope + intercept</p><p>　　计算得到CT值。</p><h1 id="衰减系数相关"><a href="#衰减系数相关" class="headerlink" title="衰减系数相关"></a>衰减系数相关</h1><p>此外，临床上常用的X射线能量范围在80-140KeV左右，也比较固定。因此，三个因素中的2个固定了，剩下的一个就是物质密度。由此可见，医学CT通常是通过物质密度来对物质进行区分的。现在来看看典型值：在临床X射线能量范围内，水的线性衰减系数为0.2cm-1，肌肉为0.2~0.21cm-1，脂肪为0.18cm-1左右，空气在0左右，骨头在0.3~0.4cm-1左右。记这些值比较麻烦，远不如记100,200这种整数来得容易。观察这些值可以发现，这些值都在水附近，所以临床上通常使用某物质与水之间的相对值来衡量物质的衰减能力，即</p><p>（物质衰减能力-水衰减能力）/（水衰减能力-空气衰减能力）*1000，</p><p>其中水衰减能力在0.2左右，空气为0左右。为了纪念第一个发明CT机的科学家Housfield，我们将这个相对值的单位记为HU。而这个相对值即为CT值。这样一来，可以得出：空气的CT值为-1000HU左右，水是0HU，脂肪是-100HU左右，肌肉是50HU左右，骨头则是500~1000HU左右。这些值就好记多了。所以，结论是：1：在医学上，由于X射线能量比较固定，有效原子序数也比较固定，CT值就基本上刻画的是不同组织的密度差异性。2：如何测量？这是CT图像重建的范畴了。X射线扫描得到投影图像，根据投影图像反演出人体每点的线性衰减系数，带入上述公式，计算得到每一个点的CT值。（注意，上述所有的值都是一些粗略的近似，实际情况则需要实际考察。例如不同部位所使用的X射线能量不同等等。为了易于理解，上述表述也不尽严谨，欢迎讨论~）</p><h1 id="转Hu值"><a href="#转Hu值" class="headerlink" title="转Hu值"></a>转Hu值</h1><p>B. Window-leveling 算法: W/L 是专门为 CT 设计的。原理很简单：CT 图像里不同组织的密度 (用 Hounsfield 单位) 是在固定的值域， 与具体设备和成像软件没有关系。因此，要看头颅时， 我们只需将头颅的值域转换到 0-255 就行了。</p><p>CT W/L 不讲头颅值域的 min 和 max, 而说 max - min (即 window_width) 和 (max+min)/2 (即 window_center)。</p><p>我们还可以用原来的公式，只是 min 和 max 的算法不一样。</p><p>// 先算图像的最大和最小值<br>min = (2<em>window_center - window_width)/2.0 + 0.5;<br>max = (2</em>window_center + window_width)/2.0 + 0.5;<br>for (i = 0; i &lt; nNumPixels; i++)<br>   disp_pixel_val = (pixel_val - min)*255.0/(double)(max - min);</p><p>请注意，CT 图像必须先转换成 Hounsfield 值再做 window-level。 这个转换包括将多余高位 bits 变成 0 (clipping), 和用 recale slope 和 rescale intercept 来做单位转换。</p><p>HU = pixel_val*rescale_slope + rescale_intercept</p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>区间dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间dp</title>
    <link href="/2020/07/27/%E5%8C%BA%E9%97%B4dp/"/>
    <url>/2020/07/27/%E5%8C%BA%E9%97%B4dp/</url>
    
    <content type="html"><![CDATA[<p>区间dp是线性动态规划的扩展，它在分阶段地划分问题时，与阶段中元素出现的顺序和由前一阶段的哪些元素合并而来由很大的关系。令状态f(i,j)表示将下标位置 i 到 j 的所有元素合并能获得的价值的最大值，那么 f(i,j) = max{f(i,k) + f(k+1, j) + cost}, cost 为将这两组元素合并起来的代价。</p><p>区间 DP 的特点：</p><p>合并：即将两个或多个部分进行整合，当然也可以反过来；<br>特征：能将问题分解为能两两合并的形式；<br>求解：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。<br>一般用二维数组表示区间<br>区间问题只需要考虑 区间头和区间尾</p><h1 id="87-扰乱字符串"><a href="#87-扰乱字符串" class="headerlink" title="87. 扰乱字符串"></a>87. 扰乱字符串</h1><p>给定一个字符串 s1，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。</p><p>下图是字符串 s1 = “great” 的一种可能的表示形式。</p><pre><code>great</code></pre><p>   /    \<br>  gr    eat<br> / \    /  \<br>g   r  e   at<br>           / \<br>          a   t<br>在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。</p><p>例如，如果我们挑选非叶节点 “gr” ，交换它的两个子节点，将会产生扰乱字符串 “rgeat” 。</p><pre><code>rgeat</code></pre><p>   /    \<br>  rg    eat<br> / \    /  \<br>r   g  e   at<br>           / \<br>          a   t<br>我们将 “rgeat” 称作 “great” 的一个扰乱字符串。</p><p>同样地，如果我们继续交换节点 “eat” 和 “at” 的子节点，将会产生另一个新的扰乱字符串 “rgtae” 。</p><pre><code>rgtae</code></pre><p>   /    \<br>  rg    tae<br> / \    /  \<br>r   g  ta  e<br>       / \<br>      t   a<br>我们将 “rgtae” 称作 “great” 的一个扰乱字符串。</p><p>给出两个长度相等的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。</p><p>dp[i][j][k][h] 表示 T[k..h]T[k..h] 是否由 S[i..j]S[i..j] 变来。由于变换必须长度是一样的，因此这边有个关系 j - i = h - kj−i=h−k ，可以把四维数组降成三维。dp[i][j][len]dp[i][j][len] 表示从字符串 SS 中 ii 开始长度为 lenlen 的字符串是否能变换为从字符串 TT 中 jj 开始长度为 lenlen 的字符串</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">bool</span> isScramble(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2)     &#123;        <span class="hljs-built_in">int</span> len1=s1.size();        <span class="hljs-built_in">int</span> len2=s2.size();        <span class="hljs-keyword">if</span>(len1!=len2)            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        vector&lt;vector&lt;vector&lt;<span class="hljs-built_in">bool</span>&gt;&gt;&gt; res(len1+<span class="hljs-number">1</span>,vector&lt;vector&lt;<span class="hljs-built_in">bool</span>&gt; &gt;(len1+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-built_in">bool</span>&gt;(len1+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>)));        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len1;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;len1;j++)            &#123;                res[i][j][<span class="hljs-number">1</span>]=s1[i]==s2[j];            &#125;        &#125;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">2</span>;i&lt;=len1;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;=len1-i;j++)            &#123;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=<span class="hljs-number">0</span>;k&lt;=len1-i;k++)                &#123;                    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> r=<span class="hljs-number">1</span>;r&lt;i;r++)                    &#123;                        <span class="hljs-keyword">if</span>(res[j][k][r]&amp;&amp;res[j+r][k+r][i-r])                        &#123;                            res[j][k][i]=<span class="hljs-literal">true</span>;                            <span class="hljs-keyword">break</span>;                        &#125;                        <span class="hljs-keyword">if</span>(res[j][k+i-r][r]&amp;&amp;res[j+r][k][i-r])                        &#123;                            res[j][k][i]=<span class="hljs-literal">true</span>;                            <span class="hljs-keyword">break</span>;                        &#125;                                            &#125;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][len1];    &#125;&#125;;</code></pre><h1 id="312-戳气球"><a href="#312-戳气球" class="headerlink" title="312. 戳气球"></a>312. 戳气球</h1><p>DP思路是这样的，就先别管前面是怎么戳的，你只要管这个区间最后一个被戳破的是哪个气球<br>这最后一个被戳爆的气球就是 k<br> <br>注意！！！！！<br>k是这个区间   最后一个   被戳爆的气球！！！！！<br>k是这个区间   最后一个   被戳爆的气球！！！！！</p><p>total<br>=<br>dp[i][k]<br>+<br>val[i] <em> val[k] </em> val[j]<br>+<br>dp[k][j]<br> <br>注：val[i] 表示 i 位置气球的数字<br>然后 (i,k) 和 (k,j) 也都是开区间</p><p>之间看这个方法的时候，为什么是开区间，如果选了闭区间怎么办呢，后面想到其实是不用闭区间的。<br>因为我们是在区间左右拓展了一个1. 如果取的是1到10中的开区间，实际上是求的是2到9之间的结果的内容。如果非要闭区间，那么实际的结果应该在0到11之间。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> maxCoins(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums) &#123;    <span class="hljs-built_in">int</span> len=nums.size();    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; res(len+<span class="hljs-number">2</span>,vector&lt;<span class="hljs-built_in">int</span>&gt; (len+<span class="hljs-number">2</span>,<span class="hljs-number">0</span>));    vector&lt;<span class="hljs-built_in">int</span>&gt; s(len+<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);    s[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;    s[len+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)    &#123;        s[i+<span class="hljs-number">1</span>]=nums[i];    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">3</span>;i&lt;=len+<span class="hljs-number">2</span>;i++)<span class="hljs-comment">//作为长度</span>    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;=len+<span class="hljs-number">2</span>-i;j++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> k=j+<span class="hljs-number">1</span>;k&lt;j+i<span class="hljs-number">-1</span>;k++)            &#123;                res[j][j+i<span class="hljs-number">-1</span>]=max(res[j][k]+res[k][j+i<span class="hljs-number">-1</span>]+s[j+i<span class="hljs-number">-1</span>]*s[j]*s[k],res[j][j+i<span class="hljs-number">-1</span>]);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>][len+<span class="hljs-number">1</span>];</code></pre><h1 id="546-移除盒子"><a href="#546-移除盒子" class="headerlink" title="546. 移除盒子"></a>546. 移除盒子</h1><p>这个题目挺难的，用的是区间dp加回溯法，讲道理不太会，下次看这个专题还是有必要重新做。</p><p>例如 [9, 5, 3, 5, 3, 3, 9, 8, 8, 5, 3, 9]，对于一个区间，我判断这个区间的第一个连续色块，9，它后面与他相同的色块位置在6和11位置，那么对于9这个色块的处理有3种方法：<br>1、自己直接干掉，消除他后面的，获得1+[5, 3, 5, 3, 3, 9, 8, 8, 5, 3, 9]分<br>2、留着，先把他到他后面第一个9的区间，即[5, 3, 5, 3, 3]干掉，然后再处理9+[9, 8, 8, 5, 3, 9]<br>3、留着，但是跳过他后面第一个9的区间，即把[5, 3, 5, 3, 3, 9, 8, 8, 5, 3]都干掉之后，再去处理9+[9]<br>那么可以看出来状态转移方程了，next[i]表示后面第一个与boxes[i]相等的位置，presame表示前面有几个数字与当前第一个位置的数字相等：<br>dp(presame, i, j) = max(max[dp(0, i+1, nexti-1) + dp(presame+1, nexti, j) for every nexti in next[i]], (presame+1)^2 + dp(0, i+1, j)<br>注意这里的presame会和当前的第一个位置数字一起去当做整体去处理。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> removeBoxes(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; boxes) &#123;    <span class="hljs-built_in">int</span> n=boxes.size();    vector&lt;vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&gt; dp(n,vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;(n,vector&lt;<span class="hljs-built_in">int</span>&gt;(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)));    <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,dp,boxes);&#125;<span class="hljs-built_in">int</span> dfs(<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> k,vector&lt;vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&gt;&amp; dp,vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; boxes)&#123;    <span class="hljs-keyword">if</span>(r&lt;l)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(dp[l][r][k]!=<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> dp[l][r][k];    <span class="hljs-keyword">while</span>(r&gt;l&amp;&amp;boxes[r]==boxes[r<span class="hljs-number">-1</span>])    &#123;        k++;        r--;    &#125;    dp[l][r][k]=dfs(l,r<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,dp,boxes)+(k+<span class="hljs-number">1</span>)*(k+<span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=l;i&lt;r;i++)    &#123;        <span class="hljs-keyword">if</span>(boxes[r]==boxes[i])        &#123;            dp[l][r][k]=max(dp[l][r][k],dfs(l,i,k+<span class="hljs-number">1</span>,dp,boxes)+dfs(i+<span class="hljs-number">1</span>,r<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,dp,boxes));        &#125;    &#125;    <span class="hljs-keyword">return</span> dp[l][r][k];&#125;</code></pre><h1 id="877-石子游戏"><a href="#877-石子游戏" class="headerlink" title="877. 石子游戏"></a>877. 石子游戏</h1><p>这道题我们采用dp[i][j]来判断先手赢的数目，每次有两种选择选最前面的或者最后面的。然后需要减去下一次先手的结果，因为下一次先手是另外一个人的回合了。<br>大于0就是true.<br><pre><code class="hljs matlab">bool stoneGame(vector&lt;int&gt;&amp; piles) &#123;    int len=piles.<span class="hljs-built_in">size</span>();    int sum=<span class="hljs-number">0</span>;    vector&lt;vector&lt;int&gt; &gt; res(len+<span class="hljs-number">1</span>,vector&lt;int&gt; (len+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));    <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">i</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">i</span>&lt;len;<span class="hljs-built_in">i</span>++)    &#123;        res[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">i</span>]=piles[<span class="hljs-built_in">i</span>];    &#125;    <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>;<span class="hljs-built_in">i</span>&lt;=len;<span class="hljs-built_in">i</span>++)    &#123;        <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">j</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">j</span>+<span class="hljs-built_in">i</span>&lt;=len;<span class="hljs-built_in">j</span>++)        &#123;            res[<span class="hljs-built_in">j</span>][<span class="hljs-built_in">j</span>+<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>]=<span class="hljs-built_in">max</span>(piles[<span class="hljs-built_in">j</span>]-res[<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>][<span class="hljs-built_in">j</span>+<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>],piles[<span class="hljs-built_in">j</span>+<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>]-res[<span class="hljs-built_in">j</span>][<span class="hljs-built_in">j</span>+<span class="hljs-built_in">i</span><span class="hljs-number">-2</span>]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>][len<span class="hljs-number">-1</span>]&gt;<span class="hljs-number">0</span>;&#125;</code></pre></p><h1 id="1000-合并石头的最低成本"><a href="#1000-合并石头的最低成本" class="headerlink" title="1000. 合并石头的最低成本"></a>1000. 合并石头的最低成本</h1><p>这个题目四个循环包括的是区间长度从2到n，然后每个res[j][j+i-1][k]每个区间合并成k团的结果，可以考虑把前面合成k-1团，后面认成一团。<br>最后求出每个区间合并成一团的结果。<br>最后求出的值就是结果。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> mergeStones(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; stones, <span class="hljs-built_in">int</span> K) &#123;    <span class="hljs-built_in">int</span> len=stones.size();    <span class="hljs-keyword">if</span>(!(len%(K<span class="hljs-number">-1</span>)==<span class="hljs-number">1</span>||K==<span class="hljs-number">2</span>))        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    vector&lt;vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; &gt; res(len+<span class="hljs-number">1</span>,vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; (len+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-built_in">int</span>&gt; (len+<span class="hljs-number">1</span>,<span class="hljs-number">1000000</span>)));    vector&lt;<span class="hljs-built_in">int</span>&gt; sum(len+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)    &#123;        sum[i]=sum[i<span class="hljs-number">-1</span>]+stones[i<span class="hljs-number">-1</span>];        res[i<span class="hljs-number">-1</span>][i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">2</span>;i&lt;=len;i++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j+i&lt;=len;j++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> t=<span class="hljs-number">2</span>;t&lt;=K;t++)            &#123;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> r=j;r&lt;=j+i<span class="hljs-number">-1</span>;r++)                &#123;                    res[j][j+i<span class="hljs-number">-1</span>][t]=min(res[j][j+i<span class="hljs-number">-1</span>][t],res[j][r][t<span class="hljs-number">-1</span>]+res[r+<span class="hljs-number">1</span>][i+j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);                &#125;            &#125;            res[j][j+i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]=min(res[j][j+i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],sum[j+i]-sum[j]+res[j][j+i<span class="hljs-number">-1</span>][K]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>][len<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
      <tag>区间dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵动态规划</title>
    <link href="/2020/07/22/%E7%9F%A9%E9%98%B5%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2020/07/22/%E7%9F%A9%E9%98%B5%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="矩阵动态规划的思路"><a href="#矩阵动态规划的思路" class="headerlink" title="矩阵动态规划的思路"></a>矩阵动态规划的思路</h2><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法都是用  dp(i, j)dp(i,j) 表示以 (i, j)(i,j) 为右下角，且只包含 11 的正方形的边长最大值。如果我们能计算出所有 dp(i, j)dp(i,j) 的值，那么其中的最大值即为矩阵中只包含 11 的正方形的边长最大值，其平方即为最大正方形的面积。</p><p>那么如何计算 dpdp 中的每个元素值呢？对于每个位置 (i, j)(i,j)，检查在矩阵中该位置的值：</p><p>如果该位置的值是 00，则 dp(i, j) = 0dp(i,j)=0，因为当前位置不可能在由 11 组成的正方形中；</p><p>如果该位置的值是 11，则 dp(i, j)dp(i,j) 的值由其上方、左方和左上方的三个相邻位置的 dpdp 值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加 11，状态转移方程如下：</p><p>dp(i, j)=min(dp(i−1, j), dp(i−1, j−1), dp(i, j−1))+1<br>dp(i,j)=min(dp(i−1,j),dp(i−1,j−1),dp(i,j−1))+1</p><p>很巧妙的方法</p><ol><li>统计全为 1 的正方形子矩阵<br>给你一个 m * n 的矩阵，矩阵中的元素不是 0 就是 1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。</li></ol><p>示例 1：</p><p>输入：matrix =<br>[<br>  [0,1,1,1],<br>  [1,1,1,1],<br>  [0,1,1,1]<br>]<br>输出：15<br>解释：<br>边长为 1 的正方形有 10 个。<br>边长为 2 的正方形有 4 个。<br>边长为 3 的正方形有 1 个。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> countSquares(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; matrix)     &#123;        <span class="hljs-built_in">int</span> len=matrix.size();        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>||matrix[<span class="hljs-number">0</span>].size()==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        vector&lt;<span class="hljs-built_in">int</span>&gt; t(matrix[<span class="hljs-number">0</span>].size()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);        <span class="hljs-built_in">int</span> num=<span class="hljs-number">0</span>;        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; res1(len+<span class="hljs-number">1</span>,t);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;matrix[<span class="hljs-number">0</span>].size();j++)            &#123;                <span class="hljs-keyword">if</span>(matrix[i][j]==<span class="hljs-number">1</span>)                &#123;                    <span class="hljs-built_in">int</span> r=min(res1[i][j+<span class="hljs-number">1</span>],min(res1[i][j],res1[i+<span class="hljs-number">1</span>][j]))+<span class="hljs-number">1</span>;                    res1[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=r;                &#125;                <span class="hljs-keyword">else</span>                &#123;                    res1[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;                &#125;                num+=res1[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>];                <span class="hljs-comment">// cout&lt;&lt;res[i+1][j+1]&lt;&lt;" ";</span>            &#125;            <span class="hljs-comment">// cout&lt;&lt;endl;</span>        &#125;        <span class="hljs-keyword">return</span> num;    &#125;&#125;;</code></pre><h2 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a>221. 最大正方形</h2><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><p>示例:</p><p>输入: </p><p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p><p>输出: 4</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> maximalSquare(vector&lt;vector&lt;char&gt;&gt;&amp; matrix)     &#123;        <span class="hljs-built_in">int</span> len=matrix.size();        <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">0</span>||matrix[<span class="hljs-number">0</span>].size()&lt;=<span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-built_in">int</span> maxsize=<span class="hljs-number">0</span>;        vector&lt;<span class="hljs-built_in">int</span>&gt; t(matrix[<span class="hljs-number">0</span>].size()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; res(len+<span class="hljs-number">1</span>,t);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;matrix[<span class="hljs-number">0</span>].size();j++)            &#123;                <span class="hljs-keyword">if</span>(matrix[i][j]==<span class="hljs-string">'1'</span>)                    res[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=min(min(res[i][j+<span class="hljs-number">1</span>],res[i+<span class="hljs-number">1</span>][j]),res[i][j])+<span class="hljs-number">1</span>;                <span class="hljs-keyword">else</span>                    res[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;                <span class="hljs-comment">//cout&lt;&lt;res[i+1][j+1]&lt;&lt;" ";</span>                maxsize=max(maxsize,res[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]);            &#125;            <span class="hljs-comment">//cout&lt;&lt;endl;</span>        &#125;        <span class="hljs-keyword">return</span> maxsize*maxsize;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法稳定性</title>
    <link href="/2020/07/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    <url>/2020/07/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%A8%B3%E5%AE%9A%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>堆排序、快速排序、希尔排序、直接选择排序是不稳定的排序算法，而基数排序、冒泡排序、直接插入排序、折半插入排序、归并排序是稳定的排序算法。<br>首先，排序算法的稳定性大家应该都知道，通俗地讲就是能保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。在简单形式化一下，如果Ai = Aj, Ai原来在位置前，排序后Ai还是要在Aj位置前。<br>其次，说一下稳定性的好处。排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就 是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。<br>回到主题，现在分析一下常见的排序算法的稳定性，每个都给出简单的理由。</p><p>(1)冒泡排序<br>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改 变，所以冒泡排序是一种稳定排序算法。</p><p>(2)选择排序<br>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p><p>(3)插入排序<br>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开 始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相 等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳 定的。</p><p>(4)快速排序<br>快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11， 现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。</p><p>(5)归并排序<br>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个元素(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p><p>(6)基数排序<br>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优 先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p><p>(7)希尔排序(shell)<br>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元 素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p><p>(8)堆排序<br>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。<br>综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。</p>]]></content>
    
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桶排序基数排序相关题目</title>
    <link href="/2020/07/21/%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
    <url>/2020/07/21/%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="164-最大间距桶排序"><a href="#164-最大间距桶排序" class="headerlink" title="164. 最大间距桶排序"></a>164. 最大间距桶排序</h2><p>第一种方法采用的是桶排序，方法很巧妙。<br>我们可以知道比较排序最好都是nlogn的，所以不能使用，使用桶排序让我们忽略桶中的顺序，只比较桶之间的大小就可以获得On的复杂度。</p><p>那么怎么得到呢，可以得到max,min 然后如果有n个，取一个比平均距离小的内容，为（max-min）/（n）+1,其实也可以加三加四都可以，只需要保证桶内的距离比平均距离小，插值一定在桶间取到就可以，如果每个每个桶的大小对平均距离向下取整，那么相差最大的两个值一定不会在桶中。所以我们只需要记录桶的最大值和最小值，然后比较桶之间的距离就行了。</p><pre><code class="hljs excel"><span class="hljs-built_in">int</span> maximumGap(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums) &#123;    <span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>=nums.size();    <span class="hljs-built_in">if</span>(<span class="hljs-built_in">len</span>&lt;<span class="hljs-number">2</span>)        return <span class="hljs-number">0</span>;    vector&lt;<span class="hljs-built_in">int</span>&gt; maxnum(<span class="hljs-built_in">len</span>,-<span class="hljs-number">1</span>);    vector&lt;<span class="hljs-built_in">int</span>&gt; minnum(<span class="hljs-built_in">len</span>,-<span class="hljs-number">1</span>);    <span class="hljs-built_in">int</span> maxval=-<span class="hljs-number">1</span>,minval=nums[<span class="hljs-number">0</span>];    for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)    &#123;        <span class="hljs-built_in">if</span>(nums[i]&gt;maxval)            maxval=nums[i];        <span class="hljs-built_in">if</span>(nums[i]&lt;minval)            minval=nums[i];    &#125;    <span class="hljs-built_in">int</span> sizen=(maxval-minval)/(<span class="hljs-built_in">len</span>)+<span class="hljs-number">1</span>;    for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)    &#123;        <span class="hljs-built_in">int</span> <span class="hljs-built_in">t</span>=(nums[i]-minval)/sizen;        <span class="hljs-built_in">if</span>(nums[i]&gt;maxnum[<span class="hljs-built_in">t</span>])            maxnum[<span class="hljs-built_in">t</span>]=nums[i];        <span class="hljs-built_in">if</span>(minnum[<span class="hljs-built_in">t</span>]==-<span class="hljs-number">1</span>||nums[i]&lt;minnum[<span class="hljs-built_in">t</span>])            minnum[<span class="hljs-built_in">t</span>]=nums[i];        // cout&lt;&lt;minnum[<span class="hljs-built_in">t</span>]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;maxnum[<span class="hljs-built_in">t</span>]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;<span class="hljs-built_in">t</span>&lt;&lt;endl;    &#125;    <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> tmp=-<span class="hljs-number">1</span>;    for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)    &#123;        <span class="hljs-built_in">if</span>(maxnum[i]==-<span class="hljs-number">1</span>)            continue;        <span class="hljs-built_in">if</span>(tmp==-<span class="hljs-number">1</span>)        &#123;            tmp=maxnum[i];            continue;        &#125;        <span class="hljs-built_in">if</span>(minnum[i]-tmp&gt;res)        &#123;            res=minnum[i]-tmp;            // cout&lt;&lt;i&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;minnum[i]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;tmp&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;res&lt;&lt;endl;        &#125;        tmp=maxnum[i];            &#125;    return res;&#125;</code></pre><h2 id="164-最大间距基数排序"><a href="#164-最大间距基数排序" class="headerlink" title="164. 最大间距基数排序"></a>164. 最大间距基数排序</h2><p>基数排序这个是从低位到高位很适合，复杂度是d(n+k),d是位数，k是基数10.<br>这个以前不理解为啥低位到高位可行，其实原因是因为这样是稳定的，例如一个44，41，52.个位数排41，52，44排好，然后排个位就是41，44，52，为什么41一定在前面呢，就是因为，个位的时候已经在前面了，所以要保持稳定性，下次还是在前面。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> maximumGap(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums)     &#123;        <span class="hljs-built_in">int</span> len=nums.size();        <span class="hljs-keyword">if</span>(len&lt;<span class="hljs-number">2</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        vector&lt;<span class="hljs-built_in">int</span>&gt; t(len);        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; res(<span class="hljs-number">10</span>,t);        <span class="hljs-built_in">int</span> maxnum=<span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            maxnum=max(maxnum,nums[i]);        &#125;        <span class="hljs-built_in">int</span> e=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(maxnum!=<span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)                res[i].clear();            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)            &#123;                <span class="hljs-built_in">int</span> t=nums[i]/e%<span class="hljs-number">10</span>;                res[t].push_back(nums[i]);            &#125;            <span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)            &#123;                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;res[i].size();j++)                &#123;                    nums[index]=res[i][j];                    index++;                &#125;            &#125;            maxnum/=<span class="hljs-number">10</span>;            e*=<span class="hljs-number">10</span>;        &#125;        <span class="hljs-built_in">int</span> result=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)        &#123;            result=max(result,nums[i]-nums[i<span class="hljs-number">-1</span>]);        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>排序</tag>
      
      <tag>桶排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中取INF</title>
    <link href="/2020/07/17/C++%E4%B8%AD%E5%8F%96INF/"/>
    <url>/2020/07/17/C++%E4%B8%AD%E5%8F%96INF/</url>
    
    <content type="html"><![CDATA[<p>int型是4个字bai节 一个字节8个位 0x7f7f7f7f 是十六进制du<br>也就是4个0x7f ,一个0x7f 转化为二进制就zhi是 01111111<br>因为是int型 第一个位是符号位dao ，因而在int 型中 0x7f7f7f7f也就是无穷大的意思<br>通过 #define 将 “INF” 转化为符号常量 代表 0x7f7f7f7f</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计数排序基数排序和桶排序</title>
    <link href="/2020/07/13/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E5%92%8C%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/07/13/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E5%92%8C%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>计数排序基数排序和桶排序</p><p>这三种方法我经常容易忘记，不太熟悉。总结一下。</p><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>原理很容易懂<br>就是排序元素的范围我们知道，那么就可以将其放到一个这么大的数组中，然后直接每次从数组中取数丢进排序数组中，这个不是一个比较排序的方法。<br>最坏时间复杂度为O(n+k),空间复杂度也为O(n+k)</p><p>空间复杂度容易理解，但是时间复杂度我一开始以为的是O(n),实际上这是不对的，因为需要考虑到n很小而k很大 n很大而k很小的情况，综合起来就是O(n+k).</p><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>假设:它使用了具有固定范围的“桶”。它假设每一个元素都会落在这些桶内。每一个桶的范围是固定的。如果桶的范围是1，则该算法就与计数排序很相似了，唯一的不同之处是，它存储的是元素本身而不是它们的计数。</p><p>算法：</p><p>假设有k个桶：B0, B1, … Bk-1</p><p>对于数组a中的每一个元素e：</p><pre><code>当e属于Bi时，将其插入Bi中</code></pre><p>对于B中的每一个桶b：</p><pre><code>sort b</code></pre><p>令finalarray = {}</p><p>对于B中的每一个桶b：</p><pre><code>finalarray = concat(finalarray, b)</code></pre><p>时间复杂度：O(n)，最坏情况O(n <em> n)或者O(n </em> logn)取决于其对桶使用的排序算法。最坏情况下所有元素都落入同一个桶内。</p><p>其时间复杂度还与桶的大小和范围有关。如果桶的大小和范围选择不当，可能使得所有元素都落入同一个桶中。如果元素均匀的分布在各个桶内，则时间复杂度就是O(n)</p><p>空间复杂度：O(n)</p><p>大体讲就是将数分到很多个桶中，每个桶中的排序复杂度很小，然后将数连起来。排序完成，最坏情况大家都在一个桶中效果就很差。</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序的主要思路是,将所有待比较数值(注意,必须是正整数)统一为同样的数位长度,数位较短的数前面补零. 然后, 从最低位开始, 依次进行一次稳定排序(我们常用上一篇blog介绍的计数排序算法, 因为每个位可能的取值范围是固定的从0到9).这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列.</p><p>基数排序的时间复杂度是O(n*k)，其中n是排序元素的底，如是十进制就是10，k是数字位数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包九讲</title>
    <link href="/2020/07/13/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
    <url>/2020/07/13/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="背包九讲"><a href="#背包九讲" class="headerlink" title="背包九讲"></a>背包九讲</h1><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><p>有 N 件物品和一个容量为 V 的背包。放入第 i 件物品耗费的费用是 Ci<br>1，得到的<br>价值是 Wi。求解将哪些物品装入背包可使价值总和最大。<br>递推方程应该是<br><pre><code class="hljs markdown">res[<span class="hljs-string">i</span>][<span class="hljs-symbol">V</span>]=max(res[<span class="hljs-string">i-1</span>][<span class="hljs-symbol">V-ci</span>]+wi,res[<span class="hljs-string">i-1</span>][<span class="hljs-symbol">V</span>]);可以用滚动数组优化成O(V)空间这个空间优化的过程，应该逆序得到，顺序不可以。res[V]=max(res[V-ci],res[V]); V=V……1；</code></pre><br>还可以进行常数优化res[V]=max(res[V-ci],res[V]); </p><p>$a_1$</p><p>$V=V……max(V-\sum^{n}_{i+1}ci+1,ci)$</p><p>为什么是循环到i+1就可以停下来呢？<br>如果是ci较大，那么对于一维空间优化的情况下，表示的是res[i-1][V],对于继续向下循环是不会改变结果的。</p><p>如果是V-\sum^{n}_{i+1}ci+1较大，说明剩下的空间已经不够装ci了，自然也没必要再继续了。</p><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>有 N 种物品和一个容量为 V 的背包，每种物品都有无限件可用。放入第 i 种物品<br>的费用是 Ci，价值是 Wi。求解：将哪些物品装入背包，可使这些物品的耗费的费用总<br>和不超过背包容量，且价值总和最大。</p><p>这个题目一看很容易认为是贪心问题，但是这个物品是不能分的所以不是贪心的，需要注意。<br><pre><code class="hljs markdown">这个我们考虑的就是还是某个物品选不选，但是是可以再次选它的。二维形式res[<span class="hljs-string">i</span>][<span class="hljs-symbol">V</span>]=max(res[<span class="hljs-string">i-1</span>][<span class="hljs-symbol">V</span>],res[<span class="hljs-string">i</span>][<span class="hljs-symbol">V-ci</span>]+wi);一维形式为res[V]=max(res[V],res[V-ci]+wi) v=1……V;</code></pre><br>在优化的情况下，体积大于V可以直接去掉。O(n)</p><p>另外对于任何的体积更大的，但是价值更低的，也可以优化掉。O(n^2)</p><p>还可以将体积相同的物品，都用其价值最大的代替。O(V+N)<a href="计数排序基数排序和桶排序">类似计数排序</a></p><p>for i……n<br>    if(store[V[i]]&lt;wi)<br>        store[V[i]]=wi<br>for i ……v<br>    把这些物品丢进去</p><h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>有 N 种物品和一个容量为 V 的背包。第 i 种物品最多有 Mi 件可用，每件耗费的<br>空间是 Ci，价值是 Wi。求解将哪些物品装入背包可使这些物品的耗费的空间总和不超<br>过背包容量，且价值总和最大。</p><p>这个首先有两个朴素的想法</p><h3 id="01背包的想法"><a href="#01背包的想法" class="headerlink" title="01背包的想法"></a>01背包的想法</h3><p>这个想法是把M[i]个相同的物品看成很多个不同的物品，然后用01背包方法求解。</p><h3 id="完全背包的想法"><a href="#完全背包的想法" class="headerlink" title="完全背包的想法"></a>完全背包的想法</h3><p>这个方法就是对于任何一个物品，每次都有许多个选择，然后选取其中的k个<br>进行空间优化之后和01背包的思路相同。复杂度也相同<br><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> mutibackpack()<span class="hljs-comment">//类似完全背包的方法</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;N; i++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">1</span>; j &lt;=M[i]; j++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = C[i]*j; k &lt;=V; k++)&#123;res[k] =max(res[k], res[k-j*C[i]]+j*W[i]);&#125;&#125;&#125;<span class="hljs-keyword">return</span> res[V];&#125;</code></pre></p><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><p>二进制思想：</p><p>假设有 1000 个苹果，现在要取n个苹果，如何取？朴素的做法应该是将苹果一个一个拿出来，直到n个苹果被取出来。<br>再假设有 1000 个苹果和10只箱子，利用箱子进行某些预工作，然后如何快速的取出n个苹果呢？So..可以在每个箱子中放 2^i (i&lt;=0&lt;=n)个苹果，也就是 1、2、4、8、16、32、64、128、256、489（n减完之前的数之后不足 2^i，取最后剩余的数），相当于把十进制的数用二进制来表示，取任意n个苹果时，只要推出几只箱子就可以了。</p><p>再次分析：</p><p>只看上面是不好理解的，比如：7的二进制 7 = 111, 它可以分解成 001, 010, 100. 这三个数可以组合成任意小于等于 7 的数，而且每种组合都会得到不同的数。再比如，13 = 1101, 则分解为 0001, 0010, 0100, 0110. 前三个数字可以组合成 7 以内任意一个数，每个数再加上0110(= 6) 之后可以组合成任意一个大于等于 6 小于等于 13 的数，所以依然能组成任意小于等于 13 的数，很明显 6,7 会多重复 1 次，但对于求解背包问题是没有影响的，基于这种思想把一种多件物品转换为，多件一种物品，然后用01背包求解即可。</p><p>这个想法可以视为从以前我们对于某种物品取它的n数量，会考虑n-1数量的情况，现在我们不是间隔为1进行考虑，而是用二进制的方法来考虑<br><pre><code class="hljs dart"><span class="hljs-built_in">int</span> mutibackpack2()<span class="hljs-comment">//二进制优化</span>&#123;<span class="hljs-built_in">int</span> ste = <span class="hljs-number">1</span>;<span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span>;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<span class="hljs-built_in">num</span> = M[i];<span class="hljs-keyword">while</span>(<span class="hljs-built_in">num</span>&gt;<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">num</span>&gt;ste)<span class="hljs-built_in">num</span> -= ste;<span class="hljs-keyword">else</span>&#123;ste = <span class="hljs-built_in">num</span>;<span class="hljs-built_in">num</span> -= ste;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = C[i] * ste; k &lt;= V; k++)&#123;res[k] = max(res[k], res[k - ste * C[i]] + ste * W[i]);&#125;ste *= <span class="hljs-number">2</span>;&#125;&#125;<span class="hljs-keyword">return</span> res[V];&#125;</code></pre></p><h3 id="可行性问题"><a href="#可行性问题" class="headerlink" title="可行性问题"></a>可行性问题</h3><p>多重背包可行性问题指的是：每种有若干件的物品能否填满给定容量的背包，此时不考虑价值最大问题</p><p>F(i,j)表示使用前i个物品，填充容量为jjj的背包，第i个物品最多能够剩余多少个，如果无法填充容量为j的背包，则值为-1.</p><p>F[i-1][j]&gt;0<br>res[i][j]=M[i]</p><p>F[i][j-C[i]]&lt;=0 || j&lt;C[i]<br>res[i][j]=-1</p><p>其他<br>res[i][j]=res[i][j-C[i]]-1</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> mutibackpack3()<span class="hljs-comment">//res[i][j]表示前i中物品填满j大小的空间最大的剩余物品数量,进行了空间优化</span>&#123;res[<span class="hljs-number">0</span>] = M[<span class="hljs-number">0</span>];<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++)&#123;res[V] = <span class="hljs-number">-1</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; V; j++)&#123;<span class="hljs-keyword">if</span> (res[j] &gt; <span class="hljs-number">0</span>)res[j] = M[i];<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res[j - C[i]] &lt;= <span class="hljs-number">0</span> || j &lt; C[i])res[j] = <span class="hljs-number">-1</span>;<span class="hljs-keyword">else</span> res[j] = res[j - W[i]] - <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">return</span> res[V];&#125;</code></pre><h3 id="单调队列求解"><a href="#单调队列求解" class="headerlink" title="单调队列求解"></a>单调队列求解</h3><p>这个比较难，暂时没写</p><h2 id="混合背包问题"><a href="#混合背包问题" class="headerlink" title="混合背包问题"></a>混合背包问题</h2><p>01 背包与完全背包的混合<br>考虑到 01 背包和完全背包中给出的伪代码只有一处不同，故如果只有两类物品：<br>一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程<br>时，根据物品的类别选用顺序或逆序的循环即可，复杂度是 O(V N)。</p><p>再加上多重背包<br>如果再加上最多可以取有限次的多重背包式的物品，那么利用单调队列，也可以给<br>出均摊 O(V N) 的解法。<br>但如果不考虑单调队列算法的话，用将每个这类物品分成 O(logMi) 个 01 背包的物<br>品的方法也已经很优了。<br>最清晰的写法是调用我们前面给出的三个过程。</p><h2 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h2><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用，选择这件物品必<br>须同时付出这两种费用。对于每种费用都有一个可付出的最大值（背包容量）。问怎样<br>选择物品可以得到最大的价值。<br>设第 i 件物品所需的两种费用分别为 Ci 和 Di。两种费用可付出的最大值（也即两<br>种背包容量）分别为 V 和 U。物品的价值为 Wi。</p><p>算法可以写成res[i][j][k]=max(res[i-1][j][k],res[i][j-ci][k-di]+2i)</p><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取 U 件物品。<br>这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为 1，可以<br>付出的最大件数费用为 U。换句话说，设 F[v, u] 表示付出费用 v、最多选 u 件时可得<br>到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在<br>f[0 . . . V, 0 . . . U] 范围内寻找答案。</p><h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><p>有 N 件物品和一个容量为 V 的背包。第 i 件物品的费用是 Ci，价值是 Wi。这些<br>物品被划分为 K 组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包<br>可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。<br>也就是说设 F[k, v] 表示前 k 组物品花费费用 v 能取得的最大权值</p><p>res[k][v]=max(res[k-1][v],res[k][v-c[i]]+wi),ci,wi 为组中的东西</p><h2 id="依赖背包"><a href="#依赖背包" class="headerlink" title="依赖背包"></a>依赖背包</h2><p>这个问题由 NOIP2006 中“金明的预算方案”一题扩展而来。遵从该题的提法，将<br>不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题<br>的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。<br>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非<br>常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选<br>择两个附件……无法用状态转移方程来表示如此多的策略。事实上，设有 n 个附件，则<br>策略有 2<br>n + 1 个，为指数级。</p><p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主<br>件和它的附件集合实际上对应于依赖背包中的一个物品组，每个选择了主件又选择了若干个附<br>件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的<br>和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题<br>的策略一样多。</p><p>再考虑对每组内的物品应用完全背包中的优化。我们可以想到，对于第 k 个物品组中的<br>物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，可以对主件 k 的<br>“附件集合”先进行一次 01 背包，得到费用依次为 0. . .V − Ck 所有这些值时相应的最<br>大价值 Fk[0 . . . V − Ck]。那么，这个主件及它的附件集合相当于 V − Ck + 1 个物品的<br>物品组，其中费用为 v 的物品的价值为 Fk[v − Ck] + Wk，v 的取值范围是 Ck ≤ v ≤ V 。</p><p>也就是说，原来指数级的策略中，有很多策略都是冗余的，通过一次 01 背包后，<br>将主件 k 及其附件转化为 V − Ck + 1 个物品的物品组，就可以直接应用6的算法解决问<br>题了。</p><p>在树形依赖的背包问题中，我们将每颗子树作为一个泛化物品来看。同样，我们可以对每个主件的附件集合进行处理，合成一个新的泛化物品。即对每个主件的附件集合做一次01背包，得到res[j],j为0……v-wi,wi为第i个主件的空间，表示该附件集合在分配体积为j的情况下该附件总和的最优值。</p><h3 id="更一般的问题是："><a href="#更一般的问题是：" class="headerlink" title="更一般的问题是："></a>更一般的问题是：</h3><p>依赖关系以图论中“森林”3的形式给出。</p><p>也就是说，主件的附件<br>仍然可以具有自己的附件集合。限制只是每个物品最多只依赖于一个物品（只有一个主<br>件）且不出现循环依赖。<br>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同<br>的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的 01 背包中的物品<br>了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题<br>解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。<br>事实上，这是一种树形动态规划，其特点是，在用动态规划求每个父节点的属性之<br>前，需要对它的各个儿子的属性进行一次动态规划式的求值。这已经触及到了“泛化物<br>品”的思想。看完泛化物品后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物<br>品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p><h2 id="泛化物品"><a href="#泛化物品" class="headerlink" title="泛化物品"></a>泛化物品</h2><p>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的<br>费用而变化。这就是泛化物品的概念。<br>更严格的定义之。在背包容量为 V 的背包问题中，泛化物品是一个定义域为 0 . . . V<br>中的整数的函数 h，当分配给它的费用为 v 时，能得到的价值就是 h(v)。<br>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组 h[0 . . . V ]，给它<br>费用 v，可得到价值 h[v]。<br>一个费用为 c 价值为 w 的物品，如果它是 01 背包中的物品，那么把它看成泛化物<br>品，它就是除了 h(c) = w 外，其它函数值都为 0 的一个函数。如果它是完全背包中的<br>物品，那么它可以看成这样一个函数，仅当 v 被 c 整除时有 h(v) = w ·<br>v</p><p>c，其它函数值<br>均为 0。如果它是多重背包中重复次数最多为 m 的物品，那么它对应的泛化物品的函<br>数有 h(v) = w ·<br>v<br>c 仅当 v 被 c 整除且 v<br>c ≤ n，其它情况函数值均为 0。</p><p>一个物品组可以看作一个泛化物品 h。对于一个 0 . . . V 中的 v，若物品组中不存在<br>费用为 v 的物品，则 h(v) = 0，否则 h(v) 取值为所有费用为 v 的物品的最大价值。6中<br>每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</p><h3 id="泛化物品的和"><a href="#泛化物品的和" class="headerlink" title="泛化物品的和"></a>泛化物品的和</h3><p>如果给定了两个泛化物品 h 和 l，要用一定的费用从这两个泛化物品中得到最大的<br>价值，这个问题怎么求呢？事实上，对于一个给定的费用 v，只需枚举将这个费用如何<br>分配给两个泛化物品就可以了。同样的，对于 0. . .V 中的每一个整数 v，可以求得费用<br>v 分配到 h 和 l 中的最大价值 f(v)。</p><p>f(v)=max(h(k)+l(v-k)) k=1……v</p><p>由泛化物品的定义可知：在一个背包问题中，若将两个泛化物品代以它们的和，不<br>影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过<br>程也就是求所有这些泛化物品之和的过程。若问题的和为 s，则答案就是 s(0 . . . V ) 中<br>的最大值。</p><h1 id="搜索还是DP"><a href="#搜索还是DP" class="headerlink" title="搜索还是DP?"></a>搜索还是DP?</h1><p>在看到一道背包问题时，应该用搜索还是动态规划呢？</p><p>首先，可以从数据范围中得到命题人意图的线索。如果一个背包问题可以用DP解，V一定不能很大，否则O(VN)的算法无法承受，而一般的搜索解法都是仅与N有关，与V无关的。所以，V很大时（例如上百万），命题人的意图就应该是考察搜索。另一方面，N较大时（例如上百），命题人的意图就很有可能是考察动态规划了。</p><p>另外，当想不出合适的动态规划算法时，就只能用搜索了。例如看到一个从未见过的背包中物品的限制条件，无法想出DP的方程，只好写搜索以谋求一定的分数了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>线性dp</tag>
      
      <tag>动态规划</tag>
      
      <tag>背包九讲</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打家劫舍</title>
    <link href="/2020/07/13/%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/"/>
    <url>/2020/07/13/%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h2 id="粉刷房子1"><a href="#粉刷房子1" class="headerlink" title="粉刷房子1"></a>粉刷房子1</h2><p>这个题目leetcode需要会员，题干如下。<br>假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</p><p>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的矩阵来表示的。</p><p>例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。</p><p>注意：</p><p>所有花费均为正整数。</p><p>示例：</p><p>输入: [[17,2,17],[16,16,5],[14,3,19]]<br>输出: 10<br>解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。<br>     最少花费: 2 + 5 + 3 = 10。</p><p>选取第i个房子涂不同颜色的最小值<br><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> minCostII(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; costs) &#123;    <span class="hljs-built_in">int</span> n=costs.size();    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> a=costs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],b=costs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],c=costs[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];    <span class="hljs-built_in">int</span> t1,t2,t3;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    &#123;        t1=a;        t2=b;        t3=c;        a=min(b,c)+costs[i][<span class="hljs-number">0</span>];<span class="hljs-comment">//刷成红色的最大值</span>        b=min(t1,t3)+costs[i][<span class="hljs-number">1</span>];        c=min(t1,t2)+costs[i][<span class="hljs-number">2</span>];<span class="hljs-comment">//刷成蓝色</span>    &#125;    <span class="hljs-keyword">return</span> min((min(a,b)),c);&#125;</code></pre></p><h2 id="粉刷房子2"><a href="#粉刷房子2" class="headerlink" title="粉刷房子2"></a>粉刷房子2</h2><p>假如有一排房子，共 n 个，每个房子可以被粉刷成 k 种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</p><p>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x k 的矩阵来表示的。</p><p>例如，costs[0][0] 表示第 0 号房子粉刷成 0 号颜色的成本花费；costs[1][2] 表示第 1 号房子粉刷成 2 号颜色的成本花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。</p><p>注意：</p><p>所有花费均为正整数。</p><p>示例：</p><p>输入: [[1,5,3],[2,9,4]]<br>输出: 5<br>解释: 将 0 号房子粉刷成 0 号颜色，1 号房子粉刷成 2 号颜色。最少花费: 1 + 4 = 5;<br>     或者将 0 号房子粉刷成 2 号颜色，1 号房子粉刷成 0 号颜色。最少花费: 3 + 2 = 5. </p><p>这个题目如果用正常的思路，那么应该是对每个位置的房子，选取不同的颜色k，然后取其颜色不为k最小值。O(n<em>k</em>k).</p><p>会导致超时，复杂度过高。</p><p>可以优化每次选上一个的最短花费和次短花费。如果颜色和最短花费不一样，则选最短花费，否则选次短花费。这个地方应该注意一点，我之前很迷惑如果最短和次短都是和它一个颜色怎么办呢，<br>后来才发现其实选的是在上一个位置颜色不同的最短花费和次短花费。这个地方比较巧妙，需要额外注意。</p><pre><code class="hljs matlab">public int minCostII(vector&lt;vector&lt;int&gt;&gt; costs,int k) &#123;    int n=costs.<span class="hljs-built_in">size</span>();    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>||costs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    auto res=costs;    int tmp1=<span class="hljs-number">0</span>,tmp2=<span class="hljs-number">1</span>;    int a1=<span class="hljs-number">-1</span>,a2=<span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">i</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">i</span>&lt;n;<span class="hljs-built_in">i</span>++)    &#123;        a1=<span class="hljs-number">-1</span>;        a2=<span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(int <span class="hljs-built_in">j</span>=<span class="hljs-number">0</span>;<span class="hljs-built_in">j</span>&lt;k;<span class="hljs-built_in">j</span>++)        &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">j</span>==tmp1)            &#123;                res[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]=(<span class="hljs-built_in">i</span>==<span class="hljs-number">0</span>?costs[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]:res[<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>][tmp1]+costs[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]);            &#125;            <span class="hljs-keyword">else</span>            &#123;                res[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]=(<span class="hljs-built_in">i</span>==<span class="hljs-number">0</span>?costs[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]:res[<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>][tmp2]+costs[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]);            &#125;            <span class="hljs-keyword">if</span>(a2&lt;<span class="hljs-number">0</span>||res[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>]&lt;res[<span class="hljs-built_in">i</span>][a2])            &#123;                a2=<span class="hljs-built_in">j</span>;                <span class="hljs-keyword">if</span>(a2&lt;<span class="hljs-number">0</span>||res[<span class="hljs-built_in">i</span>][a2]&lt;res[<span class="hljs-built_in">i</span>][a1])                &#123;                    swap(a2,a1);                &#125;            &#125;        &#125;        tmp1=a1;        tmp2=a2;    &#125;    <span class="hljs-keyword">return</span> res[n<span class="hljs-number">-1</span>][tmp1];&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>线性dp</tag>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打家劫舍</title>
    <link href="/2020/07/13/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <url>/2020/07/13/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="打家劫舍1"><a href="#打家劫舍1" class="headerlink" title="打家劫舍1"></a>打家劫舍1</h2><p>递推公式为d0[i]=d1[i-1]+price,<br>d1[i]=max(d1[i-1],d0[i-1]);<br>可以进行空间优化<br><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> rob(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums)     &#123;        <span class="hljs-keyword">if</span>(nums.size()==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> a=nums[<span class="hljs-number">0</span>];        <span class="hljs-built_in">int</span> b=<span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> len=nums.size();        <span class="hljs-built_in">int</span> t;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)        &#123;            t=a;            a=b+nums[i];            b=max(b,t);        &#125;        <span class="hljs-keyword">return</span> max(a,b);    &#125;&#125;;</code></pre></p><h2 id="打家劫舍2"><a href="#打家劫舍2" class="headerlink" title="打家劫舍2"></a>打家劫舍2</h2><p>只需要保证最后一个和第一个不会被同时取到，注意这个不是约瑟夫问题那样可以循环的。所以只需要求两次然后考虑删除第一个和删除最后一个的情况。</p><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//不能来回偷</span>    <span class="hljs-keyword">int</span> len=nums.<span class="hljs-built_in">size</span>();    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res1;    res1.assign(nums.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>, nums.<span class="hljs-built_in">end</span>());    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res2;    res2.assign(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>()<span class="hljs-number">-1</span>);    <span class="hljs-keyword">int</span> a=res2[<span class="hljs-number">0</span>];    <span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> t;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len<span class="hljs-number">-1</span>;i++)    &#123;        t=a;        a=b+res2[i];        b=<span class="hljs-built_in">max</span>(t,b);    &#125;    <span class="hljs-keyword">int</span> res=<span class="hljs-built_in">max</span>(a,b);    a=res1[<span class="hljs-number">0</span>];    b=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len<span class="hljs-number">-1</span>;i++)    &#123;        t=a;        a=b+res1[i];        b=<span class="hljs-built_in">max</span>(t,b);    &#125;    <span class="hljs-keyword">int</span> tt=<span class="hljs-built_in">max</span>(a,b);    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(res,tt);&#125;</code></pre><h2 id="打家劫舍3"><a href="#打家劫舍3" class="headerlink" title="打家劫舍3"></a>打家劫舍3</h2><p>这个结构是树形的，相比数组的要难一些，所以第一种方法就是考虑根节点偷和不偷的情况，然后返回之，我第一次做是用的递归返回的是偷和随便偷不偷，这样是不行的，应该要明确状态。</p><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">dp0</span><span class="hljs-params">(TreeNode* root)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)</span></span>;    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)        <span class="hljs-keyword">return</span> res;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res1=dp0(root-&gt;left);    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res2=dp0(root-&gt;right);    res[<span class="hljs-number">0</span>]=root-&gt;val+res1[<span class="hljs-number">1</span>]+res2[<span class="hljs-number">1</span>];<span class="hljs-comment">//偷这个根节点的选项</span>    res[<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(res1[<span class="hljs-number">0</span>],res1[<span class="hljs-number">1</span>])+<span class="hljs-built_in">max</span>(res2[<span class="hljs-number">0</span>],res2[<span class="hljs-number">1</span>]);<span class="hljs-comment">//不偷的选项</span>    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res=dp0(root);    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(res[<span class="hljs-number">0</span>],res[<span class="hljs-number">1</span>]);&#125;</code></pre><p>事实上确实有一种考虑随便偷不偷的方法的。<br>在区分偷不偷的时候，我们事实上考虑的是偷目前节点加上随便偷不偷孙子节点，以及不偷目前节点，随便偷不偷儿子节点。为了防止超时，用哈希表把求得的信息存起来。<br><pre><code class="hljs coq">unordered_map&lt;TreeNode*,int&gt; m;int dp0(TreeNode* root,unordered_map&lt;TreeNode*,int&gt;&amp; m)&#123;    int value=<span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(root==nullptr)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(m.count(root))        <span class="hljs-keyword">return</span> m[root];    <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">left</span>!=nullptr)        value+=dp0(root-&gt;<span class="hljs-built_in">left</span>-&gt;<span class="hljs-built_in">left</span>,m)+dp0(root-&gt;<span class="hljs-built_in">left</span>-&gt;<span class="hljs-built_in">right</span>,m);    <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">right</span>!=nullptr)        value+=dp0(root-&gt;<span class="hljs-built_in">right</span>-&gt;<span class="hljs-built_in">left</span>,m)+dp0(root-&gt;<span class="hljs-built_in">right</span>-&gt;<span class="hljs-built_in">right</span>,m);    int t=max(root-&gt;val+value,dp0(root-&gt;<span class="hljs-built_in">right</span>,m)+dp0(root-&gt;<span class="hljs-built_in">left</span>,m));    m[root]=t;    <span class="hljs-keyword">return</span> t;&#125;int rob(TreeNode* root) &#123;    <span class="hljs-keyword">if</span>(root==nullptr)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> dp0(root,m);&#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>线性dp</tag>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>股票买卖问题</title>
    <link href="/2020/07/12/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E9%97%AE%E9%A2%98/"/>
    <url>/2020/07/12/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="股票买卖问题1"><a href="#股票买卖问题1" class="headerlink" title="股票买卖问题1"></a>股票买卖问题1</h2><p>当前的最大收益只依赖于之前的最小买入价格。只需要记住到目前为止的最小值，然后可以得到每个位置的收益。O(n)<br><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> <span class="hljs-built_in">max</span>=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> len=prices.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> <span class="hljs-built_in">min</span>=prices[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">if</span>(prices[i]&gt;<span class="hljs-built_in">min</span>)            &#123;                <span class="hljs-keyword">int</span> t=prices[i]-<span class="hljs-built_in">min</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">max</span>&lt;t)                    <span class="hljs-built_in">max</span>=t;            &#125;            <span class="hljs-keyword">else</span>            &#123;                <span class="hljs-built_in">min</span>=prices[i];            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;    &#125;&#125;;</code></pre></p><h2 id="股票买卖问题2"><a href="#股票买卖问题2" class="headerlink" title="股票买卖问题2"></a>股票买卖问题2</h2><p>这个题目朴素的想法就是找到每个峰谷和峰顶，然后求差异获得利润。<br>但是由于可以进行多次交易，那么只要明天比今天价格高就有得赚，就可以进行交易。不需要去找波峰波谷，因为day2-day1+day3-day2 == day3-day1</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-built_in">int</span> maxProfit(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices)     &#123;        <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;        <span class="hljs-built_in">int</span> len=prices.size();        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">if</span>(prices[i]&gt;prices[i<span class="hljs-number">-1</span>])                res+=prices[i]-prices[i<span class="hljs-number">-1</span>];        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre><h2 id="股票买卖问题3"><a href="#股票买卖问题3" class="headerlink" title="股票买卖问题3"></a>股票买卖问题3</h2><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> maxProfit(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices) &#123;    <span class="hljs-built_in">int</span> len=prices.size();    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    vector&lt;<span class="hljs-built_in">int</span>&gt; res1(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);    vector&lt;<span class="hljs-built_in">int</span>&gt; res2(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)        res2[i]=-prices[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)    &#123;        res2[<span class="hljs-number">0</span>]=max(res2[<span class="hljs-number">0</span>],-prices[i]);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>;j++)        &#123;            res1[j]=max(res1[j],res2[j<span class="hljs-number">-1</span>]+prices[i]);            res2[j]=max(res1[j]-prices[i],res2[j]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res1[<span class="hljs-number">2</span>];&#125;</code></pre><h2 id="股票买卖问题4"><a href="#股票买卖问题4" class="headerlink" title="股票买卖问题4"></a>股票买卖问题4</h2><p>买卖k次</p><p>当前处于第几天；<br>已经交易的次数；<br>手头是否持有股票；<br>即根据手头是否持有股票，我们定义两个二维数组来定义状态：</p><p>dp0[i][j]: 第i天结束，已有j次买卖，手头没有股票时的最大利润<br>dp1[i][j]: 第i天结束，已有j次买卖，手头有股票时的最大利润<br>因此，dp0[0][j]对于所有j都要初始化为0，而dp1[0][j]对于所有j都要初始化为-prices[i]。如果我们将dp0所有值都求出来了，那么很明显dp0[n-1][k]就是在最后一天结束时已进行k次交易且手头无股票时的最大收益，也即返回结果。 先看初始状态:</p><p>当i==0 &amp;&amp; j&gt;=0: dp0[0][j] = 0, dp1[0][j] = -prices[0];<br>当i&gt;0 &amp;&amp; j==0: dp0[i][0] = 0, dp1[i][0] = max(dp1[i-1][0], -prices[i]);<br>再来考虑状态转移方程，当i&gt;0且j&gt;0时有</p><p>dp0[i][j] = max(dp0[i-1][j], dp1[i-1][j-1] + prices[i]) # 保持 or 卖出<br>dp1[i][j] = max(dp1[i-1][j], dp0[i-1][j] - prices[i]) # 保持 or 买入<br>有了状态定义及转移方程，剩下就好办了。</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> maxProfit(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices) &#123;    <span class="hljs-built_in">int</span> k=<span class="hljs-number">2</span>;<span class="hljs-comment">//可以改变k值</span>    <span class="hljs-built_in">int</span> len=prices.size();    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    vector&lt;<span class="hljs-built_in">int</span>&gt; a(k+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; res1(len,a);<span class="hljs-comment">//没有股票在手中</span>    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; res2(len,a);<span class="hljs-comment">//有股票在手中</span>    <span class="hljs-built_in">int</span> min=prices[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)        res2[<span class="hljs-number">0</span>][i]=-prices[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)    &#123;        res2[i][<span class="hljs-number">0</span>]=max(res2[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],-prices[i]);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)        &#123;            res1[i][j]=max(res1[i<span class="hljs-number">-1</span>][j],res2[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+prices[i]);            res2[i][j]=max(res1[i<span class="hljs-number">-1</span>][j]-prices[i],res2[i<span class="hljs-number">-1</span>][j]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res1[len<span class="hljs-number">-1</span>][k];&#125;</code></pre><p>但是这个效率不高，可以知道，当k&gt;2/n的时候。就是买卖无数次了。<br>并且可以进行空间优化。<br><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> maxProfit(<span class="hljs-built_in">int</span> k, vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices) &#123;    <span class="hljs-built_in">int</span> len=prices.size();    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>||k==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(k&gt;len/<span class="hljs-number">2</span>)    &#123;        <span class="hljs-built_in">int</span> result=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">if</span>(prices[i]&gt;prices[i<span class="hljs-number">-1</span>])                result+=prices[i]-prices[i<span class="hljs-number">-1</span>];        &#125;        <span class="hljs-keyword">return</span> result;    &#125;    vector&lt;<span class="hljs-built_in">int</span>&gt; res1(k+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);    vector&lt;<span class="hljs-built_in">int</span>&gt; res2(k+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);    <span class="hljs-built_in">int</span> min=prices[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)        res2[i]=-prices[<span class="hljs-number">0</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)    &#123;        res2[<span class="hljs-number">0</span>]=max(res2[<span class="hljs-number">0</span>],-prices[i]);        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)        &#123;            res1[j]=max(res1[j],res2[j<span class="hljs-number">-1</span>]+prices[i]);            res2[j]=max(res1[j]-prices[i],res2[j]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res1[k];&#125;</code></pre></p><h2 id="股票买卖问题5"><a href="#股票买卖问题5" class="headerlink" title="股票买卖问题5"></a>股票买卖问题5</h2><p>这里需要注意的就是当不持股，不在冷冻期的可能就是，上一个是冷冻期，然后这一天啥也没干，还有可能就是直接就是上一天。<br><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> maxProfit(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices) &#123;    <span class="hljs-built_in">int</span> len=prices.size();    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    vector&lt;<span class="hljs-built_in">int</span>&gt; res1(len,<span class="hljs-number">0</span>);<span class="hljs-comment">//不持股，不在冷冻期</span>    vector&lt;<span class="hljs-built_in">int</span>&gt; res2(len,<span class="hljs-number">0</span>);<span class="hljs-comment">//持股，不在冷冻期</span>    res2[<span class="hljs-number">0</span>]=-prices[<span class="hljs-number">0</span>];    vector&lt;<span class="hljs-built_in">int</span>&gt; res3(len,<span class="hljs-number">0</span>);<span class="hljs-comment">//不持股，在冷冻期</span>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)    &#123;        res1[i]=max(res1[i<span class="hljs-number">-1</span>],res3[i<span class="hljs-number">-1</span>]);        res2[i]=max(res1[i<span class="hljs-number">-1</span>]-prices[i],res2[i<span class="hljs-number">-1</span>]);        res3[i]=res2[i<span class="hljs-number">-1</span>]+prices[i];    &#125;    <span class="hljs-keyword">return</span> max(res3[len<span class="hljs-number">-1</span>],res1[len<span class="hljs-number">-1</span>]);&#125;优化空间    <span class="hljs-built_in">int</span> maxProfit(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices) &#123;    <span class="hljs-built_in">int</span> len=prices.size();    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> res1=<span class="hljs-number">0</span>;<span class="hljs-comment">//不持股，不在冷冻期</span>    <span class="hljs-built_in">int</span> res2=-prices[<span class="hljs-number">0</span>];<span class="hljs-comment">//持股，不在冷冻期</span>    <span class="hljs-built_in">int</span> res3=<span class="hljs-number">0</span>;<span class="hljs-comment">//不持股，在冷冻期</span>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)    &#123;        <span class="hljs-built_in">int</span> a=res1;        <span class="hljs-built_in">int</span> b=res2;        res1=max(a,res3);        res2=max(a-prices[i],b);        res3=b+prices[i];    &#125;    <span class="hljs-keyword">return</span> max(res3,res1);&#125;</code></pre></p><h2 id="股票买卖问题6"><a href="#股票买卖问题6" class="headerlink" title="股票买卖问题6"></a>股票买卖问题6</h2><p>也是和之前的类似，选取两个状态，持有股票，不持有股票，在卖出时还需要减去手续费。</p><pre><code class="hljs excel"><span class="hljs-built_in">int</span> maxProfit(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; prices, <span class="hljs-built_in">int</span> fee) &#123;    <span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>=prices.size();    <span class="hljs-built_in">int</span> res1=<span class="hljs-number">0</span>;    <span class="hljs-built_in">int</span> res2=-prices[<span class="hljs-number">0</span>];    <span class="hljs-built_in">int</span> <span class="hljs-built_in">t</span>;    for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)    &#123;        <span class="hljs-built_in">t</span>=res1;        res1=<span class="hljs-built_in">max</span>(res1,res2+prices[i]-fee);        res2=<span class="hljs-built_in">max</span>(res2,<span class="hljs-built_in">t</span>-prices[i]);    &#125;    return res1;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>线性dp</tag>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划题型总结</title>
    <link href="/2020/07/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2020/07/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>因为动态规划毕竟要满足：</p><p>阶段性<br>无后效性<br>子问题重叠性<br>因此，能够利用DP来解决的问题实际上是有限的，大部分题目都是针对现有的模型的一些变种，改改题目描述，或者加点限制条件。所以要想攻克DP题目，最根本的就是要充分理解几个常见的DP模型。而要充分理解常见经典DP模型，就需要通过大量的做题和总结，而且二者不可偏废。通过做题进行思考和量的积累，通过总结加深理解和融会贯通进而完成质的提升。</p><p>动态规划是求解一个最优化问题，而最核心的思想就是：</p><p>分而治之<br>想办法记录下中间的计算结果避免重复计算<br>解一道DP题目，先问自己几个问题：</p><p>我需要最少哪些数据，然后经过一些比较就能得出最终结果？<br>这些数据的求解是否可以用同样的方法分而治之？<br>过程中的运算结果如何保存复用？<br>当然以上内容看起来比较抽象，虽然它深刻地揭露了动态规划的本质，但是如果临场要去想明白这些问题，还是有些难度。如果只是针对比赛和面试，就像前面说的，DP题型是有限的。只要刷的题目足够多，总结出几个经典模型，剩下的都是些变种+优化而已。</p><p>一般来说，动态规划可以分成4个大类:</p><p>线性DP<br>数位dp<br>概率dp等<br>区间DP<br>树型DP<br>背包<br>线性DP就是阶段非常线性直观的模型，比如：最长（上升|下降）序列，最长公共子序列(LCS)等，也有一些简单的递推，甚至都算不上是经典模型。</p><h1 id="线性dp"><a href="#线性dp" class="headerlink" title="线性dp"></a>线性dp</h1><h2 id="最长上升序列"><a href="#最长上升序列" class="headerlink" title="最长上升序列"></a>最长上升序列</h2><p>最长上升序列是一个非常经典的线性模型。说它是个模型，是因为它是一类题的代表，很多题目都只是换个说法，或者要求在这基础上进一步优化而已。最长上升序列最基础的转移方程就是f[i] = max{f[j]}+1 (a[i] &gt; a[j]),f[i]表示一定要以a[i]结尾的序列，最长长度是多少。很显然就是在前面找到一个最大的f[j]同时满足a[j]&lt;a[i]。因此是N^2的时间复杂度和N的空间复杂度。这种方法是最朴素直观的，一定要理解。它非常简单，因此很少有题目直接能够这么做。大部分相关题目需要进一步优化，也就是有名的单调队列优化，能够把复杂度优化到nlogn。<br>相关题目比如：</p><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300. 最长上升子序列</a>，裸题，但是要击败100%的话，需要单调队列优化。</p><p><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">354. 俄罗斯套娃信封问题</a>，这道题还是hard。之前的最长上升序列是一维的，这道题是二维的上升序列，满足Ax&lt;Bx且Ay&lt;By，才可以构成上升序列。那么我们可以根据x进行排序，然后对y求解最长上升子序列。但是这里有个地方需要注意，因为x必须要严格升序，排序之后可能存在(1,1) (1,2) (1,3) (2,4)这样的序列，如果对y进行求解上升序列，会得到4，但是实际应该只是2。为了避免这个问题，在排序时，如果x相等，则y按照降序排列，就可以规避这个问题。</p><p><a href="https://www.luogu.com.cn/problem/P1091" target="_blank" rel="noopener">合唱队形</a>，这道题是要求一个形如1 3 4 7 9 8 6 5 2这样的子序列。先上升再下降，最后求最长的长度。其实解决办法也很简单，先从左到右求出所有的最长上升序列asc[i]，再从右到左求出所有的最长上升序列reverseAcc[i]，最大值就是max(asc[i]+reverseAcc[i])。对算法要能够灵活运用。</p><h2 id="LCS-最长公共子序列"><a href="#LCS-最长公共子序列" class="headerlink" title="LCS 最长公共子序列"></a><a href="1143.最长公共子序列">LCS 最长公共子序列</a></h2><p>最长公共子序列也是线性DP中的一种比较常见的模型。说它是一种“模型”其实有点拔高了，其实它就是一类比较常见的题目。很多题目都是在LCS的基础上进行简单的扩展，或者仅仅就是换一个说法而已。<br>求两个数组的最长公共子序列，最直观地做法就是：设f[i][j]表示S[..i]和T[..j]的最长公共子序列，则有:</p><p>f[i][j] = f[i-1][j-1] + 1 …… S[i]==T[j]<br>f[i][j] = max(f[i-1][j], f[i][j-1]) …… S[i]≠T[j]<br>这个转移方程也非常好理解，时间复杂度是N^2，空间复杂度也是N^2。不过仔细观察你可以发现，当我们计算第i行时只与i-1和i行有关。因此我们可以利用01滚动来优化空间复杂度为2N。<br>相关题目：</p><p><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">1143. Longest Common Subsequence</a>：这道题就是裸的LCS</p><p><a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/" target="_blank" rel="noopener">583. Delete Operation for Two Strings</a>：两个字符串要删除成一样的，所以先找出最长公共序列，然后剩下的都删了。</p><p><a href="https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/" target="_blank" rel="noopener">718. Maximum Length of Repeated Subarray</a>：这道题其实本质上不是LCS，它是寻找最长子数组，而不是子序列（子数组要求连续）。需要搞清它们的区别。找子数组就更简单了，因为必须连续，所以f[i][j] = f[i-1][j-1]+1 : 0 ? S[i]==T[j]。通过倒序枚举能够把空间优化为O(N)。</p><p><a href="https://leetcode-cn.com/problems/shortest-common-supersequence/" target="_blank" rel="noopener">1092. Shortest Common Supersequence</a>：这道题是hard，实际上也不算很hard。其实就是找到最长公共子序列，然后，对于A字符串，把除了LCS以外的字符插入到对应的位置；对于B字符串也做同样的操作。这道题大家需要掌握一个新姿势，就是除了求最长公共子序列有多长，还要会打印最长公共子序列（follow up：打印所有可能的最长公共子序列）。同时，要把剩余的字符插入到对应的位置其实可以想办法把原字符串按照LCS切分成k+1段，比如对于字符串A abcxdef，其lcs为bde，那么我们可以把原字符串切成4段 a bcx d ef，同样对于B字符串，也能切成4段，然后对应插入构成新字符串即可，需要注意的就是，从第1段开始，第一个字符是lcs字符，所以只插一次。</p><h2 id="股票买卖问题"><a href="#股票买卖问题" class="headerlink" title="股票买卖问题"></a><a href="股票买卖问题">股票买卖问题</a></h2><ol><li><p>Best Time to Buy and Sell Stock：当前的最大收益只依赖于之前的最小买入价格。因此只需要一个变量保存截至目前的最低价即可，每次更新最大收益。</p></li><li><p>Best Time to Buy and Sell Stock II：由于可以进行多次交易，那么只要明天比今天价格高就有得赚，就可以进行交易。不需要去找波峰波谷，因为day2-day1+day3-day2 == day3-day1。</p></li></ol><p>可以买卖两次股票<br>三个状态，已经买卖2次，持有 不持有股票，第k天为结束天</p><p>可以买卖k次股票<br>三个状态，已经买卖k次，持有 不持有股票，第k天为结束天</p><p>卖出股票之后有冷冻期<br>选择三个状态，持有股票，不持有股票，处于冷冻期</p><p>卖出股票之后有手续费<br>选择两个状态，持有股票，不持有股票</p><h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a><a href="打家劫舍">打家劫舍</a></h2><h2 id="粉刷房子"><a href="#粉刷房子" class="headerlink" title="粉刷房子"></a><a href="粉刷房子">粉刷房子</a></h2><h2 id="背包九讲"><a href="#背包九讲" class="headerlink" title="背包九讲"></a><a href="背包九讲">背包九讲</a></h2><h2 id="图形问题"><a href="#图形问题" class="headerlink" title="图形问题"></a><a href="矩阵动态规划">图形问题</a></h2><h1 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a><a href="区间dp">区间dp</a></h1><h1 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a><a href="树形dp">树形dp</a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1143. 最长公共子序列</title>
    <link href="/2020/07/12/1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2020/07/12/1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p>最长公共子序列也是线性DP中的一种比较常见的模型。说它是一种“模型”其实有点拔高了，其实它就是一类比较常见的题目。很多题目都是在LCS的基础上进行简单的扩展，或者仅仅就是换一个说法而已。<br>求两个数组的最长公共子序列，最直观地做法就是：设f[i][j]表示S[..i]和T[..j]的最长公共子序列，则有:</p><p>f[i][j] = f[i-1][j-1] + 1 …… S[i]==T[j]<br>f[i][j] = max(f[i-1][j], f[i][j-1]) …… S[i]≠T[j]<br>这个转移方程也非常好理解，时间复杂度是N^2，空间复杂度也是N^2。不过仔细观察你可以发现，当我们计算第i行时只与i-1和i行有关。因此我们可以利用01滚动来优化空间复杂度为2N。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:<span class="hljs-comment">//使用了2N的空间的动态优化</span>    <span class="hljs-built_in">int</span> longestCommonSubsequence(<span class="hljs-built_in">string</span> text1, <span class="hljs-built_in">string</span> text2)     &#123;        <span class="hljs-built_in">int</span> len1=text1.size();        <span class="hljs-built_in">int</span> len2=text2.size();        vector&lt;<span class="hljs-built_in">int</span>&gt; a1(len2+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);        vector&lt;<span class="hljs-built_in">int</span>&gt; a2(len2+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);        <span class="hljs-built_in">int</span> flag=<span class="hljs-number">2</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len1;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;len2;j++)            &#123;                <span class="hljs-keyword">if</span>(text1[i]==text2[j])                &#123;                    <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">2</span>)                        a2[j+<span class="hljs-number">1</span>]=a1[j]+<span class="hljs-number">1</span>;                    <span class="hljs-keyword">else</span>                        a1[j+<span class="hljs-number">1</span>]=a2[j]+<span class="hljs-number">1</span>;                &#125;                <span class="hljs-keyword">else</span>                &#123;                    <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">2</span>)                        a2[j+<span class="hljs-number">1</span>]=max(a2[j],a1[j+<span class="hljs-number">1</span>]);                    <span class="hljs-keyword">else</span>                        a1[j+<span class="hljs-number">1</span>]=max(a2[j+<span class="hljs-number">1</span>],a1[j]);                &#125;            &#125;            flag=-flag;        &#125;        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">2</span>)            <span class="hljs-keyword">return</span> a1[len2];        <span class="hljs-keyword">else</span>            <span class="hljs-keyword">return</span> a2[len2];    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>线性dp</tag>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>300. 最长上升子序列</title>
    <link href="/2020/07/12/300.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2020/07/12/300.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="最长上升序列"><a href="#最长上升序列" class="headerlink" title="最长上升序列"></a>最长上升序列</h2><p>最长上升序列是一个非常经典的线性模型。说它是个模型，是因为它是一类题的代表，很多题目都只是换个说法，或者要求在这基础上进一步优化而已。最长上升序列最基础的转移方程就是f[i] = max{f[j]}+1 (a[i] &gt; a[j]),f[i]表示一定要以a[i]结尾的序列，最长长度是多少。很显然就是在前面找到一个最大的f[j]同时满足a[j]&lt;a[i]。因此是N^2的时间复杂度和N的空间复杂度。这种方法是最朴素直观的，一定要理解。它非常简单，因此很少有题目直接能够这么做。大部分相关题目需要进一步优化，也就是有名的单调队列优化，能够把复杂度优化到nlogn。</p><p>说单调队列优化之前必须明白一个贪心策略。因为要求的是最长上升序列，那么很显然长度为k的上升序列的最大值（最后一个数）越小越好，这样后面的数才有更大的概率比它大。如果我们记录下来不同长度的上升序列的最后一个数能达到的最小值，那么对于后续每个数t，它要么能放到某个长度为y的序列之后，组成长度为y+1的上升序列，要么放到某个长度为x的序列后面，把长度为x+1的序列的最大值替换成t。同时我们可以发现，如果x&lt;y，那么长度为x序列的最后一个数一定比长度为y的序列最后一个数小。因此这个上升序列我们可以用一个数组来维护（所谓的单调队列），数组下标就代表序列长度。opt[i]=t表示长度为i的上升序列最后一个数最小是t。那么当我们在面对后续某个数x时，可以对单调队列opt进行二分，把它插到对应的位置。因此总体复杂度就是NlogN。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-comment">// int lengthOfLIS(vector&lt;int&gt;&amp; nums) </span>    <span class="hljs-comment">// &#123;//dp，不用单调队列,递推方程res[i]=max(res[j])+1 (nums[j]&lt;nums[i])</span>    <span class="hljs-comment">//     int len=nums.size();</span>    <span class="hljs-comment">//     if(len==0)</span>    <span class="hljs-comment">//         return 0;</span>    <span class="hljs-comment">//     vector&lt;int&gt; res(len,0);</span>    <span class="hljs-comment">//     res[0]=1;</span>    <span class="hljs-comment">//     int result=1;</span>    <span class="hljs-comment">//     for(int i=1;i&lt;len;i++)</span>    <span class="hljs-comment">//     &#123;</span>    <span class="hljs-comment">//         int maxnum=1;</span>    <span class="hljs-comment">//         for(int j=0;j&lt;i;j++)</span>    <span class="hljs-comment">//         &#123;</span>    <span class="hljs-comment">//             if(res[j]+1&gt;maxnum&amp;&amp;nums[j]&lt;nums[i])</span>    <span class="hljs-comment">//                 maxnum=res[j]+1;  </span>    <span class="hljs-comment">//         &#125;</span>    <span class="hljs-comment">//         res[i]=maxnum;</span>    <span class="hljs-comment">//         if(res[i]&gt;result)</span>    <span class="hljs-comment">//             result=res[i];</span>    <span class="hljs-comment">//     &#125;</span>    <span class="hljs-comment">//     return result;</span>    <span class="hljs-comment">// &#125;</span>        <span class="hljs-built_in">int</span> lengthOfLIS(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums)     &#123;<span class="hljs-comment">//dp，用单调队列,递推方程res[i]=max(res[j])+1 (nums[j]&lt;nums[i])</span>        <span class="hljs-built_in">int</span> len=nums.size();        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        vector&lt;<span class="hljs-built_in">int</span>&gt; res;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">if</span>(res.size()==<span class="hljs-number">0</span>||res[res.size()<span class="hljs-number">-1</span>]&lt;nums[i])                res.push_back(nums[i]);            <span class="hljs-keyword">else</span> <span class="hljs-comment">//if(res[res.size()-1]&lt;nums[i])</span>            &#123;                <span class="hljs-built_in">int</span> p=BinSearch(res,nums[i]);                res[p]=nums[i];            &#125;        &#125;        <span class="hljs-keyword">return</span> res.size();    &#125;    <span class="hljs-built_in">int</span> BinSearch(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; a,<span class="hljs-built_in">int</span> b)    &#123;        <span class="hljs-built_in">int</span> len=a.size();        <span class="hljs-built_in">int</span> l=<span class="hljs-number">0</span>,r=len<span class="hljs-number">-1</span>;        <span class="hljs-built_in">int</span> mid=l+(r-l)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">while</span>(a[mid]!=b)        &#123;            <span class="hljs-keyword">if</span>(r==l)                <span class="hljs-keyword">return</span> r;            <span class="hljs-keyword">if</span>(a[mid]&lt;b)            &#123;                l=mid+<span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">else</span>             &#123;                r=mid;            &#125;            mid=mid=l+(r-l)/<span class="hljs-number">2</span>;        &#125;        <span class="hljs-keyword">return</span> mid;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>线性dp</tag>
      
      <tag>动态规划</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>验证集和测试集的区别</title>
    <link href="/2020/07/03/%E9%AA%8C%E8%AF%81%E9%9B%86%E5%92%8C%E6%B5%8B%E8%AF%95%E9%9B%86%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/07/03/%E9%AA%8C%E8%AF%81%E9%9B%86%E5%92%8C%E6%B5%8B%E8%AF%95%E9%9B%86%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="验证集和测试集"><a href="#验证集和测试集" class="headerlink" title="验证集和测试集"></a>验证集和测试集</h2><div class="table-container"><table><thead><tr><th>类别</th><th>验证集</th><th>测试集</th></tr></thead><tbody><tr><td>是否被训练到</td><td>否</td><td>否</td></tr><tr><td>作用</td><td>用于调整超参数</td><td>用于验证泛化能力</td></tr><tr><td>使用次数</td><td>多次使用，以不断调参</td><td>仅仅一次使用</td></tr><tr><td>缺陷</td><td>模型在一次次重新手动调参并继续训练后所逼近的验证集，可能只代表一部分非训练集，导致最终训练好的模型泛化性能不够</td><td>测试集为了具有泛化代表性，往往数据量比较大，测试一轮要很久，所以往往只取测试集的其中一小部分作为训练过程中的验证集</td></tr><tr><td>互相转化</td><td>验证集具有足够泛化性（一般来说，如果验证集足够大到包括大部分非训练集时，也等于具有足够泛化性了）</td><td>验证集具有足够泛化性时，测试集就没有存在的必要了</td></tr><tr><td>类比</td><td>校内答辩（如果校内答辩比多校联合答辩还有泛化性说服力，那么就没有必要再搞个多校联合答辩了）</td><td>多校联合答辩</td></tr></tbody></table></div><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>说到底：<br>验证集是一定需要的；<br>如果验证集具有足够泛化代表性，是不需要再整出什么测试集的；<br>整个测试集往往就是为了在验证集只是非训练集一个小子集的情况下，好奇一下那个靠训练集（训练）和验证集（调参）多次接力训练出来的模型是不是具有了泛化性能，因而加试一下图个确定。</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>验证机和测试机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>166. 分数到小数</title>
    <link href="/2020/06/12/166.%20%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/"/>
    <url>/2020/06/12/166.%20%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="166-分数到小数"><a href="#166-分数到小数" class="headerlink" title="166. 分数到小数"></a>166. 分数到小数</h2><p>这道题我认为需要注意的有几个地方</p><p>第一个地方在于除法如何计算，这里我选择的方法是当被除数相同的时候认为是循环小数。</p><p>第二个地方在于结果可能有负数，负数的求模和正数有所不同，需要注意。负数求模是a-(a/b)*b的，有个时候因此会有正负的区分。</p><p>第三个地方在于数字溢出的问题，a=-2147483648, b=-1,a*b是会溢出的，因为会先转成一个整形的数，因此需要转一下long.</p><p>第四个地方是在判断两个数是否是同号的时候最好采用异或的方法，而不要采用相乘符号的方法，这样会导致溢出，还有一个我以前没注意的地方就是<br>异或等位运算的优先级是要低于等于符号的，因此最好加上括号。</p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">fractionToDecimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numerator, <span class="hljs-keyword">int</span> denominator)</span> </span>&#123;        <span class="hljs-keyword">long</span> a1=<span class="hljs-keyword">long</span>(numerator)%denominator;        <span class="hljs-keyword">long</span> a2=<span class="hljs-keyword">long</span>(numerator)/denominator;        <span class="hljs-keyword">if</span>(a1==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> to_string(a2);        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;            <span class="hljs-keyword">int</span> quo=<span class="hljs-built_in">abs</span>(a2);            <span class="hljs-built_in">string</span> res=<span class="hljs-string">""</span>;            <span class="hljs-keyword">if</span>((numerator^denominator)&lt;<span class="hljs-number">0</span>)                &#123;                    res=res+<span class="hljs-string">"-"</span>;                    i++;                &#125;            res=res+to_string(quo)+<span class="hljs-string">"."</span>;            i+=to_string(quo).<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;            <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;            numerator=<span class="hljs-built_in">abs</span>(a1);            <span class="hljs-keyword">while</span>(numerator!=<span class="hljs-number">0</span>)            &#123;                numerator=<span class="hljs-built_in">abs</span>(numerator);                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.<span class="hljs-built_in">find</span>(numerator)==<span class="hljs-built_in">map</span>.<span class="hljs-built_in">end</span>())                &#123;                    <span class="hljs-built_in">map</span>[numerator]=i;                    i++;                &#125;                <span class="hljs-keyword">else</span>                &#123;                    <span class="hljs-built_in">string</span> tmp=res.substr(<span class="hljs-built_in">map</span>[numerator]+<span class="hljs-number">2</span>);                    <span class="hljs-built_in">string</span> tmp1=res.substr(<span class="hljs-number">0</span>,<span class="hljs-built_in">map</span>[numerator]+<span class="hljs-number">2</span>);                    res=tmp1+<span class="hljs-string">"("</span>+tmp+<span class="hljs-string">")"</span>;                    <span class="hljs-keyword">return</span> res;                &#125;                <span class="hljs-keyword">long</span>  ttt=numerator;                ttt*=<span class="hljs-number">10</span>;                <span class="hljs-keyword">long</span>  a=<span class="hljs-built_in">abs</span>(ttt/denominator);                <span class="hljs-keyword">long</span>  b=<span class="hljs-built_in">abs</span>(ttt%denominator);                res=res+to_string(a);                numerator=b;            &#125;            <span class="hljs-keyword">return</span> res;        &#125;    &#125;&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>除法</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2020/06/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式学习"><a href="#设计模式学习" class="headerlink" title="设计模式学习"></a>设计模式学习</h1><p>[toc]</p><h3 id="设计模式和原则"><a href="#设计模式和原则" class="headerlink" title="设计模式和原则"></a>设计模式和原则</h3><h4 id="单一职责的原则"><a href="#单一职责的原则" class="headerlink" title="单一职责的原则"></a>单一职责的原则</h4><p>简单的说就是软件模块应该只有一个被修改的理由。例如Spring中，我们需要有dao 层和service层，而不是把它放在一起，这样后面数据库增加字段，或者业务逻辑<br>更改的时候就不需要修改很多东西，更容易维护。</p><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>就是在一个模块完成的之后，就不要去改变它，最好是通过继承和多态来增加功能。所以开闭就是，对外的拓展开放，对外的修改闭合。</p><h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>简单的说就是尽量不要重写父类的方法，最好是只新增功能，子类可以拓展父类的功能，但是不能改变</p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>例如几维鸟虽然生物学上是鸟，但是不会飞，如果在计算飞行的一些行为的时候，设计成继承鸟类，最后会出现错误，因此最好仔细考虑他们的继承关系，去除继承关系。</p><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>接口隔离原则（Interface Segregation Principle，ISP）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。</p><p>要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p><p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：<br>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。<br>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</p><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p><p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。</p><p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。</p><p>在实际编程中只要遵循以下4点，就能在项目中满足这个规则。<br>每个类尽量提供接口或抽象类，或者两者都具备。<br>变量的声明类型尽量是接口或者是抽象类。<br>任何类都不应该从具体类派生。<br>使用继承时尽量遵循里氏替换原则。</p><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ART算法实现与理解</title>
    <link href="/2020/06/03/ART%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <url>/2020/06/03/ART%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>这两个图显示了算法的原理，整体的几何意义也较为容易理解</p><p><img src="/images/ART1.png" alt><br><img src="/images/ART2.png" alt><br><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<span class="hljs-attribute">def</span> ART_My( A, b, X<span class="hljs-number">0</span>, e<span class="hljs-number">0</span>):    <span class="hljs-attribute">e</span>=e<span class="hljs-number">0</span>+<span class="hljs-number">1</span>    <span class="hljs-attribute">i</span>=<span class="hljs-number">0</span>    <span class="hljs-attribute">while</span>(e&gt;e<span class="hljs-number">0</span>):        <span class="hljs-attribute">tmp</span>=((A[i]@X<span class="hljs-number">0</span>-b[i])/(np.linalg.norm(A[i]))*(A[i].T/np.linalg.norm(A[i])))        <span class="hljs-attribute">X</span>=X<span class="hljs-number">0</span>-np.reshape(tmp,(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))        <span class="hljs-attribute">e</span>=np.linalg.norm(X-X<span class="hljs-number">0</span>)        <span class="hljs-attribute">X0</span>=X        <span class="hljs-attribute">i</span>=(i+<span class="hljs-number">1</span>)%np.shape(A)[<span class="hljs-number">0</span>]    <span class="hljs-attribute">print</span>(e)    <span class="hljs-attribute">return</span> X<span class="hljs-number">0</span><span class="hljs-attribute">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-attribute">A</span>=np.array([[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>]])    <span class="hljs-attribute">b</span>=np.array([[<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>]])    <span class="hljs-attribute">e0</span>=<span class="hljs-number">0</span>.<span class="hljs-number">000001</span>    <span class="hljs-attribute">X0</span>=np.array([[<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>]])    <span class="hljs-attribute">X</span>=ART_My(A,b,X<span class="hljs-number">0</span>,e<span class="hljs-number">0</span>)    <span class="hljs-attribute">print</span>((X))    </code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>ART</tag>
      
      <tag>医学图像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数间隔和几何间隔</title>
    <link href="/2020/05/21/%E5%87%BD%E6%95%B0%E9%97%B4%E9%9A%94%E5%92%8C%E5%87%A0%E4%BD%95%E9%97%B4%E9%9A%94/"/>
    <url>/2020/05/21/%E5%87%BD%E6%95%B0%E9%97%B4%E9%9A%94%E5%92%8C%E5%87%A0%E4%BD%95%E9%97%B4%E9%9A%94/</url>
    
    <content type="html"><![CDATA[<p>对同一个超平面，通过比例缩放w和b，函数间隔也会同比例变化。也就是说，对于一个成功划分正负实例的超平面（不一定最优），该平面固定，但是通过缩放w和b，可以使其function margin取任何正值。而我们的目标是找到具有最大margin的超平面。显然通过最大化函数间隔没有意义，因为任何成功划分训练实例的超平面都可以使函数间隔无限大。我们注意到，对一个超平面，函数间隔与∥w∥的比值保持不变，也就是说几何间隔与超平面关联。所以，我们目标是最大化几何间隔，而且我们可以令函数间隔为1，然后最小化∥w∥达到最大化几何间隔目的。</p><p>SVM是通过超平面将样本分为两类。在超平面wx+b确定的情况下，||wx+b||可以相对地表示点距离超平面的远近。对于两类分类问题，如果wx+b&gt;0，可视为在平面上方<br>，则的类别被判定为1；否则判定为-1。所以样本点与超平面之间的函数间隔定义为y(wx+b),但是该定义存在问题：即w和x同时缩小或放大M倍后，超平面并没有变化，但是函数间隔却变化了。w是法向量，所以，需要将w的大小固定,使得函数间隔固定。这时的间隔也就是几何间隔 。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SVM</tag>
      
      <tag>函数间隔和几何间隔</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大端和小端</title>
    <link href="/2020/05/20/%E5%A4%A7%E7%AB%AF%E5%92%8C%E5%B0%8F%E7%AB%AF/"/>
    <url>/2020/05/20/%E5%A4%A7%E7%AB%AF%E5%92%8C%E5%B0%8F%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>字节存储顺序主要分为大端序（Big-endian）和小端序（Little-endian），区别如下<br>Big-endian：高位字节存入低地址，低位字节存入高地址<br>Little-endian：低位字节存入低地址，高位字节存入高地址<br>一般来说，x86系列CPU都是Little-endian字节序，PowerPC通常是Big-endian字节序。</p><p>因为网络协议也都是采用Big-endian方式传输数据的，所以有时也把Big-endian方式称为网络字节序</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>218. 天际线问题</title>
    <link href="/2020/05/20/218.%20%E5%A4%A9%E9%99%85%E7%BA%BF%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/20/218.%20%E5%A4%A9%E9%99%85%E7%BA%BF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题的求解方法一"><a href="#问题的求解方法一" class="headerlink" title="问题的求解方法一"></a>问题的求解方法一</h2><p>其实我们在题目标签看到了Line Sweep，[ 线扫描或扫描线 ] ，扫描线可以想象成一条向右扫过平面的竖直线，也是一个算法，一般是玩图形学的。</p><p>接着上面的步骤，可以通过扫描线算法将两个关键点集合进行合并。</p><p>如下图，扫描线从两个集合的起始点，同时向右移动，接触到第一个关键点，则判断这一个关键点是不是满足天际线的，如果是，则将这个关键点添加到“父”集合中；如果不是，则继续同时移动到下一个关键点。</p><p>但如何判断是否是属于“父”集合中的关键点呢？可以创建两个集合（“子”）的目前高度，然后多方角度找到满足关键点的条件。</p><p>扫描线移到[2 10]关键点时，10要大于rpre的，可以满足；</p><p>扫描线移到[3 15]关键点时，lpre此时目前的高度为10，而15要大于10的，可以满足；</p><p>扫描线移到[7 10]关键点时，rpre大于lpre可以满足，反之就不满足；</p><p>接着有一个集合已经遍历完了，剩下的集合的关键点肯定是满足的，因为没有其它的集合可以阻挡到这个集合，所以直接就是满足。</p><p>这个求解方法中的归并的写法比我以前写的要简洁一些，值得学习。<br>这个问题的求解方法的重点在于合并两个点，<br>合并过程中首先选择一个集合的小的，然后判断其与当前另外一个集合的当前值的关于，如果大于则一定可以加进去，因为这个值和自身高度同样也不同<br>如果小于等于并且自身当前高度要大于另外一个集合的当前值，则可以加，否则就被盖住实际是看不到的。</p><p>在相等的情况下，我们应该考虑到相同X的位置的最高位置的不能和和此时的当前的最大位置相同，如果相同实际上是形成了一条直线，是看不到的。</p><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;    <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; getSkyline(<span class="hljs-type">int</span>[][] buildings)     &#123;        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();        <span class="hljs-keyword">if</span>(buildings.length==<span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> res;        <span class="hljs-keyword">return</span> divide(buildings,<span class="hljs-number">0</span>,buildings.length<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; divide(<span class="hljs-type">int</span> [][]buildings,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)    &#123;        List&lt;<span class="hljs-type">Integer</span>&gt; list=<span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();        <span class="hljs-keyword">if</span>(r==l)        &#123;            res.<span class="hljs-keyword">add</span>(Arrays.asList(buildings[l][<span class="hljs-number">0</span>],buildings[l][<span class="hljs-number">2</span>]));            res.<span class="hljs-keyword">add</span>(Arrays.asList(buildings[l][<span class="hljs-number">1</span>],<span class="hljs-number">0</span>));            <span class="hljs-keyword">return</span> res;        &#125;        <span class="hljs-type">int</span> a=l+(r-l)/<span class="hljs-number">2</span>;        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res1=divide(buildings,l,a);        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res2=divide(buildings,a+<span class="hljs-number">1</span>,r);        <span class="hljs-type">int</span> l1=<span class="hljs-number">0</span>;        <span class="hljs-type">int</span> r1=<span class="hljs-number">0</span>;        <span class="hljs-type">int</span> lh=<span class="hljs-number">0</span>,rh=<span class="hljs-number">0</span>;        <span class="hljs-type">int</span> leftX, leftY, rightX, rightY;        <span class="hljs-keyword">while</span>(l1&lt;res1.size()||r1&lt;res2.size())        &#123;            <span class="hljs-keyword">if</span>(l1&gt;=res1.size())                res.<span class="hljs-keyword">add</span>(res2.<span class="hljs-keyword">get</span>(r1++));            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(r1&gt;=res2.size())                res.<span class="hljs-keyword">add</span>(res1.<span class="hljs-keyword">get</span>(l1++));            <span class="hljs-keyword">else</span>            &#123;                leftX = res1.<span class="hljs-keyword">get</span>(l1).<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>); // 不会出现<span class="hljs-keyword">null</span>，可以直接用<span class="hljs-type">int</span>类型                leftY = res1.<span class="hljs-keyword">get</span>(l1).<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>);                rightX = res2.<span class="hljs-keyword">get</span>(r1).<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);                rightY = res2.<span class="hljs-keyword">get</span>(r1).<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>);                <span class="hljs-keyword">if</span>(leftX&gt;rightX)//每次选择一个较小的                &#123;                    <span class="hljs-keyword">if</span>(rightY&gt;lh)                        res.<span class="hljs-keyword">add</span>(res2.<span class="hljs-keyword">get</span>(r1));                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rh&gt;lh)                    &#123;                        res.<span class="hljs-keyword">add</span>(Arrays.asList(rightX,lh));                    &#125;                    rh=rightY;                    r1++;                &#125;                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(leftX&lt;rightX)                &#123;                    <span class="hljs-keyword">if</span>(leftY&gt;rh)                        res.<span class="hljs-keyword">add</span>(res1.<span class="hljs-keyword">get</span>(l1));                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lh&gt;rh)                        res.<span class="hljs-keyword">add</span>(Arrays.asList(leftX,rh));                    lh=leftY;                    l1++;                &#125;                <span class="hljs-keyword">else</span>                &#123;                    <span class="hljs-type">int</span> h=Math.max(lh,rh);                    <span class="hljs-keyword">if</span>(leftY&gt;=rightY&amp;&amp;leftY!=h)                    &#123;                        res.<span class="hljs-keyword">add</span>(res1.<span class="hljs-keyword">get</span>(l1));                    &#125;                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(leftY&lt;=rightY&amp;&amp;rightY!=h)//只要不汇聚到最高点就没问题                    &#123;                        res.<span class="hljs-keyword">add</span>(res2.<span class="hljs-keyword">get</span>(r1));                    &#125;                    lh=leftY;                    rh=rightY;                    l1++;                    r1++;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><p>这个方法是扫面线算法，方法较为巧妙，左上和右上节点分别设置为负数和正数，从左加入右先队列，从右边删除出，<br>然后每次和最大的节点进行比较，不同就加入节点。<br>这里的java的容器的比较器的写法是o2-o1，大于0就是顺序，否则逆序。</p><pre><code class="hljs livescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span>    public List&lt;List&lt;Integer&gt;&gt; getSkyline(int[][] buildings)     &#123;        List&lt;List&lt;Integer&gt;&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();        Set&lt;Pair&lt;Integer,Integer&gt;&gt; pairs=<span class="hljs-keyword">new</span> TreeSet&lt;&gt;<span class="hljs-function"><span class="hljs-params">((o1,o2)-&gt;!o1.getKey().equals(o2.getKey())?o1.getKey()-o2.getKey():o1.getValue()-o2.getValue())</span>;</span><span class="hljs-function">        <span class="hljs-title">for</span><span class="hljs-params">(int[] bu:buildings)</span></span><span class="hljs-function">        &#123;</span><span class="hljs-function">            <span class="hljs-title">pairs</span>.<span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Pair&lt;&gt;(bu[<span class="hljs-number">0</span>],-bu[<span class="hljs-number">2</span>]))</span>;</span><span class="hljs-function">            <span class="hljs-title">pairs</span>.<span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Pair&lt;&gt;(bu[<span class="hljs-number">1</span>],bu[<span class="hljs-number">2</span>]))</span>;</span><span class="hljs-function">        &#125;</span><span class="hljs-function">        <span class="hljs-title">PriorityQueue</span>&lt;<span class="hljs-title">Integer</span>&gt; <span class="hljs-title">queue</span>=<span class="hljs-title">new</span> <span class="hljs-title">PriorityQueue</span>&lt;&gt;<span class="hljs-params">((o1,o2)-&gt;o2-o1)</span>;</span><span class="hljs-function">            <span class="hljs-title">int</span> <span class="hljs-title">prev</span> = 0;</span><span class="hljs-function">    // 遍历</span><span class="hljs-function">    <span class="hljs-title">for</span> <span class="hljs-params">(Pair&lt;Integer, Integer&gt; pair : pairs)</span> &#123;</span><span class="hljs-function">        <span class="hljs-title">if</span> <span class="hljs-params">(pair.getValue() &lt; <span class="hljs-number">0</span>)</span> </span><span class="hljs-function">            <span class="hljs-title">queue</span>.<span class="hljs-title">offer</span><span class="hljs-params">(-pair.getValue())</span>; // 左端点 高度入堆</span><span class="hljs-function">        <span class="hljs-title">else</span> </span><span class="hljs-function">            <span class="hljs-title">queue</span>.<span class="hljs-title">remove</span><span class="hljs-params">(pair.getValue())</span>; // 右端点 高度出堆</span><span class="hljs-function">        <span class="hljs-title">Integer</span> <span class="hljs-title">cur</span> = <span class="hljs-title">queue</span>.<span class="hljs-title">peek</span><span class="hljs-params">()</span> == <span class="hljs-title">null</span> ? 0 : <span class="hljs-title">queue</span>.<span class="hljs-title">peek</span><span class="hljs-params">()</span>; // 获取最大堆的当前顶点，当<span class="hljs-title">null</span>时置为0</span><span class="hljs-function">        <span class="hljs-title">if</span> <span class="hljs-params">(prev != cur)</span> </span><span class="hljs-function">        &#123;</span><span class="hljs-function">            <span class="hljs-title">res</span>.<span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;() </span></span><span class="hljs-function"><span class="hljs-params">            &#123;</span></span><span class="hljs-function"><span class="hljs-params">                &#123;</span></span><span class="hljs-function"><span class="hljs-params">                add(pair.getKey());</span></span><span class="hljs-function"><span class="hljs-params">                add(cur);</span></span><span class="hljs-function"><span class="hljs-params">            &#125;&#125;)</span>;</span><span class="hljs-function">            <span class="hljs-title">prev</span> = <span class="hljs-title">cur</span>;</span><span class="hljs-function">        &#125;</span><span class="hljs-function">    &#125;</span><span class="hljs-function">    <span class="hljs-title">return</span> <span class="hljs-title">res</span>;</span><span class="hljs-function">    &#125;</span><span class="hljs-function">   </span><span class="hljs-function">&#125;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>线段树</tag>
      
      <tag>扫描线算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为啥那么C++pop不返回值</title>
    <link href="/2020/05/20/%E4%B8%BA%E4%BB%80%E4%B9%88C++pop%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <url>/2020/05/20/%E4%B8%BA%E4%BB%80%E4%B9%88C++pop%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="书上的解释"><a href="#书上的解释" class="headerlink" title="书上的解释"></a>书上的解释</h3><p>也就是说，为什么先用top（），然后用pop（）来访问和删除站定的元素，而不是把它们合并一个返回类型T的成员函数。</p><p>这种设计有很好的理由。如果pop（）返回栈顶元素，则必须按值返回，而不是按引用返回。按引用返回是不可行的，因为元素</p><p>在栈中已经不存在，必须在按引用返回之前现将其存储到某个地方。如果选用动态内存，除非动态内存最终被删除，否则将导致内存泄露。</p><p>按照数值返回效率很差，因为它包含对类型T的复制构造函数的调用。让pop（）返回数值将会导致潜在的内存问题或效率很低下，</p><p>因此最好让它什么数值也不返回，而是通过使用top（）来得到栈顶的数值。</p><p>从异常上看<br>这么使用</p><p>Stack stack;</p><p>stack.push(object);</p><p>Object obj=stack.pop() ;</p><p>当我们执行Object obj=stack.pop() 时，Object的构造函数被调用，而这里是可以反生异常的，</p><p>假设这时候发生异常，丢生的栈顶元素就回不去了。</p><p>而在java中pop（）是有返回值的<br>源码是这么写的<br>    int i = size();<br>    Object object = peek();<br>    removeElementAt(i - 1);<br>    return (E)object;</p><pre><code>实质上java进行对象赋值的时候是进行引用的。但是C++是进行一个复制构造函数的调用，</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>pop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>145. 二叉树的后序遍历</title>
    <link href="/2020/05/19/145.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/05/19/145.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>后序遍历的麻烦之处在于不知道现在自己是父节点的左节点还是右节点，只有知道才能决定下一步是访问右节点还是根节点，不知道的情况下就不清楚下一步应该访问弹出的栈元素的本身还是它的右节点。<br>而前序遍历和中序遍历是总是只需要弹出栈中的元素，然后访问其右节点即可或者先访问自己再访问其右节点。</p><p>所以方法有三种：</p><h3 id="开始的话，也是不停的往左子树走，然后直到为-null-，然后如果集合中没有栈顶元素，并且右子树不为空，那么我们就访问栈顶元素的右节点，并把栈顶"><a href="#开始的话，也是不停的往左子树走，然后直到为-null-，然后如果集合中没有栈顶元素，并且右子树不为空，那么我们就访问栈顶元素的右节点，并把栈顶" class="headerlink" title="开始的话，也是不停的往左子树走，然后直到为 null ，然后如果集合中没有栈顶元素，并且右子树不为空，那么我们就访问栈顶元素的右节点，并把栈顶"></a>开始的话，也是不停的往左子树走，然后直到为 null ，然后如果集合中没有栈顶元素，并且右子树不为空，那么我们就访问栈顶元素的右节点，并把栈顶</h3><h3 id="元素加入集合中，如果集合中有，那么直接访问栈顶元素即可。"><a href="#元素加入集合中，如果集合中有，那么直接访问栈顶元素即可。" class="headerlink" title="元素加入集合中，如果集合中有，那么直接访问栈顶元素即可。"></a>元素加入集合中，如果集合中有，那么直接访问栈顶元素即可。</h3><pre><code class="hljs lasso">class Solution &#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; postorderTraversal(TreeNode root)     &#123;        <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;<span class="hljs-built_in">Integer</span>&gt;();        <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt;();        <span class="hljs-built_in">Set</span>&lt;TreeNode&gt; <span class="hljs-built_in">set</span>=<span class="hljs-literal">new</span> HashSet&lt;TreeNode&gt;();        TreeNode treenode=root;        <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">stack</span>.isEmpty()||treenode!=<span class="hljs-built_in">null</span>)        &#123;            <span class="hljs-keyword">if</span>(treenode!=<span class="hljs-built_in">null</span>)            &#123;                <span class="hljs-built_in">stack</span>.push(treenode);                treenode=treenode.left;                   &#125;               <span class="hljs-keyword">else</span>            &#123;                TreeNode tmp=<span class="hljs-built_in">stack</span>.peek();                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">set</span>.contains(tmp)&amp;&amp;tmp.right!=<span class="hljs-built_in">null</span>)                &#123;                    treenode=tmp.right;                    <span class="hljs-built_in">set</span>.add(tmp);                &#125;                <span class="hljs-keyword">else</span>                &#123;                    res.add(tmp.val);                    <span class="hljs-built_in">stack</span>.pop();                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><h3 id="如果当前节点的右节点和上一次遍历的节点相同，那就表明当前是从右节点过来的了"><a href="#如果当前节点的右节点和上一次遍历的节点相同，那就表明当前是从右节点过来的了" class="headerlink" title="如果当前节点的右节点和上一次遍历的节点相同，那就表明当前是从右节点过来的了"></a>如果当前节点的右节点和上一次遍历的节点相同，那就表明当前是从右节点过来的了</h3><pre><code class="hljs routeros">class Solution &#123;    public List&lt;Integer&gt; postorderTraversal(TreeNode root)     &#123;        List&lt;Integer&gt; <span class="hljs-attribute">res</span>=new ArrayList&lt;Integer&gt;();        Stack&lt;TreeNode&gt; <span class="hljs-attribute">stack</span>=new Stack&lt;TreeNode&gt;();        TreeNode <span class="hljs-attribute">treenode</span>=root;        TreeNode <span class="hljs-attribute">last</span>=<span class="hljs-literal">null</span>;        <span class="hljs-keyword">while</span>(!stack.isEmpty()||treenode!=<span class="hljs-literal">null</span>)        &#123;            <span class="hljs-keyword">if</span>(treenode!=<span class="hljs-literal">null</span>)            &#123;                stack.push(treenode);                <span class="hljs-attribute">treenode</span>=treenode.left;                   &#125;               <span class="hljs-keyword">else</span>            &#123;                TreeNode <span class="hljs-attribute">tmp</span>=stack.peek();                <span class="hljs-keyword">if</span>(tmp.right!=<span class="hljs-literal">null</span>&amp;&amp;tmp.right!=last)                &#123;                    <span class="hljs-attribute">treenode</span>=tmp.right;                &#125;                <span class="hljs-keyword">else</span>                &#123;                    res.<span class="hljs-builtin-name">add</span>(tmp.val);                    <span class="hljs-attribute">last</span>=tmp;                    stack.pop();                &#125;            &#125;        &#125;        return res;    &#125;&#125;</code></pre><h3 id="只需要把每个节点-push-两次，然后判断当前-pop-节点和栈顶节点是否相同。相同的话，就意味着是从左子树到的根节点。"><a href="#只需要把每个节点-push-两次，然后判断当前-pop-节点和栈顶节点是否相同。相同的话，就意味着是从左子树到的根节点。" class="headerlink" title="只需要把每个节点 push 两次，然后判断当前 pop 节点和栈顶节点是否相同。相同的话，就意味着是从左子树到的根节点。"></a>只需要把每个节点 push 两次，然后判断当前 pop 节点和栈顶节点是否相同。相同的话，就意味着是从左子树到的根节点。</h3><h3 id="不同的话，就意味着是从右子树到的根节点，此时就可以把节点加入到-list-中。这个方法比较巧妙"><a href="#不同的话，就意味着是从右子树到的根节点，此时就可以把节点加入到-list-中。这个方法比较巧妙" class="headerlink" title="不同的话，就意味着是从右子树到的根节点，此时就可以把节点加入到 list 中。这个方法比较巧妙"></a>不同的话，就意味着是从右子树到的根节点，此时就可以把节点加入到 list 中。这个方法比较巧妙</h3><pre><code class="hljs lasso">    <span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; postorderTraversal(TreeNode root) &#123;    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">list</span> = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">if</span> (root == <span class="hljs-built_in">null</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>;    &#125;    <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();    <span class="hljs-built_in">stack</span>.push(root);    <span class="hljs-built_in">stack</span>.push(root);    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">stack</span>.isEmpty()) &#123;        TreeNode cur = <span class="hljs-built_in">stack</span>.pop();        <span class="hljs-keyword">if</span> (cur == <span class="hljs-built_in">null</span>) &#123;            continue;        &#125;        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">stack</span>.isEmpty() &amp;&amp; cur == <span class="hljs-built_in">stack</span>.peek()) &#123;            <span class="hljs-built_in">stack</span>.push(cur.right);            <span class="hljs-built_in">stack</span>.push(cur.right);            <span class="hljs-built_in">stack</span>.push(cur.left);            <span class="hljs-built_in">stack</span>.push(cur.left);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-built_in">list</span>.add(cur.val);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>;&#125;</code></pre><h3 id="可以转换成一个逆的前序遍历来实现"><a href="#可以转换成一个逆的前序遍历来实现" class="headerlink" title="可以转换成一个逆的前序遍历来实现"></a>可以转换成一个逆的前序遍历来实现</h3><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; postorderTraversal(TreeNode root) &#123;    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;<span class="hljs-built_in">Integer</span>&gt;();    <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt;();    TreeNode treenode=root;    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">stack</span>.isEmpty()||treenode!=<span class="hljs-built_in">null</span>)    &#123;        <span class="hljs-keyword">if</span>(treenode!=<span class="hljs-built_in">null</span>)        &#123;            res.add(treenode.val);            <span class="hljs-built_in">stack</span>.add(treenode);            treenode=treenode.right;         &#125;           <span class="hljs-keyword">else</span>        &#123;            treenode=<span class="hljs-built_in">stack</span>.pop().left;        &#125;    &#125;    Collections.reverse(res);    <span class="hljs-keyword">return</span> res;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>栈</tag>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>232. 用栈实现队列</title>
    <link href="/2020/05/19/232.%20%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2020/05/19/232.%20%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>双栈实现队列，思路较为简单</p><p>···<br>class MyQueue {<br>    private Stack<Integer> stack1;<br>    private Stack<Integer> stack2;<br>    /<em>* Initialize your data structure here. </em>/<br>    public MyQueue() {<br>        stack1=new Stack<Integer>();<br>        stack2=new Stack<Integer>();<br>    }</p><pre><code>/** Push element x to the back of queue. */public void push(int x) {    stack1.push(x);}/** Removes the element from in front of queue and returns that element. */public int pop() {    if(stack2.isEmpty())    {        StackMove(stack1,stack2);    }    int res=stack2.peek();    stack2.pop();    return res;}/** Get the front element. */public int peek() {    if(stack2.isEmpty())    {        StackMove(stack1,stack2);    }    int res=stack2.peek();    return res;}/** Returns whether the queue is empty. */public boolean empty() {    return stack1.isEmpty()&amp;&amp;stack2.isEmpty();}public void StackMove(Stack&lt;Integer&gt; stack1,Stack&lt;Integer&gt; stack2){    if(stack2.isEmpty())    {         while(!stack1.isEmpty())        {            int a=stack1.peek();            stack2.push(a);            stack1.pop();        }    }}</code></pre><p>}</p><p>/**</p><ul><li>Your MyQueue object will be instantiated and called as such:</li><li>MyQueue obj = new MyQueue();</li><li>obj.push(x);</li><li>int param_2 = obj.pop();</li><li>int param_3 = obj.peek();</li><li>boolean param_4 = obj.empty();<br>*/<br>···</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>225. 用队列实现栈</title>
    <link href="/2020/05/19/225.%20%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <url>/2020/05/19/225.%20%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h3 id="队列实现栈"><a href="#队列实现栈" class="headerlink" title="队列实现栈"></a>队列实现栈</h3><p>主要是栈的pop操作比较困难，这个可以通过栈的循环出队入队来实现，复杂度为O(N)。<br><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> &#123;</span>    <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; quene=<span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();    <span class="hljs-keyword">private</span>    <span class="hljs-keyword">int</span> mytop=<span class="hljs-number">0</span>;    <span class="hljs-comment">/** Initialize your data structure here. */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;    &#125;        <span class="hljs-comment">/** Push element x onto stack. */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;        quene.offer(x);        mytop=x;    &#125;        <span class="hljs-comment">/** Removes the element on top of the stack and returns that element. */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;quene.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++)        &#123;            <span class="hljs-keyword">int</span> a=quene.poll();            quene.offer(a);            <span class="hljs-keyword">if</span>(i==quene.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>)                mytop=a;        &#125;        <span class="hljs-keyword">return</span> quene.poll();    &#125;        <span class="hljs-comment">/** Get the top element. */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span>(!quene.isEmpty())        <span class="hljs-keyword">return</span> mytop;        <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;        <span class="hljs-comment">/** Returns whether the stack is empty. */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span>(quene.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Your MyStack object will be instantiated and called as such:</span><span class="hljs-comment"> * MyStack obj = new MyStack();</span><span class="hljs-comment"> * obj.push(x);</span><span class="hljs-comment"> * int param_2 = obj.pop();</span><span class="hljs-comment"> * int param_3 = obj.top();</span><span class="hljs-comment"> * boolean param_4 = obj.empty();</span><span class="hljs-comment"> */</span></code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux短横线的区别</title>
    <link href="/2020/05/18/linux%E7%9F%AD%E6%A8%AA%E7%BA%BF%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/05/18/linux%E7%9F%AD%E6%A8%AA%E7%BA%BF%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="linux短横线的区别"><a href="#linux短横线的区别" class="headerlink" title="linux短横线的区别"></a>linux短横线的区别</h2><pre><code class="hljs properties"><span class="hljs-attr">rm</span> <span class="hljs-string">-vf ***</span><span class="hljs-attr">tar</span> <span class="hljs-string">-xzvf  ***.tar.gz</span><span class="hljs-attr">gcc</span> <span class="hljs-string">--version</span><span class="hljs-attr">rm</span> <span class="hljs-string">--help</span></code></pre><p>　　从上面命令我们可以看出，绝大数命令有以下的规则：</p><p>　　①　参数前单杠的表明后面的参数是字符形式；</p><p>　　②　参数前双杠的则表明后面的参数是单词形式</p><pre><code class="hljs css"><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">xzvf</span>  ***<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">-xzvf</span> ***<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span></code></pre><p>两种命令行都是行的通的，并且功能都是解压软件包，那它们到底有什么不同呢，实际上这就涉及两种Linux风格，System V和BSD。它们对应关系如下：</p><p>　　①　参数前有横的是System V风格。</p><p>　　②　参数前没有横的是BSD风格。</p><p>　　System V和BSD两种风格的区别主要是：</p><p>　　系统启动过程中 kernel 最后一步调用的是 init 程序，init 程序的执行有两种风格，即 System V 和 BSD。</p><p>　　System V 风格中 init 调用 /etc/inittab，BSD 风格调用 /etc/rc，它们的目的相同，都是根据 runlevel 执行一系列的程序。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>224. 基本计算器</title>
    <link href="/2020/05/18/224.%20%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <url>/2020/05/18/224.%20%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="方法1和方法二："><a href="#方法1和方法二：" class="headerlink" title="方法1和方法二："></a>方法1和方法二：</h2><p>只有加减的话，相当于去掉括号，去掉括号的过程就是，把数字和字符串弹出，然后计算的过程，这个方法比较麻烦，应该可以采用字符串反向便利的方式进行计算，这样计算表达式就要方便很多，从左到右算就可以，如果还有乘除之类的话，那么在过程中应该还要判断字符的优先级，然后进行计算,还有一个需要注意的就是，数字可能有很多位。<br><pre><code class="hljs pgsql">方法一：<span class="hljs-keyword">class</span> Solution &#123;    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> calculate(String s)     &#123;        Stack &lt;<span class="hljs-type">Integer</span>&gt; op1=<span class="hljs-built_in">new</span> Stack &lt;<span class="hljs-type">Integer</span>&gt;();//数字栈        Stack&lt;<span class="hljs-type">Character</span>&gt; op2=<span class="hljs-built_in">new</span> Stack&lt;<span class="hljs-type">Character</span>&gt;();//字符栈        <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;        <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;//正在记录数字        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)        &#123;            <span class="hljs-type">Character</span> ch=s.charAt(i);            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>&amp;&amp;!<span class="hljs-type">Character</span>.isDigit(ch))            &#123;                op1.push(t);                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(t);                flag=<span class="hljs-number">1</span>;                t=<span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">if</span>(<span class="hljs-type">Character</span>.isDigit(ch))            &#123;                flag=<span class="hljs-number">0</span>;                <span class="hljs-type">int</span> num=(<span class="hljs-type">int</span>)(ch-<span class="hljs-string">'0'</span>);                t=t*<span class="hljs-number">10</span>+num;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">'-'</span>)||ch.equals(<span class="hljs-string">'+'</span>)||ch.equals(<span class="hljs-string">'('</span>))            &#123;                op2.push(ch);            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">')'</span>))            &#123;                op1.push(CalFormula(op1,op2));            &#125;        &#125;        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)        &#123;            op1.push(t);            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(t);            flag=<span class="hljs-number">1</span>;            t=<span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">return</span> CalFormula(op1,op2);    &#125;    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> CalFormula(Stack &lt;<span class="hljs-type">Integer</span>&gt; op1 , Stack&lt;<span class="hljs-type">Character</span>&gt; op2)    &#123;        Stack &lt;<span class="hljs-type">Integer</span>&gt; op3=<span class="hljs-built_in">new</span> Stack &lt;<span class="hljs-type">Integer</span>&gt;();//数字栈        Stack&lt;<span class="hljs-type">Character</span>&gt; op4=<span class="hljs-built_in">new</span> Stack&lt;<span class="hljs-type">Character</span>&gt;();//字符栈        <span class="hljs-keyword">while</span>(!op2.isEmpty()&amp;&amp;!op2.peek().equals(<span class="hljs-string">'('</span>))        &#123;                                                op3.push(op1.peek());                        op1.pop();                        op4.push(op2.peek());                        op2.pop();                        // <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(op2.peek());        &#125;                    op3.push(op1.peek());                    op1.pop();                    <span class="hljs-keyword">if</span>(!op2.isEmpty()&amp;&amp;op2.peek().equals(<span class="hljs-string">'('</span>))                        op2.pop();                    <span class="hljs-keyword">while</span>(!op4.isEmpty())                    &#123;                        <span class="hljs-type">int</span> a=op3.peek();                        op3.pop();                        <span class="hljs-type">int</span> b=op3.peek();                        op3.pop();                        <span class="hljs-type">char</span> c=op4.peek();                        op4.pop();                        op3.push(cal(c,a,b));                    &#125;                    <span class="hljs-keyword">return</span> op3.peek();    &#125;    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> cal(<span class="hljs-type">Character</span> ch,<span class="hljs-type">Integer</span> num,<span class="hljs-type">Integer</span> num1)    &#123;        <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">'-'</span>))        <span class="hljs-keyword">return</span> num-num1;        <span class="hljs-keyword">else</span>         <span class="hljs-keyword">return</span> num+num1;    &#125;&#125;</code></pre></p><pre><code class="hljs reasonml">方法<span class="hljs-number">2</span>：<span class="hljs-keyword">class</span> Solution &#123;    public <span class="hljs-built_in">int</span> calculate(String s)     &#123;        Stack &lt;Integer&gt; op1=<span class="hljs-keyword">new</span> Stack &lt;Integer&gt;<span class="hljs-literal">()</span>;<span class="hljs-comment">//数字栈</span>        Stack&lt;Character&gt; op2=<span class="hljs-keyword">new</span> Stack&lt;Character&gt;<span class="hljs-literal">()</span>;<span class="hljs-comment">//字符栈</span>        Integer t=<span class="hljs-number">0</span>;        StringBuffer nu=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer(<span class="hljs-string">""</span>)</span>;        <span class="hljs-built_in">int</span> flag=<span class="hljs-number">1</span>;<span class="hljs-comment">//正在记录数字</span>        StringBuffer a=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer(<span class="hljs-params">s</span>)</span>;        String str=a.reverse<span class="hljs-literal">()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;        for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;str.length<span class="hljs-literal">()</span>;i++)        &#123;            Character ch=str.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>;            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>&amp;&amp;!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Character</span>.</span></span>is<span class="hljs-constructor">Digit(<span class="hljs-params">ch</span>)</span>)            &#123;                t=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">nu</span>.<span class="hljs-params">reverse</span>()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);                op1.push(t);                flag=<span class="hljs-number">1</span>;                nu=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer(<span class="hljs-string">""</span>)</span>;            &#125;            <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Character</span>.</span></span>is<span class="hljs-constructor">Digit(<span class="hljs-params">ch</span>)</span>)            &#123;                nu.append(ch);                flag=<span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-character">'-'</span>)<span class="hljs-pattern-match"><span class="hljs-operator">||</span>ch.equals('+')<span class="hljs-operator">||</span>ch.equals(')'))</span><span class="hljs-pattern-match">            &#123;</span><span class="hljs-pattern-match">                op2.push(ch);</span><span class="hljs-pattern-match">            &#125;</span><span class="hljs-pattern-match">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals('('))</span><span class="hljs-pattern-match">            &#123;</span><span class="hljs-pattern-match">                <span class="hljs-constructor">CalFormula(<span class="hljs-params">op1</span>,<span class="hljs-params">op2</span>)</span>;</span><span class="hljs-pattern-match">            &#125;</span><span class="hljs-pattern-match"></span><span class="hljs-pattern-match">        &#125;</span><span class="hljs-pattern-match">        <span class="hljs-keyword">if</span>(flag<span class="hljs-operator">==</span>0)</span><span class="hljs-pattern-match">        &#123;</span><span class="hljs-pattern-match">                t=<span class="hljs-constructor">Integer</span>.parse<span class="hljs-constructor">Int(<span class="hljs-params">nu</span>.<span class="hljs-params">reverse</span>()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);</span><span class="hljs-pattern-match">                op1.push(t);</span><span class="hljs-pattern-match">        &#125;</span><span class="hljs-pattern-match">        return <span class="hljs-constructor">CalFormula(<span class="hljs-params">op1</span>,<span class="hljs-params">op2</span>)</span>;</span><span class="hljs-pattern-match">    &#125;</span><span class="hljs-pattern-match">    public <span class="hljs-built_in">int</span> <span class="hljs-constructor">CalFormula(Stack &lt;Integer&gt; <span class="hljs-params">op1</span> , Stack&lt;Character&gt; <span class="hljs-params">op2</span>)</span></span><span class="hljs-pattern-match">    &#123;</span><span class="hljs-pattern-match">        <span class="hljs-constructor">Stack</span> &lt;<span class="hljs-constructor">Integer</span>&gt; op3=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Stack</span> &lt;<span class="hljs-constructor">Integer</span>&gt;();<span class="hljs-operator">/</span><span class="hljs-operator">/</span>数字栈</span><span class="hljs-pattern-match">        <span class="hljs-constructor">Stack</span>&lt;<span class="hljs-constructor">Character</span>&gt; op4=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Stack</span>&lt;<span class="hljs-constructor">Character</span>&gt;();<span class="hljs-operator">/</span><span class="hljs-operator">/</span>字符栈</span><span class="hljs-pattern-match">        <span class="hljs-keyword">while</span>(!op2.is<span class="hljs-constructor">Empty()</span><span class="hljs-operator">&amp;&amp;</span>!op2.peek().equals(')'))</span><span class="hljs-pattern-match">        &#123;</span><span class="hljs-pattern-match">            <span class="hljs-built_in">int</span> a=op1.peek();</span><span class="hljs-pattern-match">            op1.pop();</span><span class="hljs-pattern-match">            <span class="hljs-built_in">int</span> b=op1.peek();</span><span class="hljs-pattern-match">            op1.pop();</span><span class="hljs-pattern-match">            <span class="hljs-constructor">Character</span> c=op2.peek();</span><span class="hljs-pattern-match">            op2.pop();</span><span class="hljs-pattern-match">            op1.push(cal(c,a,b));</span><span class="hljs-pattern-match">        &#125;</span><span class="hljs-pattern-match">        <span class="hljs-keyword">if</span>(!op2.is<span class="hljs-constructor">Empty()</span><span class="hljs-operator">&amp;&amp;</span>op2.peek().equals(')'))</span><span class="hljs-pattern-match">            op2.pop();</span><span class="hljs-pattern-match">        return op1.peek();</span><span class="hljs-pattern-match">    &#125;</span><span class="hljs-pattern-match">    public <span class="hljs-built_in">int</span> cal(<span class="hljs-constructor">Character</span> ch,<span class="hljs-constructor">Integer</span> num,<span class="hljs-constructor">Integer</span> num1)</span><span class="hljs-pattern-match">    &#123;</span><span class="hljs-pattern-match">        <span class="hljs-keyword">if</span>(ch.equals('-'))</span><span class="hljs-pattern-match">        return num-num1;</span><span class="hljs-pattern-match">        <span class="hljs-keyword">else</span> </span><span class="hljs-pattern-match">        return num+num1;</span><span class="hljs-pattern-match">    &#125;</span><span class="hljs-pattern-match">&#125;</span></code></pre><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>采用一种双栈的方法，<br>解法一经过了一个中间过程，先转为了后缀表达式然后进行求值。我们其实可以直接利用两个栈，边遍历边进行的，这个方法是我当时上课学的方法。从 这里 把过程贴到下边，和解法一其实有些类似的。</p><p>使用两个栈，stack0 用于存储操作数，stack1 用于存储操作符<br>从左往右扫描，遇到操作数入栈 stack0<br>遇到操作符时，如果当前优先级低于或等于栈顶操作符优先级，则从 stack0 弹出两个元素，从 stack1 弹出一个操作符，进行计算，将结果并压入stack0，继续与栈顶操作符的比较优先级。<br>如果遇到操作符高于栈顶操作符优先级，则直接入栈 stack1<br>遇到左括号，直接入栈 stack1。<br>遇到右括号，则从 stack0 弹出两个元素，从 stack1 弹出一个操作符进行计算，并将结果加入到 stack0 中，重复这步直到遇到左括号<br>和解法一一样，因为我们只有加法和减法，所以这个流程可以简化一下。</p><p>第 3 条改成「遇到操作符时，则从 stack0 弹出两个元素进行计算，并压入stack0，直到栈空或者遇到左括号，最后将当前操作符压入 stack1 」处。<br><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span> </span><span class="hljs-function">    </span>&#123;        Stack &lt;Integer&gt; op1=<span class="hljs-keyword">new</span> Stack &lt;Integer&gt;();<span class="hljs-comment">//数字栈</span>        Stack&lt;Character&gt; op2=<span class="hljs-keyword">new</span> Stack&lt;Character&gt;();<span class="hljs-comment">//字符栈</span>        HashMap&lt;Character,Integer&gt; <span class="hljs-built_in">map</span>=<span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;();        <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">'+'</span>,<span class="hljs-number">1</span>);        <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">'-'</span>,<span class="hljs-number">1</span>);        <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">'('</span>,<span class="hljs-number">-1</span>);        Integer t=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;        Character ch;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)        &#123;             ch=s.charAt(i);            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>&amp;&amp;!Character.isDigit(ch))            &#123;                op1.push(t);                t=<span class="hljs-number">0</span>;                flag=<span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">if</span>(Character.isDigit(ch))            &#123;                flag=<span class="hljs-number">0</span>;                t=t*<span class="hljs-number">10</span>+(<span class="hljs-keyword">int</span>)(ch-<span class="hljs-string">'0'</span>);            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">'-'</span>)||ch.equals(<span class="hljs-string">'+'</span>))            &#123;                flag=<span class="hljs-number">1</span>;                <span class="hljs-keyword">while</span>(!op2.isEmpty()&amp;&amp;!(<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(op2.<span class="hljs-built_in">peek</span>())&lt;<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(ch)))                &#123;                    <span class="hljs-keyword">int</span> a=op1.<span class="hljs-built_in">peek</span>();                    op1.pop();                    <span class="hljs-keyword">int</span> b=op1.<span class="hljs-built_in">peek</span>();                    op1.pop();                    Character c=op2.<span class="hljs-built_in">peek</span>();                    op2.pop();                    op1.push(cal(c,b,a));                &#125;                op2.push(ch);            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">'('</span>))            &#123;                flag=<span class="hljs-number">1</span>;                op2.push(ch);            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">')'</span>))            &#123;                flag=<span class="hljs-number">1</span>;                <span class="hljs-keyword">while</span>(!op2.isEmpty()&amp;&amp;!op2.<span class="hljs-built_in">peek</span>().equals(<span class="hljs-string">'('</span>))                &#123;                    <span class="hljs-keyword">int</span> a=op1.<span class="hljs-built_in">peek</span>();                    op1.pop();                    <span class="hljs-keyword">int</span> b=op1.<span class="hljs-built_in">peek</span>();                    op1.pop();                    Character c=op2.<span class="hljs-built_in">peek</span>();                    op2.pop();                    op1.push(cal(c,b,a));                &#125;                op2.pop();            &#125;        &#125;        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)        &#123;            op1.push(t);        &#125;         <span class="hljs-keyword">while</span>(!op2.isEmpty())        &#123;            <span class="hljs-keyword">int</span> a=op1.<span class="hljs-built_in">peek</span>();            op1.pop();            <span class="hljs-keyword">int</span> b=op1.<span class="hljs-built_in">peek</span>();            op1.pop();            Character c=op2.<span class="hljs-built_in">peek</span>();            op2.pop();            op1.push(cal(c,b,a));        &#125;        <span class="hljs-keyword">return</span> op1.<span class="hljs-built_in">peek</span>();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(Character ch,Integer num,Integer num1)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(ch.equals(<span class="hljs-string">'-'</span>))        <span class="hljs-keyword">return</span> num-num1;        <span class="hljs-keyword">else</span>         <span class="hljs-keyword">return</span> num+num1;    &#125;&#125;</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>Leetcode</tag>
      
      <tag>java</tag>
      
      <tag>表达式计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统计学习方法课后作业</title>
    <link href="/2020/05/18/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/"/>
    <url>/2020/05/18/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="第九章EM算法及其推广"><a href="#第九章EM算法及其推广" class="headerlink" title="第九章EM算法及其推广"></a>第九章EM算法及其推广</h2><pre><code class="hljs routeros">9.1import numpy as npy=[1,1,0,1,0,0,1,0,1,1]<span class="hljs-attribute">pai</span>=0.46<span class="hljs-attribute">p</span>=0.55<span class="hljs-attribute">q</span>=0.67<span class="hljs-attribute">theta</span>=2<span class="hljs-keyword">while</span>(theta&gt;0.0001):    u_next=[]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  range(len(y)):        <span class="hljs-attribute">a</span>=pai*(p**y[i])*((1-p)**(1-y[i]))        b=(1-pai)*(q**y[i])*((1-q)**(1-y[i]))        u_next.append(a/(a+b))    <span class="hljs-attribute">pai_next</span>=0    <span class="hljs-attribute">p_next</span>=0    <span class="hljs-attribute">q_next</span>=0    <span class="hljs-attribute">tmp</span>=0    <span class="hljs-attribute">pai_next</span>=np.mean(u_next)    p_next = sum(np.multiply(u_next,y))/sum(u_next)    tmp=[1-u_next[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(y))]    q_next = sum(np.multiply(tmp,y))/sum(tmp)        <span class="hljs-builtin-name">print</span>(pai_next)    <span class="hljs-builtin-name">print</span>(p_next)    <span class="hljs-builtin-name">print</span>(q_next)    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"\n"</span>)    <span class="hljs-attribute">theta</span>=abs(pai_next-pai)+abs(p_next-p)+abs(q_next-q)    <span class="hljs-attribute">pai</span>=pai_next    <span class="hljs-attribute">p</span>=p_next    <span class="hljs-attribute">q</span>=q_next</code></pre><p>求得<br><pre><code class="hljs angelscript"><span class="hljs-number">0.461862835113919</span><span class="hljs-number">0.5345950037850112</span><span class="hljs-number">0.6561346417857326</span><span class="hljs-number">0.46186283511391907</span><span class="hljs-number">0.5345950037850112</span><span class="hljs-number">0.6561346417857326</span></code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>统计学习方法，作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络初始化与xavier初始化</title>
    <link href="/2020/05/18/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8Exavier%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2020/05/18/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8Exavier%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/27919794" target="_blank" rel="noopener">xavier初始化</a> </p><p><a href="https://blog.csdn.net/manong_wxd/article/details/78734725" target="_blank" rel="noopener">深度学习初始化总结</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>初始化，xavier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵的范数</title>
    <link href="/2020/05/18/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%8C%83%E6%95%B0/"/>
    <url>/2020/05/18/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%8C%83%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>关于矩阵的范数的一些总结</p><p>一范数，二范数，闵可夫斯基范数这些都比较常见，一般不用多说</p><h2 id="核范数"><a href="#核范数" class="headerlink" title="核范数"></a>核范数</h2><p>代表矩阵的奇异值之和，是用来约束低秩的一种范数，代表rank(w)的凸近似。</p><script type="math/tex; mode=display">||X||_*=\sum_{i}^{}\sigma_i(x)</script><h2 id="F范数"><a href="#F范数" class="headerlink" title="F范数"></a>F范数</h2><p>即为就是对应元素的平方和再开方。<br>f范数实际上就是衡量这个矩阵和对应的零矩阵的距离，</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>范数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵求导</title>
    <link href="/2020/05/18/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/"/>
    <url>/2020/05/18/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/pinard/p/10825264.html" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>矩阵求导</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在hexo博客中写数学公式</title>
    <link href="/2020/05/18/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%86%99%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2020/05/18/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%86%99%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="这个网站值得借鉴"><a href="#这个网站值得借鉴" class="headerlink" title="这个网站值得借鉴"></a><a href="https://blog.csdn.net/Aoman_Hao/article/details/81381507" target="_blank" rel="noopener">这个网站值得借鉴</a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像的k空间</title>
    <link href="/2020/05/18/%E5%9B%BE%E5%83%8F%E7%9A%84k%E7%A9%BA%E9%97%B4/"/>
    <url>/2020/05/18/%E5%9B%BE%E5%83%8F%E7%9A%84k%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>关于图像的k空间到底是什么意思呢，总的来说就算傅里叶域变换后的一种图，不能让人感性的感受到图，但是经过傅里叶反变换，总是能够变回原来的图像<br>具体可见下面两篇博客<br><a href="https://wenku.baidu.com/view/9664b875a300a6c30c229f73.html" target="_blank" rel="noopener">k空间</a><br><a href="https://chunshan.github.io/MRI-QA/k-space/what-is-k-space.html" target="_blank" rel="noopener">k空间</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>图像处理，k空间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵的TV最小化</title>
    <link href="/2020/05/18/TV%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
    <url>/2020/05/18/TV%E6%9C%80%E5%B0%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="在一个图像处理问题中如何有效的去除图像的噪声"><a href="#在一个图像处理问题中如何有效的去除图像的噪声" class="headerlink" title="在一个图像处理问题中如何有效的去除图像的噪声"></a>在一个图像处理问题中如何有效的去除图像的噪声</h2><p>可以求解这样一个问题<br>最小化图像的TV,TV即为梯度图像的一范数，当然需要加上正则化项，如果不加的化，全黑图才是最优的一个解，加上正则化之后可以获得图像的分块光滑图像，事实证明，效果很好。</p>]]></content>
    
    
    
    <tags>
      
      <tag>图像处理</tag>
      
      <tag>TV最小化</tag>
      
      <tag>医学图像</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>softmax和SVM损失函数</title>
    <link href="/2020/05/18/softmax%E5%92%8CSVM%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <url>/2020/05/18/softmax%E5%92%8CSVM%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="softmax可以参考"><a href="#softmax可以参考" class="headerlink" title="softmax可以参考"></a>softmax可以参考</h2><p><a href="https://blog.csdn.net/Hai0bin1Wang2/article/details/100901006" target="_blank" rel="noopener">softmax可以参考</a></p><p><a href="https://blog.csdn.net/weixin_38278334/article/details/83002748" target="_blank" rel="noopener">softmax可以参考</a><br><pre><code class="hljs stan">主要要理解熵的原理，以及交叉熵。以及<span class="hljs-built_in">softmax</span>的正则化的内容</code></pre></p><h2 id="SVM损失函数可以参考"><a href="#SVM损失函数可以参考" class="headerlink" title="SVM损失函数可以参考"></a>SVM损失函数可以参考</h2><p><a href="https://www.cnblogs.com/hoey-ge/p/5587383.html" target="_blank" rel="noopener">SVM损失函数可以参考</a><br><pre><code class="hljs plain">主要是要比正确分类的类别多出一个边界出来</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>softmax</tag>
      
      <tag>SVM损失</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy中矩阵与向量的加法</title>
    <link href="/2020/05/18/numpy%E7%9F%A9%E9%98%B5%E5%8A%A0%E6%B3%95/"/>
    <url>/2020/05/18/numpy%E7%9F%A9%E9%98%B5%E5%8A%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在Numpy中，矩阵与向量相加时，矩阵的每一行与向量相加，即要求矩阵的列数与向量的维数相等。<br><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span> numpy as npx = np.<span class="hljs-built_in">array</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])# <span class="hljs-built_in">array</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],#       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])y = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])# <span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])z = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])# <span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])# x + y 会报错x + z# <span class="hljs-built_in">array</span>([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>],#       [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]])</code></pre></p>]]></content>
    
    
    
    <tags>
      
      <tag>矩阵加法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab并行</title>
    <link href="/2020/05/18/matlab%E5%B9%B6%E8%A1%8C/"/>
    <url>/2020/05/18/matlab%E5%B9%B6%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="parfor-matlab用法"><a href="#parfor-matlab用法" class="headerlink" title="parfor matlab用法"></a>parfor matlab用法</h2><pre><code class="hljs angelscript">matlab会弄出几个虚拟的小pc，一个算i=<span class="hljs-number">1</span>:<span class="hljs-number">30</span>部分循环,一个算i=<span class="hljs-number">50</span>:<span class="hljs-number">80</span>部分循环,再来一个算i=<span class="hljs-number">90</span>:<span class="hljs-number">120</span>部分循环，当然数字是我瞎编的，我是想说matlab将一个大循环分成小块，然后这些小块并行计算，最后再合在一起。这样，有一个问题，因为普通的循环是从i=<span class="hljs-number">1</span>算到i=<span class="hljs-number">100</span>，一个接一个算，如果下一次循环要依赖上一次循环怎么办？如果出现这种情况，那就不能用matlab的parfor了。用parfor的前提条件就是，循环的每次迭代独立，不相互依赖。举个简单的例子，计算<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3.</span>..+<span class="hljs-number">100</span>就可以用parfor，但是如果计算斐波那契数列的前<span class="hljs-number">100</span>个数字，那就不能用parfor了。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>matlab</tag>
      
      <tag>并行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makedown数学公式写法</title>
    <link href="/2020/05/18/makedown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%86%99%E6%B3%95/"/>
    <url>/2020/05/18/makedown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="此网站可以查看公式写法"><a href="#此网站可以查看公式写法" class="headerlink" title="此网站可以查看公式写法"></a><a href="https://www.zybuluo.com/codeep/note/163962#10%E5%A6%82%E4%BD%95%E8%BE%93%E5%85%A5%E7%B4%AF%E5%8A%A0%E7%B4%AF%E4%B9%98%E8%BF%90%E7%AE%97" target="_blank" rel="noopener">此网站可以查看公式写法</a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>makedown</tag>
      
      <tag>数学公式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda 安装 pytorch</title>
    <link href="/2020/05/18/hello-world/"/>
    <url>/2020/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>关于conda安装pytorch的一些问题的总结</p><h2 id="使用conda安装pytorch较为简单"><a href="#使用conda安装pytorch较为简单" class="headerlink" title="使用conda安装pytorch较为简单"></a>使用conda安装pytorch较为简单</h2><h3 id="在pytorch官网选择自己需要的版本，以及是否带gpu的，我的由于是没有gpu的，所以是"><a href="#在pytorch官网选择自己需要的版本，以及是否带gpu的，我的由于是没有gpu的，所以是" class="headerlink" title="在pytorch官网选择自己需要的版本，以及是否带gpu的，我的由于是没有gpu的，所以是"></a>在<a href="https://pytorch.org/" target="_blank" rel="noopener">pytorch官网</a>选择自己需要的版本，以及是否带gpu的，我的由于是没有gpu的，所以是</h3><pre><code class="hljs cmake">conda <span class="hljs-keyword">install</span> pytorch torchvision cpuonly -c pytorch</code></pre><h1 id="但是下载的速度会很慢，而且会出现httperror-这时可以考虑更换源，选择国内的镜像源，例如清华的镜像"><a href="#但是下载的速度会很慢，而且会出现httperror-这时可以考虑更换源，选择国内的镜像源，例如清华的镜像" class="headerlink" title="但是下载的速度会很慢，而且会出现httperror,这时可以考虑更换源，选择国内的镜像源，例如清华的镜像"></a>但是下载的速度会很慢，而且会出现httperror,这时可以考虑更换源，选择国内的镜像源，例如清华的镜像</h1><h3 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h3><pre><code class="hljs bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --<span class="hljs-built_in">set</span> show_channel_urls yesconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</code></pre><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><pre><code class="hljs bash">import torch</code></pre><p>成功后代表安装成功</p><p>更多信息: <a href="https://thesakura.github.io" target="_blank" rel="noopener">我的博客</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用github+hexo部署博客</title>
    <link href="/2020/05/18/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/05/18/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">可见这篇博客</a></p><p>更多信息: <a href="https://thesakura.github.io" target="_blank" rel="noopener">我的博客</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像生成</title>
    <link href="/2020/05/18/cs231%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/"/>
    <url>/2020/05/18/cs231%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>可以参考这个博客<br><a href="https://blog.csdn.net/poulang5786/article/details/80766498" target="_blank" rel="noopener">图像生成cs231</a></p><p>同时这个人还总结了cs231的很多内容，可以都参考一下</p>]]></content>
    
    
    
    <tags>
      
      <tag>cs231</tag>
      
      <tag>图像生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
